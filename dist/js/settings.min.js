angular.module("pascalprecht.translate",["ng"]).run(["$translate",function(e){var t=e.storageKey(),n=e.storage(),a=function(){var a=e.preferredLanguage();angular.isString(a)?e.use(a):n.put(t,e.use())};n?n.get(t)?e.use(n.get(t))["catch"](a):a():angular.isString(e.preferredLanguage())&&e.use(e.preferredLanguage())}]),angular.module("pascalprecht.translate").provider("$translate",["$STORAGE_KEY",function(e){var t,n,a,i,r,o,s,l,c,u,d,p,f,g,m,h={},v=[],b=e,y=[],$=!1,w="translate-cloak",k=!1,x=".",C="2.5.2",S=function(){var e,t,n=window.navigator,a=["language","browserLanguage","systemLanguage","userLanguage"];if(angular.isArray(n.languages))for(e=0;e<n.languages.length;e++)if(t=n.languages[e],t&&t.length)return t;for(e=0;e<a.length;e++)if(t=n[a[e]],t&&t.length)return t;return null};S.displayName="angular-translate/service: getFirstBrowserLanguage";var D=function(){return(S()||"").split("-").join("_")};D.displayName="angular-translate/service: getLocale";var T=function(e,t){for(var n=0,a=e.length;a>n;n++)if(e[n]===t)return n;return-1},O=function(){return this.replace(/^\s+|\s+$/g,"")},E=function(e){for(var t=[],a=angular.lowercase(e),i=0,r=v.length;r>i;i++)t.push(angular.lowercase(v[i]));if(T(t,a)>-1)return e;if(n){var o;for(var s in n){var l=!1,c=Object.prototype.hasOwnProperty.call(n,s)&&angular.lowercase(s)===angular.lowercase(e);if("*"===s.slice(-1)&&(l=s.slice(0,-1)===e.slice(0,s.length-1)),(c||l)&&(o=n[s],T(t,angular.lowercase(o))>-1))return o}}var u=e.split("_");return u.length>1&&T(t,angular.lowercase(u[0]))>-1?u[0]:e},M=function(e,t){if(!e&&!t)return h;if(e&&!t){if(angular.isString(e))return h[e]}else angular.isObject(h[e])||(h[e]={}),angular.extend(h[e],A(t));return this};this.translations=M,this.cloakClassName=function(e){return e?(w=e,this):w};var A=function(e,t,n,a){var i,r,o,s;t||(t=[]),n||(n={});for(i in e)Object.prototype.hasOwnProperty.call(e,i)&&(s=e[i],angular.isObject(s)?A(s,t.concat(i),n,i):(r=t.length?""+t.join(x)+x+i:i,t.length&&i===a&&(o=""+t.join(x),n[o]="@:"+r),n[r]=s));return n};this.addInterpolation=function(e){return y.push(e),this},this.useMessageFormatInterpolation=function(){return this.useInterpolation("$translateMessageFormatInterpolation")},this.useInterpolation=function(e){return u=e,this},this.useSanitizeValueStrategy=function(e){return $=e,this},this.preferredLanguage=function(e){return I(e),this};var I=function(e){return e&&(t=e),t};this.translationNotFoundIndicator=function(e){return this.translationNotFoundIndicatorLeft(e),this.translationNotFoundIndicatorRight(e),this},this.translationNotFoundIndicatorLeft=function(e){return e?(f=e,this):f},this.translationNotFoundIndicatorRight=function(e){return e?(g=e,this):g},this.fallbackLanguage=function(e){return P(e),this};var P=function(e){return e?(angular.isString(e)?(i=!0,a=[e]):angular.isArray(e)&&(i=!1,a=e),angular.isString(t)&&T(a,t)<0&&a.push(t),this):i?a[0]:a};this.use=function(e){if(e){if(!h[e]&&!d)throw new Error("$translateProvider couldn't find translationTable for langKey: '"+e+"'");return r=e,this}return r};var U=function(e){return e?(b=e,void 0):l?l+b:b};this.storageKey=U,this.useUrlLoader=function(e,t){return this.useLoader("$translateUrlLoader",angular.extend({url:e},t))},this.useStaticFilesLoader=function(e){return this.useLoader("$translateStaticFilesLoader",e)},this.useLoader=function(e,t){return d=e,p=t||{},this},this.useLocalStorage=function(){return this.useStorage("$translateLocalStorage")},this.useCookieStorage=function(){return this.useStorage("$translateCookieStorage")},this.useStorage=function(e){return s=e,this},this.storagePrefix=function(e){return e?(l=e,this):e},this.useMissingTranslationHandlerLog=function(){return this.useMissingTranslationHandler("$translateMissingTranslationHandlerLog")},this.useMissingTranslationHandler=function(e){return c=e,this},this.usePostCompiling=function(e){return k=!!e,this},this.determinePreferredLanguage=function(e){var n=e&&angular.isFunction(e)?e():D();return t=v.length?E(n):n,this},this.registerAvailableLanguageKeys=function(e,t){return e?(v=e,t&&(n=t),this):v},this.useLoaderCache=function(e){return e===!1?m=void 0:e===!0?m=!0:"undefined"==typeof e?m="$translationCache":e&&(m=e),this},this.$get=["$log","$injector","$rootScope","$q",function(e,n,l,v){var x,S,D,L=n.get(u||"$translateDefaultInterpolation"),F=!1,N={},V={},_=function(e,n,i){if(angular.isArray(e)){var o=function(e){for(var t={},a=[],r=function(e){var a=v.defer(),r=function(n){t[e]=n,a.resolve([e,n])};return _(e,n,i).then(r,r),a.promise},o=0,s=e.length;s>o;o++)a.push(r(e[o]));return v.all(a).then(function(){return t})};return o(e)}var l=v.defer();e&&(e=O.apply(e));var c=function(){var e=t?V[t]:V[r];if(S=0,s&&!e){var n=x.get(b);if(e=V[n],a&&a.length){var i=T(a,n);S=0===i?1:0,T(a,t)<0&&a.push(t)}}return e}();return c?c.then(function(){X(e,n,i).then(l.resolve,l.reject)},l.reject):X(e,n,i).then(l.resolve,l.reject),l.promise},H=function(e){return f&&(e=[f,e].join(" ")),g&&(e=[e,g].join(" ")),e},R=function(e){r=e,l.$emit("$translateChangeSuccess",{language:e}),s&&x.put(_.storageKey(),r),L.setLocale(r),angular.forEach(N,function(e,t){N[t].setLocale(r)}),l.$emit("$translateChangeEnd",{language:e})},q=function(e){if(!e)throw"No language key specified for loading.";var t=v.defer();l.$emit("$translateLoadingStart",{language:e}),F=!0;var a=m;"string"==typeof a&&(a=n.get(a));var i=angular.extend({},p,{key:e,$http:angular.extend({},{cache:a},p.$http)});return n.get(d)(i).then(function(n){var a={};l.$emit("$translateLoadingSuccess",{language:e}),angular.isArray(n)?angular.forEach(n,function(e){angular.extend(a,A(e))}):angular.extend(a,A(n)),F=!1,t.resolve({key:e,table:a}),l.$emit("$translateLoadingEnd",{language:e})},function(e){l.$emit("$translateLoadingError",{language:e}),t.reject(e),l.$emit("$translateLoadingEnd",{language:e})}),t.promise};if(s&&(x=n.get(s),!x.get||!x.put))throw new Error("Couldn't use storage '"+s+"', missing get() or put() method!");angular.isFunction(L.useSanitizeValueStrategy)&&L.useSanitizeValueStrategy($),y.length&&angular.forEach(y,function(e){var a=n.get(e);a.setLocale(t||r),angular.isFunction(a.useSanitizeValueStrategy)&&a.useSanitizeValueStrategy($),N[a.getInterpolationIdentifier()]=a});var j=function(e){var t=v.defer();return Object.prototype.hasOwnProperty.call(h,e)?t.resolve(h[e]):V[e]?V[e].then(function(e){M(e.key,e.table),t.resolve(e.table)},t.reject):t.reject(),t.promise},B=function(e,t,n,a){var i=v.defer();return j(e).then(function(o){Object.prototype.hasOwnProperty.call(o,t)?(a.setLocale(e),i.resolve(a.interpolate(o[t],n)),a.setLocale(r)):i.reject()},i.reject),i.promise},z=function(e,t,n,a){var i,o=h[e];return o&&Object.prototype.hasOwnProperty.call(o,t)&&(a.setLocale(e),i=a.interpolate(o[t],n),a.setLocale(r)),i},Y=function(e){if(c){var t=n.get(c)(e,r);return void 0!==t?t:e}return e},W=function(e,t,n,i){var r=v.defer();if(e<a.length){var o=a[e];B(o,t,n,i).then(r.resolve,function(){W(e+1,t,n,i).then(r.resolve)})}else r.resolve(Y(t));return r.promise},G=function(e,t,n,i){var r;if(e<a.length){var o=a[e];r=z(o,t,n,i),r||(r=G(e+1,t,n,i))}return r},K=function(e,t,n){return W(D>0?D:S,e,t,n)},Z=function(e,t,n){return G(D>0?D:S,e,t,n)},X=function(e,t,n){var i=v.defer(),o=r?h[r]:h,s=n?N[n]:L;if(o&&Object.prototype.hasOwnProperty.call(o,e)){var l=o[e];"@:"===l.substr(0,2)?_(l.substr(2),t,n).then(i.resolve,i.reject):i.resolve(s.interpolate(l,t))}else{var u;c&&!F&&(u=Y(e)),r&&a&&a.length?K(e,t,s).then(function(e){i.resolve(e)},function(e){i.reject(H(e))}):c&&!F&&u?i.resolve(u):i.reject(H(e))}return i.promise},J=function(e,t,n){var i,o=r?h[r]:h,s=n?N[n]:L;if(o&&Object.prototype.hasOwnProperty.call(o,e)){var l=o[e];i="@:"===l.substr(0,2)?J(l.substr(2),t,n):s.interpolate(l,t)}else{var u;c&&!F&&(u=Y(e)),r&&a&&a.length?(S=0,i=Z(e,t,s)):i=c&&!F&&u?u:H(e)}return i};if(_.preferredLanguage=function(e){return e&&I(e),t},_.cloakClassName=function(){return w},_.fallbackLanguage=function(e){if(void 0!==e&&null!==e){if(P(e),d&&a&&a.length)for(var t=0,n=a.length;n>t;t++)V[a[t]]||(V[a[t]]=q(a[t]));_.use(_.use())}return i?a[0]:a},_.useFallbackLanguage=function(e){if(void 0!==e&&null!==e)if(e){var t=T(a,e);t>-1&&(D=t)}else D=0},_.proposedLanguage=function(){return o},_.storage=function(){return x},_.use=function(e){if(!e)return r;var t=v.defer();l.$emit("$translateChangeStart",{language:e});var n=E(e);return n&&(e=n),h[e]||!d||V[e]?(t.resolve(e),R(e)):(o=e,V[e]=q(e).then(function(n){return M(n.key,n.table),t.resolve(n.key),R(n.key),o===e&&(o=void 0),n},function(e){o===e&&(o=void 0),l.$emit("$translateChangeError",{language:e}),t.reject(e),l.$emit("$translateChangeEnd",{language:e})})),t.promise},_.storageKey=function(){return U()},_.isPostCompilingEnabled=function(){return k},_.refresh=function(e){function t(){i.resolve(),l.$emit("$translateRefreshEnd",{language:e})}function n(){i.reject(),l.$emit("$translateRefreshEnd",{language:e})}if(!d)throw new Error("Couldn't refresh translation table, no loader registered!");var i=v.defer();if(l.$emit("$translateRefreshStart",{language:e}),e)h[e]?q(e).then(function(n){M(n.key,n.table),e===r&&R(r),t()},n):n();else{var o=[],s={};if(a&&a.length)for(var c=0,u=a.length;u>c;c++)o.push(q(a[c])),s[a[c]]=!0;r&&!s[r]&&o.push(q(r)),v.all(o).then(function(e){angular.forEach(e,function(e){h[e.key]&&delete h[e.key],M(e.key,e.table)}),r&&R(r),t()})}return i.promise},_.instant=function(e,n,i){if(null===e||angular.isUndefined(e))return e;if(angular.isArray(e)){for(var o={},s=0,l=e.length;l>s;s++)o[e[s]]=_.instant(e[s],n,i);return o}if(angular.isString(e)&&e.length<1)return e;e&&(e=O.apply(e));var u,d=[];t&&d.push(t),r&&d.push(r),a&&a.length&&(d=d.concat(a));for(var p=0,f=d.length;f>p;p++){var g=d[p];if(h[g]&&"undefined"!=typeof h[g][e]&&(u=J(e,n,i)),"undefined"!=typeof u)break}return u||""===u||(u=L.interpolate(e,n),c&&!F&&(u=Y(e))),u},_.versionInfo=function(){return C},_.loaderCache=function(){return m},d&&(angular.equals(h,{})&&_.use(_.use()),a&&a.length))for(var Q=function(e){return M(e.key,e.table),l.$emit("$translateChangeEnd",{language:e.key}),e},et=0,tt=a.length;tt>et;et++)V[a[et]]=q(a[et]).then(Q);return _}]}]),angular.module("pascalprecht.translate").factory("$translateDefaultInterpolation",["$interpolate",function(e){var t,n={},a="default",i=null,r={escaped:function(e){var t={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=angular.element("<div></div>").text(e[n]).html());return t}},o=function(e){var t;return t=angular.isFunction(r[i])?r[i](e):e};return n.setLocale=function(e){t=e},n.getInterpolationIdentifier=function(){return a},n.useSanitizeValueStrategy=function(e){return i=e,this},n.interpolate=function(t,n){return i&&(n=o(n)),e(t)(n||{})},n}]),angular.module("pascalprecht.translate").constant("$STORAGE_KEY","NG_TRANSLATE_LANG_KEY"),angular.module("pascalprecht.translate").directive("translate",["$translate","$q","$interpolate","$compile","$parse","$rootScope",function(e,t,n,a,i,r){return{restrict:"AE",scope:!0,compile:function(t,o){var s=o.translateValues?o.translateValues:void 0,l=o.translateInterpolation?o.translateInterpolation:void 0,c=t[0].outerHTML.match(/translate-value-+/i),u="^(.*)("+n.startSymbol()+".*"+n.endSymbol()+")(.*)",d="^(.*)"+n.startSymbol()+"(.*)"+n.endSymbol()+"(.*)";return function(t,p,f){t.interpolateParams={},t.preText="",t.postText="";var g={},m=function(e){if(angular.equals(e,"")||!angular.isDefined(e)){var a=p.text().match(u);angular.isArray(a)?(t.preText=a[1],t.postText=a[3],g.translate=n(a[2])(t.$parent),watcherMatches=p.text().match(d),angular.isArray(watcherMatches)&&watcherMatches[2]&&watcherMatches[2].length&&t.$watch(watcherMatches[2],function(e){g.translate=e,$()})):g.translate=p.text().replace(/^\s+|\s+$/g,"")}else g.translate=e;$()},h=function(e){f.$observe(e,function(t){g[e]=t,$()})};f.$observe("translate",function(e){m(e)});for(var v in f)f.hasOwnProperty(v)&&"translateAttr"===v.substr(0,13)&&h(v);if(f.$observe("translateDefault",function(e){t.defaultText=e}),s&&f.$observe("translateValues",function(e){e&&t.$parent.$watch(function(){angular.extend(t.interpolateParams,i(e)(t.$parent))})}),c){var b=function(e){f.$observe(e,function(n){var a=angular.lowercase(e.substr(14,1))+e.substr(15);t.interpolateParams[a]=n})};for(var y in f)Object.prototype.hasOwnProperty.call(f,y)&&"translateValue"===y.substr(0,14)&&"translateValues"!==y&&b(y)}var $=function(){for(var e in g)g.hasOwnProperty(e)&&g[e]&&w(e,g[e],t,t.interpolateParams)},w=function(t,n,a,i){e(n,i,l).then(function(e){k(e,a,!0,t)},function(e){k(e,a,!1,t)})},k=function(t,n,i,r){if("translate"===r){i||"undefined"==typeof n.defaultText||(t=n.defaultText),p.html(n.preText+t+n.postText);var s=e.isPostCompilingEnabled(),l="undefined"!=typeof o.translateCompile,c=l&&"false"!==o.translateCompile;(s&&!l||c)&&a(p.contents())(n)}else{i||"undefined"==typeof n.defaultText||(t=n.defaultText);var u=f.$attr[r].substr(15);p.attr(u,t)}};t.$watch("interpolateParams",$,!0);var x=r.$on("$translateChangeSuccess",$);p.text().length&&m(""),$(),t.$on("$destroy",x)}}}}]),angular.module("pascalprecht.translate").directive("translateCloak",["$rootScope","$translate",function(e,t){return{compile:function(n){var a=function(){n.addClass(t.cloakClassName())},i=function(){n.removeClass(t.cloakClassName())},r=e.$on("$translateChangeEnd",function(){i(),r(),r=null});return a(),function(e,n,r){r.translateCloak&&r.translateCloak.length&&r.$observe("translateCloak",function(e){t(e).then(i,a)})}}}}]),angular.module("pascalprecht.translate").filter("translate",["$parse","$translate",function(e,t){var n=function(n,a,i){return angular.isObject(a)||(a=e(a)(this)),t.instant(n,a,i)};return n.$stateful=!0,n}]),function(e,t){"use strict";function n(){this.$get=["$$sanitizeUri",function(e){return function(t){var n=[];return r(t,l(n,function(t,n){return!/^unsafe/.test(e(t,n))})),n.join("")}}]}function a(e){var n=[],a=l(n,t.noop);return a.chars(e),n.join("")}function i(e){var t,n={},a=e.split(",");for(t=0;t<a.length;t++)n[a[t]]=!0;return n}function r(e,n){function a(e,a,r,s){if(a=t.lowercase(a),C[a])for(;y.last()&&S[y.last()];)i("",y.last());x[a]&&y.last()==a&&i("",a),s=$[a]||!!s,s||y.push(a);var l={};r.replace(p,function(e,t,n,a,i){var r=n||a||i||"";l[t]=o(r)}),n.start&&n.start(a,l,s)}function i(e,a){var i,r=0;if(a=t.lowercase(a))for(r=y.length-1;r>=0&&y[r]!=a;r--);if(r>=0){for(i=y.length-1;i>=r;i--)n.end&&n.end(y[i]);y.length=r}}"string"!=typeof e&&(e=null===e||"undefined"==typeof e?"":""+e);var r,s,l,b,y=[],w=e;for(y.last=function(){return y[y.length-1]};e;){if(b="",s=!0,y.last()&&T[y.last()]?(e=e.replace(new RegExp("([\\W\\w]*)<\\s*\\/\\s*"+y.last()+"[^>]*>","i"),function(e,t){return t=t.replace(m,"$1").replace(v,"$1"),n.chars&&n.chars(o(t)),""}),i("",y.last())):(0===e.indexOf("<!--")?(r=e.indexOf("--",4),r>=0&&e.lastIndexOf("-->",r)===r&&(n.comment&&n.comment(e.substring(4,r)),e=e.substring(r+3),s=!1)):h.test(e)?(l=e.match(h),l&&(e=e.replace(l[0],""),s=!1)):g.test(e)?(l=e.match(d),l&&(e=e.substring(l[0].length),l[0].replace(d,i),s=!1)):f.test(e)&&(l=e.match(u),l?(l[4]&&(e=e.substring(l[0].length),l[0].replace(u,a)),s=!1):(b+="<",e=e.substring(1))),s&&(r=e.indexOf("<"),b+=0>r?e:e.substring(0,r),e=0>r?"":e.substring(r),n.chars&&n.chars(o(b)))),e==w)throw c("badparse","The sanitizer was unable to parse the following block of html: {0}",e);w=e}i()}function o(e){return e?(P.innerHTML=e.replace(/</g,"&lt;"),P.textContent):""}function s(e){return e.replace(/&/g,"&amp;").replace(b,function(e){var t=e.charCodeAt(0),n=e.charCodeAt(1);return"&#"+(1024*(t-55296)+(n-56320)+65536)+";"}).replace(y,function(e){return"&#"+e.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function l(e,n){var a=!1,i=t.bind(e,e.push);return{start:function(e,r,o){e=t.lowercase(e),!a&&T[e]&&(a=e),a||O[e]!==!0||(i("<"),i(e),t.forEach(r,function(a,r){var o=t.lowercase(r),l="img"===e&&"src"===o||"background"===o;I[o]!==!0||E[o]===!0&&!n(a,l)||(i(" "),i(r),i('="'),i(s(a)),i('"'))}),i(o?"/>":">"))},end:function(e){e=t.lowercase(e),a||O[e]!==!0||(i("</"),i(e),i(">")),e==a&&(a=!1)},chars:function(e){a||i(s(e))}}}var c=t.$$minErr("$sanitize"),u=/^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/,d=/^<\/\s*([\w:-]+)[^>]*>/,p=/([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,f=/^</,g=/^<\//,m=/<!--(.*?)-->/g,h=/<!DOCTYPE([^>]*?)>/i,v=/<!\[CDATA\[(.*?)]]>/g,b=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,y=/([^\#-~| |!])/g,$=i("area,br,col,hr,img,wbr"),w=i("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),k=i("rp,rt"),x=t.extend({},k,w),C=t.extend({},w,i("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul")),S=t.extend({},k,i("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),D=i("animate,animateColor,animateMotion,animateTransform,circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,set,stop,svg,switch,text,title,tspan,use"),T=i("script,style"),O=t.extend({},$,C,S,x,D),E=i("background,cite,href,longdesc,src,usemap,xlink:href"),M=i("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,target,title,type,valign,value,vspace,width"),A=i("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,attributeName,attributeType,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan"),I=t.extend({},E,A,M),P=document.createElement("pre");t.module("ngSanitize",[]).provider("$sanitize",n),t.module("ngSanitize").filter("linky",["$sanitize",function(e){var n=/((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"”’]/i,i=/^mailto:/i;return function(r,o){function s(e){e&&f.push(a(e))}function l(e,n){f.push("<a "),t.isDefined(o)&&f.push('target="',o,'" '),f.push('href="',e.replace(/"/g,"&quot;"),'">'),s(n),f.push("</a>")}if(!r)return r;for(var c,u,d,p=r,f=[];c=p.match(n);)u=c[0],c[2]||c[4]||(u=(c[3]?"http://":"mailto:")+u),d=c.index,s(p.substr(0,d)),l(u,c[0].replace(i,"")),p=p.substring(d+c[0].length);return s(p),e(f.join(""))}}])}(window,window.angular),angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(e,t){return function(n){if(!n||!angular.isString(n.prefix)||!angular.isString(n.suffix))throw new Error("Couldn't load static files, no prefix or suffix specified!");var a=e.defer();return t(angular.extend({url:[n.prefix,n.key,n.suffix].join(""),method:"GET",params:""},n.$http)).success(function(e){a.resolve(e)}).error(function(){a.reject(n.key)}),a.promise}}]),angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(e,t){function n(e,a){t(angular.extend({url:[e.prefix,e.key.toLowerCase(),e.suffix].join(""),method:"GET",params:""},e.$http)).success(function(e){a.resolve(e)}).error(function(){if(e.key.indexOf("_")>=0){var t=e.key.substr(0,e.key.lastIndexOf("_")),i=angular.extend({},e,{key:t});n(i,a)}else a.resolve("{}")})}return function(t){if(!t||!angular.isString(t.prefix)||!angular.isString(t.suffix))throw new Error('Couldn"t load static files, no prefix or suffix specified!');var a=e.defer();return n(t,a),a.promise}}]),angular.module("risevision.common.i18n",["pascalprecht.translate","risevision.common.i18n.config"]).config(["$translateProvider","LOCALES_PREFIX","LOCALES_SUFIX",function(e,t,n){e.useStaticFilesLoader({prefix:t,suffix:n}),e.determinePreferredLanguage().fallbackLanguage("en")}]),angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.transition","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-popup.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/tooltip/tooltip-template-popup.html","template/popover/popover-html.html","template/popover/popover-template.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.collapse",[]).directive("collapse",["$animate",function(e){return{link:function(t,n,a){function i(){n.removeClass("collapse").addClass("collapsing").attr("aria-expanded",!0).attr("aria-hidden",!1),e.addClass(n,"in",{to:{height:n[0].scrollHeight+"px"}}).then(r)}function r(){n.removeClass("collapsing"),n.css({height:"auto"})}function o(){return n.hasClass("collapse")||n.hasClass("in")?(n.css({height:n[0].scrollHeight+"px"}).removeClass("collapse").addClass("collapsing").attr("aria-expanded",!1).attr("aria-hidden",!0),e.removeClass(n,"in",{to:{height:"0"}}).then(s),void 0):s()}function s(){n.css({height:"0"}),n.removeClass("collapsing"),n.addClass("collapse")}t.$watch(a.collapse,function(e){e?o():i()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("accordionConfig",{closeOthers:!0}).controller("AccordionController",["$scope","$attrs","accordionConfig",function(e,t,n){this.groups=[],this.closeOthers=function(a){var i=angular.isDefined(t.closeOthers)?e.$eval(t.closeOthers):n.closeOthers;i&&angular.forEach(this.groups,function(e){e!==a&&(e.isOpen=!1)})},this.addGroup=function(e){var t=this;this.groups.push(e),e.$on("$destroy",function(){t.removeGroup(e)})},this.removeGroup=function(e){var t=this.groups.indexOf(e);-1!==t&&this.groups.splice(t,1)}}]).directive("accordion",function(){return{restrict:"EA",controller:"AccordionController",controllerAs:"accordion",transclude:!0,replace:!1,templateUrl:function(e,t){return t.templateUrl||"template/accordion/accordion.html"}}}).directive("accordionGroup",function(){return{require:"^accordion",restrict:"EA",transclude:!0,replace:!0,templateUrl:function(e,t){return t.templateUrl||"template/accordion/accordion-group.html"},scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(e){this.heading=e}},link:function(e,t,n,a){a.addGroup(e),e.openClass=n.openClass||"panel-open",e.panelClass=n.panelClass,e.$watch("isOpen",function(n){t.toggleClass(e.openClass,n),n&&a.closeOthers(e)}),e.toggleOpen=function(t){e.isDisabled||t&&32!==t.which||(e.isOpen=!e.isOpen)}}}}).directive("accordionHeading",function(){return{restrict:"EA",transclude:!0,template:"",replace:!0,require:"^accordionGroup",link:function(e,t,n,a,i){a.setHeading(i(e,angular.noop))}}}).directive("accordionTransclude",function(){return{require:"^accordionGroup",link:function(e,t,n,a){e.$watch(function(){return a[n.accordionTransclude]},function(e){e&&(t.find("span").html(""),t.find("span").append(e))})}}}),angular.module("ui.bootstrap.alert",[]).controller("AlertController",["$scope","$attrs",function(e,t){e.closeable=!!t.close,this.close=e.close}]).directive("alert",function(){return{controller:"AlertController",controllerAs:"alert",templateUrl:function(e,t){return t.templateUrl||"template/alert/alert.html"},transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}).directive("dismissOnTimeout",["$timeout",function(e){return{require:"alert",link:function(t,n,a,i){e(function(){i.close()},parseInt(a.dismissOnTimeout,10))}}}]),angular.module("ui.bootstrap.bindHtml",[]).value("$bindHtmlUnsafeSuppressDeprecated",!1).directive("bindHtmlUnsafe",["$log","$bindHtmlUnsafeSuppressDeprecated",function(e,t){return function(n,a,i){t||e.warn("bindHtmlUnsafe is now deprecated. Use ngBindHtml instead"),a.addClass("ng-binding").data("$binding",i.bindHtmlUnsafe),n.$watch(i.bindHtmlUnsafe,function(e){a.html(e||"")})}}]),angular.module("ui.bootstrap.buttons",[]).constant("buttonConfig",{activeClass:"active",toggleEvent:"click"}).controller("ButtonsController",["buttonConfig",function(e){this.activeClass=e.activeClass||"active",this.toggleEvent=e.toggleEvent||"click"}]).directive("btnRadio",function(){return{require:["btnRadio","ngModel"],controller:"ButtonsController",controllerAs:"buttons",link:function(e,t,n,a){var i=a[0],r=a[1];t.find("input").css({display:"none"}),r.$render=function(){t.toggleClass(i.activeClass,angular.equals(r.$modelValue,e.$eval(n.btnRadio)))},t.bind(i.toggleEvent,function(){if(!n.disabled){var a=t.hasClass(i.activeClass);(!a||angular.isDefined(n.uncheckable))&&e.$apply(function(){r.$setViewValue(a?null:e.$eval(n.btnRadio)),r.$render()})}})}}}).directive("btnCheckbox",["$document",function(e){return{require:["btnCheckbox","ngModel"],controller:"ButtonsController",controllerAs:"button",link:function(t,n,a,i){function r(){return s(a.btnCheckboxTrue,!0)}function o(){return s(a.btnCheckboxFalse,!1)}function s(e,n){var a=t.$eval(e);return angular.isDefined(a)?a:n}var l=i[0],c=i[1];n.find("input").css({display:"none"}),c.$render=function(){n.toggleClass(l.activeClass,angular.equals(c.$modelValue,r()))},n.bind(l.toggleEvent,function(){a.disabled||t.$apply(function(){c.$setViewValue(n.hasClass(l.activeClass)?o():r()),c.$render()})}),n.on("keypress",function(i){a.disabled||32!==i.which||e[0].activeElement!==n[0]||t.$apply(function(){c.$setViewValue(n.hasClass(l.activeClass)?o():r()),c.$render()})})}}}]),angular.module("ui.bootstrap.carousel",[]).controller("CarouselController",["$scope","$element","$interval","$animate",function(e,t,n,a){function i(t,n,i){v||(angular.extend(t,{direction:i,active:!0}),angular.extend(d.currentSlide||{},{direction:i,active:!1}),a.enabled()&&!e.noTransition&&!e.$currentTransition&&t.$element&&d.slides.length>1&&(t.$element.data(m,t.direction),d.currentSlide&&d.currentSlide.$element&&d.currentSlide.$element.data(m,t.direction),e.$currentTransition=!0,f?a.on("addClass",t.$element,function(t,n){"close"===n&&(e.$currentTransition=null,a.off("addClass",t))}):t.$element.one("$animate:close",function(){e.$currentTransition=null})),d.currentSlide=t,h=n,o())}function r(e){if(angular.isUndefined(p[e].index))return p[e];{var t;p.length}for(t=0;t<p.length;++t)if(p[t].index==e)return p[t]}function o(){s();var t=+e.interval;!isNaN(t)&&t>0&&(c=n(l,t))}function s(){c&&(n.cancel(c),c=null)}function l(){var t=+e.interval;u&&!isNaN(t)&&t>0&&p.length?e.next():e.pause()}var c,u,d=this,p=d.slides=e.slides=[],f=angular.version.minor>=4,g="uib-noTransition",m="uib-slideDirection",h=-1;d.currentSlide=null;var v=!1;d.select=e.select=function(t,n){var a=e.indexOfSlide(t);void 0===n&&(n=a>d.getCurrentIndex()?"next":"prev"),t&&t!==d.currentSlide&&!e.$currentTransition&&i(t,a,n)},e.$on("$destroy",function(){v=!0}),d.getCurrentIndex=function(){return d.currentSlide&&angular.isDefined(d.currentSlide.index)?+d.currentSlide.index:h},e.indexOfSlide=function(e){return angular.isDefined(e.index)?+e.index:p.indexOf(e)},e.next=function(){var t=(d.getCurrentIndex()+1)%p.length;return 0===t&&e.noWrap()?(e.pause(),void 0):d.select(r(t),"next")},e.prev=function(){var t=d.getCurrentIndex()-1<0?p.length-1:d.getCurrentIndex()-1;return e.noWrap()&&t===p.length-1?(e.pause(),void 0):d.select(r(t),"prev")},e.isActive=function(e){return d.currentSlide===e},e.$watch("interval",o),e.$on("$destroy",s),e.play=function(){u||(u=!0,o())},e.pause=function(){e.noPause||(u=!1,s())},d.addSlide=function(t,n){t.$element=n,p.push(t),1===p.length||t.active?(d.select(p[p.length-1]),1==p.length&&e.play()):t.active=!1},d.removeSlide=function(e){angular.isDefined(e.index)&&p.sort(function(e,t){return+e.index>+t.index});var t=p.indexOf(e);p.splice(t,1),p.length>0&&e.active?t>=p.length?d.select(p[t-1]):d.select(p[t]):h>t&&h--,0===p.length&&(d.currentSlide=null)},e.$watch("noTransition",function(e){t.data(g,e)})}]).directive("carousel",[function(){return{restrict:"EA",transclude:!0,replace:!0,controller:"CarouselController",controllerAs:"carousel",require:"carousel",templateUrl:function(e,t){return t.templateUrl||"template/carousel/carousel.html"},scope:{interval:"=",noTransition:"=",noPause:"=",noWrap:"&"}}}]).directive("slide",function(){return{require:"^carousel",restrict:"EA",transclude:!0,replace:!0,templateUrl:function(e,t){return t.templateUrl||"template/carousel/slide.html"},scope:{active:"=?",actual:"=?",index:"=?"},link:function(e,t,n,a){a.addSlide(e,t),e.$on("$destroy",function(){a.removeSlide(e)}),e.$watch("active",function(t){t&&a.select(e)})}}}).animation(".item",["$injector","$animate",function(e,t){function n(e,t,n){e.removeClass(t),n&&n()}var a="uib-noTransition",i="uib-slideDirection",r=null;return e.has("$animateCss")&&(r=e.get("$animateCss")),{beforeAddClass:function(e,o,s){if("active"==o&&e.parent()&&!e.parent().data(a)){var l=!1,c=e.data(i),u="next"==c?"left":"right",d=n.bind(this,e,u+" "+c,s);return e.addClass(c),r?r(e,{addClass:u}).start().done(d):t.addClass(e,u).then(function(){l||d(),s()}),function(){l=!0}}s()},beforeRemoveClass:function(e,o,s){if("active"===o&&e.parent()&&!e.parent().data(a)){var l=!1,c=e.data(i),u="next"==c?"left":"right",d=n.bind(this,e,u,s);return r?r(e,{addClass:u}).start().done(d):t.addClass(e,u).then(function(){l||d(),s()}),function(){l=!0}}s()}}}]),angular.module("ui.bootstrap.dateparser",[]).service("dateParser",["$log","$locale","orderByFilter",function(e,t,n){function a(e){var t=[],a=e.split("");return angular.forEach(o,function(n,i){var r=e.indexOf(i);if(r>-1){e=e.split(""),a[r]="("+n.regex+")",e[r]="$";for(var o=r+1,s=r+i.length;s>o;o++)a[o]="",e[o]="$";e=e.join(""),t.push({index:r,apply:n.apply})}}),{regex:new RegExp("^"+a.join("")+"$"),map:n(t,"index")}}function i(e,t,n){return 1>n?!1:1===t&&n>28?29===n&&(e%4===0&&e%100!==0||e%400===0):3===t||5===t||8===t||10===t?31>n:!0}var r=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;this.parsers={};
var o={yyyy:{regex:"\\d{4}",apply:function(e){this.year=+e}},yy:{regex:"\\d{2}",apply:function(e){this.year=+e+2e3}},y:{regex:"\\d{1,4}",apply:function(e){this.year=+e}},MMMM:{regex:t.DATETIME_FORMATS.MONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.MONTH.indexOf(e)}},MMM:{regex:t.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.SHORTMONTH.indexOf(e)}},MM:{regex:"0[1-9]|1[0-2]",apply:function(e){this.month=e-1}},M:{regex:"[1-9]|1[0-2]",apply:function(e){this.month=e-1}},dd:{regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e}},d:{regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e}},EEEE:{regex:t.DATETIME_FORMATS.DAY.join("|")},EEE:{regex:t.DATETIME_FORMATS.SHORTDAY.join("|")},HH:{regex:"(?:0|1)[0-9]|2[0-3]",apply:function(e){this.hours=+e}},hh:{regex:"0[0-9]|1[0-2]",apply:function(e){this.hours=+e}},H:{regex:"1?[0-9]|2[0-3]",apply:function(e){this.hours=+e}},h:{regex:"[0-9]|1[0-2]",apply:function(e){this.hours=+e}},mm:{regex:"[0-5][0-9]",apply:function(e){this.minutes=+e}},m:{regex:"[0-9]|[1-5][0-9]",apply:function(e){this.minutes=+e}},sss:{regex:"[0-9][0-9][0-9]",apply:function(e){this.milliseconds=+e}},ss:{regex:"[0-5][0-9]",apply:function(e){this.seconds=+e}},s:{regex:"[0-9]|[1-5][0-9]",apply:function(e){this.seconds=+e}},a:{regex:t.DATETIME_FORMATS.AMPMS.join("|"),apply:function(e){12===this.hours&&(this.hours=0),"PM"===e&&(this.hours+=12)}}};this.parse=function(n,o,s){if(!angular.isString(n)||!o)return n;o=t.DATETIME_FORMATS[o]||o,o=o.replace(r,"\\$&"),this.parsers[o]||(this.parsers[o]=a(o));var l=this.parsers[o],c=l.regex,u=l.map,d=n.match(c);if(d&&d.length){var p,f;angular.isDate(s)&&!isNaN(s.getTime())?p={year:s.getFullYear(),month:s.getMonth(),date:s.getDate(),hours:s.getHours(),minutes:s.getMinutes(),seconds:s.getSeconds(),milliseconds:s.getMilliseconds()}:(s&&e.warn("dateparser:","baseDate is not a valid date"),p={year:1900,month:0,date:1,hours:0,minutes:0,seconds:0,milliseconds:0});for(var g=1,m=d.length;m>g;g++){var h=u[g-1];h.apply&&h.apply.call(p,d[g])}return i(p.year,p.month,p.date)&&(f=new Date(p.year,p.month,p.date,p.hours,p.minutes,p.seconds,p.milliseconds||0)),f}}}]),angular.module("ui.bootstrap.position",[]).factory("$position",["$document","$window",function(e,t){function n(e,n){return e.currentStyle?e.currentStyle[n]:t.getComputedStyle?t.getComputedStyle(e)[n]:e.style[n]}function a(e){return"static"===(n(e,"position")||"static")}var i=function(t){for(var n=e[0],i=t.offsetParent||n;i&&i!==n&&a(i);)i=i.offsetParent;return i||n};return{position:function(t){var n=this.offset(t),a={top:0,left:0},r=i(t[0]);r!=e[0]&&(a=this.offset(angular.element(r)),a.top+=r.clientTop-r.scrollTop,a.left+=r.clientLeft-r.scrollLeft);var o=t[0].getBoundingClientRect();return{width:o.width||t.prop("offsetWidth"),height:o.height||t.prop("offsetHeight"),top:n.top-a.top,left:n.left-a.left}},offset:function(n){var a=n[0].getBoundingClientRect();return{width:a.width||n.prop("offsetWidth"),height:a.height||n.prop("offsetHeight"),top:a.top+(t.pageYOffset||e[0].documentElement.scrollTop),left:a.left+(t.pageXOffset||e[0].documentElement.scrollLeft)}},positionElements:function(e,t,n,a){var i,r,o,s,l=n.split("-"),c=l[0],u=l[1]||"center";i=a?this.offset(e):this.position(e),r=t.prop("offsetWidth"),o=t.prop("offsetHeight");var d={center:function(){return i.left+i.width/2-r/2},left:function(){return i.left},right:function(){return i.left+i.width}},p={center:function(){return i.top+i.height/2-o/2},top:function(){return i.top},bottom:function(){return i.top+i.height}};switch(c){case"right":s={top:p[u](),left:d[c]()};break;case"left":s={top:p[u](),left:i.left-r};break;case"bottom":s={top:p[c](),left:d[u]()};break;default:s={top:i.top-o,left:d[u]()}}return s}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.position"]).value("$datepickerSuppressError",!1).constant("datepickerConfig",{formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",datepickerMode:"day",minMode:"day",maxMode:"year",showWeeks:!0,startingDay:0,yearRange:20,minDate:null,maxDate:null,shortcutPropagation:!1}).controller("DatepickerController",["$scope","$attrs","$parse","$interpolate","$log","dateFilter","datepickerConfig","$datepickerSuppressError",function(e,t,n,a,i,r,o,s){var l=this,c={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","showWeeks","startingDay","yearRange","shortcutPropagation"],function(n,i){l[n]=angular.isDefined(t[n])?6>i?a(t[n])(e.$parent):e.$parent.$eval(t[n]):o[n]}),angular.forEach(["minDate","maxDate"],function(a){t[a]?e.$parent.$watch(n(t[a]),function(e){l[a]=e?new Date(e):null,l.refreshView()}):l[a]=o[a]?new Date(o[a]):null}),angular.forEach(["minMode","maxMode"],function(a){t[a]?e.$parent.$watch(n(t[a]),function(n){l[a]=angular.isDefined(n)?n:t[a],e[a]=l[a],("minMode"==a&&l.modes.indexOf(e.datepickerMode)<l.modes.indexOf(l[a])||"maxMode"==a&&l.modes.indexOf(e.datepickerMode)>l.modes.indexOf(l[a]))&&(e.datepickerMode=l[a])}):(l[a]=o[a]||null,e[a]=l[a])}),e.datepickerMode=e.datepickerMode||o.datepickerMode,e.uniqueId="datepicker-"+e.$id+"-"+Math.floor(1e4*Math.random()),angular.isDefined(t.initDate)?(this.activeDate=e.$parent.$eval(t.initDate)||new Date,e.$parent.$watch(t.initDate,function(e){e&&(c.$isEmpty(c.$modelValue)||c.$invalid)&&(l.activeDate=e,l.refreshView())})):this.activeDate=new Date,e.isActive=function(t){return 0===l.compare(t.date,l.activeDate)?(e.activeDateId=t.uid,!0):!1},this.init=function(e){c=e,c.$render=function(){l.render()}},this.render=function(){if(c.$viewValue){var e=new Date(c.$viewValue),t=!isNaN(e);t?this.activeDate=e:s||i.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var e=c.$viewValue?new Date(c.$viewValue):null;c.$setValidity("dateDisabled",!e||this.element&&!this.isDisabled(e))}},this.createDateObject=function(e,t){var n=c.$viewValue?new Date(c.$viewValue):null;return{date:e,label:r(e,t),selected:n&&0===this.compare(e,n),disabled:this.isDisabled(e),current:0===this.compare(e,new Date),customClass:this.customClass(e)}},this.isDisabled=function(n){return this.minDate&&this.compare(n,this.minDate)<0||this.maxDate&&this.compare(n,this.maxDate)>0||t.dateDisabled&&e.dateDisabled({date:n,mode:e.datepickerMode})},this.customClass=function(t){return e.customClass({date:t,mode:e.datepickerMode})},this.split=function(e,t){for(var n=[];e.length>0;)n.push(e.splice(0,t));return n},this.fixTimeZone=function(e){var t=e.getHours();e.setHours(23===t?t+2:0)},e.select=function(t){if(e.datepickerMode===l.minMode){var n=c.$viewValue?new Date(c.$viewValue):new Date(0,0,0,0,0,0,0);n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),c.$setViewValue(n),c.$render()}else l.activeDate=t,e.datepickerMode=l.modes[l.modes.indexOf(e.datepickerMode)-1]},e.move=function(e){var t=l.activeDate.getFullYear()+e*(l.step.years||0),n=l.activeDate.getMonth()+e*(l.step.months||0);l.activeDate.setFullYear(t,n,1),l.refreshView()},e.toggleMode=function(t){t=t||1,e.datepickerMode===l.maxMode&&1===t||e.datepickerMode===l.minMode&&-1===t||(e.datepickerMode=l.modes[l.modes.indexOf(e.datepickerMode)+t])},e.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var u=function(){l.element[0].focus()};e.$on("datepicker.focus",u),e.keydown=function(t){var n=e.keys[t.which];if(n&&!t.shiftKey&&!t.altKey)if(t.preventDefault(),l.shortcutPropagation||t.stopPropagation(),"enter"===n||"space"===n){if(l.isDisabled(l.activeDate))return;e.select(l.activeDate),u()}else!t.ctrlKey||"up"!==n&&"down"!==n?(l.handleKeyDown(n,t),l.refreshView()):(e.toggleMode("up"===n?1:-1),u())}}]).directive("datepicker",function(){return{restrict:"EA",replace:!0,templateUrl:function(e,t){return t.templateUrl||"template/datepicker/datepicker.html"},scope:{datepickerMode:"=?",dateDisabled:"&",customClass:"&",shortcutPropagation:"&?"},require:["datepicker","^ngModel"],controller:"DatepickerController",controllerAs:"datepicker",link:function(e,t,n,a){var i=a[0],r=a[1];i.init(r)}}}).directive("daypicker",["dateFilter",function(e){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/day.html",require:"^datepicker",link:function(t,n,a,i){function r(e,t){return 1!==t||e%4!==0||e%100===0&&e%400!==0?l[t]:29}function o(e,t){for(var n,a=new Array(t),r=new Date(e),o=0;t>o;)n=new Date(r),i.fixTimeZone(n),a[o++]=n,r.setDate(r.getDate()+1);return a}function s(e){var t=new Date(e);t.setDate(t.getDate()+4-(t.getDay()||7));var n=t.getTime();return t.setMonth(0),t.setDate(1),Math.floor(Math.round((n-t)/864e5)/7)+1}t.showWeeks=i.showWeeks,i.step={months:1},i.element=n;var l=[31,28,31,30,31,30,31,31,30,31,30,31];i._refreshView=function(){var n=i.activeDate.getFullYear(),a=i.activeDate.getMonth(),r=new Date(n,a,1),l=i.startingDay-r.getDay(),c=l>0?7-l:-l,u=new Date(r);c>0&&u.setDate(-c+1);for(var d=o(u,42),p=0;42>p;p++)d[p]=angular.extend(i.createDateObject(d[p],i.formatDay),{secondary:d[p].getMonth()!==a,uid:t.uniqueId+"-"+p});t.labels=new Array(7);for(var f=0;7>f;f++)t.labels[f]={abbr:e(d[f].date,i.formatDayHeader),full:e(d[f].date,"EEEE")};if(t.title=e(i.activeDate,i.formatDayTitle),t.rows=i.split(d,7),t.showWeeks){t.weekNumbers=[];for(var g=(11-i.startingDay)%7,m=t.rows.length,h=0;m>h;h++)t.weekNumbers.push(s(t.rows[h][g].date))}},i.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate())-new Date(t.getFullYear(),t.getMonth(),t.getDate())},i.handleKeyDown=function(e){var t=i.activeDate.getDate();if("left"===e)t-=1;else if("up"===e)t-=7;else if("right"===e)t+=1;else if("down"===e)t+=7;else if("pageup"===e||"pagedown"===e){var n=i.activeDate.getMonth()+("pageup"===e?-1:1);i.activeDate.setMonth(n,1),t=Math.min(r(i.activeDate.getFullYear(),i.activeDate.getMonth()),t)}else"home"===e?t=1:"end"===e&&(t=r(i.activeDate.getFullYear(),i.activeDate.getMonth()));i.activeDate.setDate(t)},i.refreshView()}}}]).directive("monthpicker",["dateFilter",function(e){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/month.html",require:"^datepicker",link:function(t,n,a,i){i.step={years:1},i.element=n,i._refreshView=function(){for(var n,a=new Array(12),r=i.activeDate.getFullYear(),o=0;12>o;o++)n=new Date(r,o,1),i.fixTimeZone(n),a[o]=angular.extend(i.createDateObject(n,i.formatMonth),{uid:t.uniqueId+"-"+o});t.title=e(i.activeDate,i.formatMonthTitle),t.rows=i.split(a,3)},i.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth())-new Date(t.getFullYear(),t.getMonth())},i.handleKeyDown=function(e){var t=i.activeDate.getMonth();if("left"===e)t-=1;else if("up"===e)t-=3;else if("right"===e)t+=1;else if("down"===e)t+=3;else if("pageup"===e||"pagedown"===e){var n=i.activeDate.getFullYear()+("pageup"===e?-1:1);i.activeDate.setFullYear(n)}else"home"===e?t=0:"end"===e&&(t=11);i.activeDate.setMonth(t)},i.refreshView()}}}]).directive("yearpicker",["dateFilter",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/year.html",require:"^datepicker",link:function(e,t,n,a){function i(e){return parseInt((e-1)/r,10)*r+1}var r=a.yearRange;a.step={years:r},a.element=t,a._refreshView=function(){for(var t,n=new Array(r),o=0,s=i(a.activeDate.getFullYear());r>o;o++)t=new Date(s+o,0,1),a.fixTimeZone(t),n[o]=angular.extend(a.createDateObject(t,a.formatYear),{uid:e.uniqueId+"-"+o});e.title=[n[0].label,n[r-1].label].join(" - "),e.rows=a.split(n,5)},a.compare=function(e,t){return e.getFullYear()-t.getFullYear()},a.handleKeyDown=function(e){var t=a.activeDate.getFullYear();"left"===e?t-=1:"up"===e?t-=5:"right"===e?t+=1:"down"===e?t+=5:"pageup"===e||"pagedown"===e?t+=("pageup"===e?-1:1)*a.step.years:"home"===e?t=i(a.activeDate.getFullYear()):"end"===e&&(t=i(a.activeDate.getFullYear())+r-1),a.activeDate.setFullYear(t)},a.refreshView()}}}]).constant("datepickerPopupConfig",{datepickerPopup:"yyyy-MM-dd",datepickerPopupTemplateUrl:"template/datepicker/popup.html",datepickerTemplateUrl:"template/datepicker/datepicker.html",html5Types:{date:"yyyy-MM-dd","datetime-local":"yyyy-MM-ddTHH:mm:ss.sss",month:"yyyy-MM"},currentText:"Today",clearText:"Clear",closeText:"Done",closeOnDateSelection:!0,appendToBody:!1,showButtonBar:!0,onOpenFocus:!0}).directive("datepickerPopup",["$compile","$parse","$document","$rootScope","$position","dateFilter","dateParser","datepickerPopupConfig","$timeout",function(e,t,n,a,i,r,o,s,l){return{restrict:"EA",require:"ngModel",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&",customClass:"&"},link:function(c,u,d,p){function f(e){return e.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()})}function g(e){if(angular.isNumber(e)&&(e=new Date(e)),e){if(angular.isDate(e)&&!isNaN(e))return e;if(angular.isString(e)){var t=o.parse(e,h,c.date);return isNaN(t)?void 0:t}return void 0}return null}function m(e,t){var n=e||t;if(!d.ngRequired&&!n)return!0;if(angular.isNumber(n)&&(n=new Date(n)),n){if(angular.isDate(n)&&!isNaN(n))return!0;if(angular.isString(n)){var a=o.parse(n,h);return!isNaN(a)}return!1}return!0}var h,v=angular.isDefined(d.closeOnDateSelection)?c.$parent.$eval(d.closeOnDateSelection):s.closeOnDateSelection,b=angular.isDefined(d.datepickerAppendToBody)?c.$parent.$eval(d.datepickerAppendToBody):s.appendToBody,y=angular.isDefined(d.onOpenFocus)?c.$parent.$eval(d.onOpenFocus):s.onOpenFocus,$=angular.isDefined(d.datepickerPopupTemplateUrl)?d.datepickerPopupTemplateUrl:s.datepickerPopupTemplateUrl,w=angular.isDefined(d.datepickerTemplateUrl)?d.datepickerTemplateUrl:s.datepickerTemplateUrl,k={};c.showButtonBar=angular.isDefined(d.showButtonBar)?c.$parent.$eval(d.showButtonBar):s.showButtonBar,c.getText=function(e){return c[e+"Text"]||s[e+"Text"]},c.isDisabled=function(e){return"today"===e&&(e=new Date),c.watchData.minDate&&c.compare(e,k.minDate)<0||c.watchData.maxDate&&c.compare(e,k.maxDate)>0},c.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate())-new Date(t.getFullYear(),t.getMonth(),t.getDate())};var x=!1;if(s.html5Types[d.type]?(h=s.html5Types[d.type],x=!0):(h=d.datepickerPopup||s.datepickerPopup,d.$observe("datepickerPopup",function(e){var t=e||s.datepickerPopup;if(t!==h&&(h=t,p.$modelValue=null,!h))throw new Error("datepickerPopup must have a date format specified.")})),!h)throw new Error("datepickerPopup must have a date format specified.");if(x&&d.datepickerPopup)throw new Error("HTML5 date input types do not support custom formats.");var C=angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");C.attr({"ng-model":"date","ng-change":"dateSelection(date)","template-url":$});var S=angular.element(C.children()[0]);if(S.attr("template-url",w),x&&"month"===d.type&&(S.attr("datepicker-mode",'"month"'),S.attr("min-mode","month")),d.datepickerOptions){var D=c.$parent.$eval(d.datepickerOptions);D&&D.initDate&&(c.initDate=D.initDate,S.attr("init-date","initDate"),delete D.initDate),angular.forEach(D,function(e,t){S.attr(f(t),e)})}c.watchData={},angular.forEach(["minMode","maxMode","minDate","maxDate","datepickerMode","initDate","shortcutPropagation"],function(e){if(d[e]){var n=t(d[e]);if(c.$parent.$watch(n,function(t){c.watchData[e]=t,("minDate"===e||"maxDate"===e)&&(k[e]=new Date(t))}),S.attr(f(e),"watchData."+e),"datepickerMode"===e){var a=n.assign;c.$watch("watchData."+e,function(e,t){angular.isFunction(a)&&e!==t&&a(c.$parent,e)})}}}),d.dateDisabled&&S.attr("date-disabled","dateDisabled({ date: date, mode: mode })"),d.showWeeks&&S.attr("show-weeks",d.showWeeks),d.customClass&&S.attr("custom-class","customClass({ date: date, mode: mode })"),x?p.$formatters.push(function(e){return c.date=e,e}):(p.$$parserName="date",p.$validators.date=m,p.$parsers.unshift(g),p.$formatters.push(function(e){return c.date=e,p.$isEmpty(e)?e:r(e,h)})),c.dateSelection=function(e){angular.isDefined(e)&&(c.date=e);var t=c.date?r(c.date,h):null;u.val(t),p.$setViewValue(t),v&&(c.isOpen=!1,u[0].focus())},p.$viewChangeListeners.push(function(){c.date=o.parse(p.$viewValue,h,c.date)});var T=function(e){!c.isOpen||u[0].contains(e.target)||C[0].contains(e.target)||c.$apply(function(){c.isOpen=!1})},O=function(e){27===e.which&&c.isOpen?(e.preventDefault(),e.stopPropagation(),c.$apply(function(){c.isOpen=!1}),u[0].focus()):40!==e.which||c.isOpen||(e.preventDefault(),e.stopPropagation(),c.$apply(function(){c.isOpen=!0}))};u.bind("keydown",O),c.keydown=function(e){27===e.which&&(c.isOpen=!1,u[0].focus())},c.$watch("isOpen",function(e){e?(c.position=b?i.offset(u):i.position(u),c.position.top=c.position.top+u.prop("offsetHeight"),l(function(){y&&c.$broadcast("datepicker.focus"),n.bind("click",T)},0,!1)):n.unbind("click",T)}),c.select=function(e){if("today"===e){var t=new Date;angular.isDate(c.date)?(e=new Date(c.date),e.setFullYear(t.getFullYear(),t.getMonth(),t.getDate())):e=new Date(t.setHours(0,0,0,0))}c.dateSelection(e)},c.close=function(){c.isOpen=!1,u[0].focus()};var E=e(C)(c);C.remove(),b?n.find("body").append(E):u.after(E),c.$on("$destroy",function(){c.isOpen===!0&&(a.$$phase||c.$apply(function(){c.isOpen=!1})),E.remove(),u.unbind("keydown",O),n.unbind("click",T)})}}}]).directive("datepickerPopupWrap",function(){return{restrict:"EA",replace:!0,transclude:!0,templateUrl:function(e,t){return t.templateUrl||"template/datepicker/popup.html"}}}),angular.module("ui.bootstrap.dropdown",["ui.bootstrap.position"]).constant("dropdownConfig",{openClass:"open"}).service("dropdownService",["$document","$rootScope",function(e,t){var n=null;this.open=function(t){n||(e.bind("click",a),e.bind("keydown",i)),n&&n!==t&&(n.isOpen=!1),n=t},this.close=function(t){n===t&&(n=null,e.unbind("click",a),e.unbind("keydown",i))};var a=function(e){if(n&&(!e||"disabled"!==n.getAutoClose())){var a=n.getToggleElement();if(!(e&&a&&a[0].contains(e.target))){var i=n.getDropdownElement();e&&"outsideClick"===n.getAutoClose()&&i&&i[0].contains(e.target)||(n.isOpen=!1,t.$$phase||n.$apply())}}},i=function(e){27===e.which?(n.focusToggleElement(),a()):n.isKeynavEnabled()&&/(38|40)/.test(e.which)&&n.isOpen&&(e.preventDefault(),e.stopPropagation(),n.focusDropdownEntry(e.which))}}]).controller("DropdownController",["$scope","$attrs","$parse","dropdownConfig","dropdownService","$animate","$position","$document","$compile","$templateRequest",function(e,t,n,a,i,r,o,s,l,c){var u,d,p=this,f=e.$new(),g=a.openClass,m=angular.noop,h=t.onToggle?n(t.onToggle):angular.noop,v=!1,b=!1,y=s.find("body");this.init=function(a){p.$element=a,t.isOpen&&(d=n(t.isOpen),m=d.assign,e.$watch(d,function(e){f.isOpen=!!e})),v=angular.isDefined(t.dropdownAppendToBody),b=angular.isDefined(t.keyboardNav),v&&p.dropdownMenu&&(y.append(p.dropdownMenu),y.addClass("dropdown"),a.on("$destroy",function(){p.dropdownMenu.remove()}))},this.toggle=function(e){return f.isOpen=arguments.length?!!e:!f.isOpen},this.isOpen=function(){return f.isOpen},f.getToggleElement=function(){return p.toggleElement},f.getAutoClose=function(){return t.autoClose||"always"},f.getElement=function(){return p.$element},f.isKeynavEnabled=function(){return b},f.focusDropdownEntry=function(e){var t=p.dropdownMenu?angular.element(p.dropdownMenu).find("a"):angular.element(p.$element).find("ul").eq(0).find("a");switch(e){case 40:p.selectedOption=angular.isNumber(p.selectedOption)?p.selectedOption===t.length-1?p.selectedOption:p.selectedOption+1:0;break;case 38:p.selectedOption=angular.isNumber(p.selectedOption)?0===p.selectedOption?0:p.selectedOption-1:t.length-1}t[p.selectedOption].focus()},f.getDropdownElement=function(){return p.dropdownMenu},f.focusToggleElement=function(){p.toggleElement&&p.toggleElement[0].focus()},f.$watch("isOpen",function(t,n){if(v&&p.dropdownMenu){var a=o.positionElements(p.$element,p.dropdownMenu,"bottom-left",!0),s={top:a.top+"px",display:t?"block":"none"},d=p.dropdownMenu.hasClass("dropdown-menu-right");d?(s.left="auto",s.right=window.innerWidth-(a.left+p.$element.prop("offsetWidth"))+"px"):(s.left=a.left+"px",s.right="auto"),p.dropdownMenu.css(s)}var b=v?y:p.$element;if(r[t?"addClass":"removeClass"](b,g).then(function(){angular.isDefined(t)&&t!==n&&h(e,{open:!!t})}),t)p.dropdownMenuTemplateUrl&&c(p.dropdownMenuTemplateUrl).then(function(e){u=f.$new(),l(e.trim())(u,function(e){var t=e;p.dropdownMenu.replaceWith(t),p.dropdownMenu=t})}),f.focusToggleElement(),i.open(f);else{if(p.dropdownMenuTemplateUrl){u&&u.$destroy();var $=angular.element('<ul class="dropdown-menu"></ul>');p.dropdownMenu.replaceWith($),p.dropdownMenu=$}i.close(f),p.selectedOption=null}angular.isFunction(m)&&m(e,t)}),e.$on("$locationChangeSuccess",function(){"disabled"!==f.getAutoClose()&&(f.isOpen=!1)});var $=e.$on("$destroy",function(){f.$destroy()});f.$on("$destroy",$)}]).directive("dropdown",function(){return{controller:"DropdownController",link:function(e,t,n,a){a.init(t),t.addClass("dropdown")}}}).directive("dropdownMenu",function(){return{restrict:"AC",require:"?^dropdown",link:function(e,t,n,a){if(a){var i=n.templateUrl;i&&(a.dropdownMenuTemplateUrl=i),a.dropdownMenu||(a.dropdownMenu=t)}}}}).directive("keyboardNav",function(){return{restrict:"A",require:"?^dropdown",link:function(e,t,n,a){t.bind("keydown",function(e){if(-1!==[38,40].indexOf(e.which)){e.preventDefault(),e.stopPropagation();var t=a.dropdownMenu.find("a");switch(e.which){case 40:a.selectedOption=angular.isNumber(a.selectedOption)?a.selectedOption===t.length-1?a.selectedOption:a.selectedOption+1:0;break;case 38:a.selectedOption=angular.isNumber(a.selectedOption)?0===a.selectedOption?0:a.selectedOption-1:t.length-1}t[a.selectedOption].focus()}})}}}).directive("dropdownToggle",function(){return{require:"?^dropdown",link:function(e,t,n,a){if(a){t.addClass("dropdown-toggle"),a.toggleElement=t;var i=function(i){i.preventDefault(),t.hasClass("disabled")||n.disabled||e.$apply(function(){a.toggle()})};t.bind("click",i),t.attr({"aria-haspopup":!0,"aria-expanded":!1}),e.$watch(a.isOpen,function(e){t.attr("aria-expanded",!!e)}),e.$on("$destroy",function(){t.unbind("click",i)})}}}}),angular.module("ui.bootstrap.modal",[]).factory("$$stackedMap",function(){return{createNew:function(){var e=[];return{add:function(t,n){e.push({key:t,value:n})},get:function(t){for(var n=0;n<e.length;n++)if(t==e[n].key)return e[n]},keys:function(){for(var t=[],n=0;n<e.length;n++)t.push(e[n].key);return t},top:function(){return e[e.length-1]},remove:function(t){for(var n=-1,a=0;a<e.length;a++)if(t==e[a].key){n=a;break}return e.splice(n,1)[0]},removeTop:function(){return e.splice(e.length-1,1)[0]},length:function(){return e.length}}}}}).factory("$$multiMap",function(){return{createNew:function(){var e={};return{entries:function(){return Object.keys(e).map(function(t){return{key:t,value:e[t]}})},get:function(t){return e[t]},hasKey:function(t){return!!e[t]},keys:function(){return Object.keys(e)},put:function(t,n){e[t]||(e[t]=[]),e[t].push(n)},remove:function(t,n){var a=e[t];if(a){var i=a.indexOf(n);-1!==i&&a.splice(i,1),a.length||delete e[t]}}}}}}).directive("modalBackdrop",["$animate","$injector","$modalStack",function(e,t,n){function a(t,a,r){r.modalInClass&&(i?i(a,{addClass:r.modalInClass}).start():e.addClass(a,r.modalInClass),t.$on(n.NOW_CLOSING_EVENT,function(t,n){var o=n();i?i(a,{removeClass:r.modalInClass}).start().then(o):e.removeClass(a,r.modalInClass).then(o)}))}var i=null;return t.has("$animateCss")&&(i=t.get("$animateCss")),{restrict:"EA",replace:!0,templateUrl:"template/modal/backdrop.html",compile:function(e,t){return e.addClass(t.backdropClass),a}}}]).directive("modalWindow",["$modalStack","$q","$animate","$injector",function(e,t,n,a){var i=null;return a.has("$animateCss")&&(i=a.get("$animateCss")),{restrict:"EA",scope:{index:"@"},replace:!0,transclude:!0,templateUrl:function(e,t){return t.templateUrl||"template/modal/window.html"},link:function(a,r,o){r.addClass(o.windowClass||""),a.size=o.size,a.close=function(t){var n=e.getTop();n&&n.value.backdrop&&"static"!==n.value.backdrop&&t.target===t.currentTarget&&(t.preventDefault(),t.stopPropagation(),e.dismiss(n.key,"backdrop click"))},a.$isRendered=!0;var s=t.defer();o.$observe("modalRender",function(e){"true"==e&&s.resolve()}),s.promise.then(function(){var s=null;o.modalInClass&&(s=i?i(r,{addClass:o.modalInClass}).start():n.addClass(r,o.modalInClass),a.$on(e.NOW_CLOSING_EVENT,function(e,t){var a=t();i?i(r,{removeClass:o.modalInClass}).start().then(a):n.removeClass(r,o.modalInClass).then(a)})),t.when(s).then(function(){var e=r[0].querySelectorAll("[autofocus]");e.length?e[0].focus():r[0].focus()});var l=e.getTop();l&&e.modalRendered(l.key)})}}}]).directive("modalAnimationClass",[function(){return{compile:function(e,t){t.modalAnimation&&e.addClass(t.modalAnimationClass)}}}]).directive("modalTransclude",function(){return{link:function(e,t,n,a,i){i(e.$parent,function(e){t.empty(),t.append(e)})}}}).factory("$modalStack",["$animate","$timeout","$document","$compile","$rootScope","$q","$injector","$$multiMap","$$stackedMap",function(e,t,n,a,i,r,o,s,l){function c(){for(var e=-1,t=y.keys(),n=0;n<t.length;n++)y.get(t[n]).value.backdrop&&(e=n);return e}function u(e,t){var a=n.find("body").eq(0),i=y.get(e).value;y.remove(e),p(i.modalDomEl,i.modalScope,function(){var t=i.openedClass||b;$.remove(t,e),a.toggleClass(t,$.hasKey(t))}),d(),t&&t.focus?t.focus():a.focus()}function d(){if(m&&-1==c()){var e=h;p(m,h,function(){e=null}),m=void 0,h=void 0}}function p(t,n,a){function i(){i.done||(i.done=!0,g?g(t,{event:"leave"}).start().then(function(){t.remove()}):e.leave(t),n.$destroy(),a&&a())}var o,s=null,l=function(){return o||(o=r.defer(),s=o.promise),function(){o.resolve()}};return n.$broadcast(w.NOW_CLOSING_EVENT,l),r.when(s).then(i)}function f(e,t,n){return!e.value.modalScope.$broadcast("modal.closing",t,n).defaultPrevented}var g=null;o.has("$animateCss")&&(g=o.get("$animateCss"));var m,h,v,b="modal-open",y=l.createNew(),$=s.createNew(),w={NOW_CLOSING_EVENT:"modal.stack.now-closing"},k=0,x="a[href], area[href], input:not([disabled]), button:not([disabled]),select:not([disabled]), textarea:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable=true]";return i.$watch(c,function(e){h&&(h.index=e)}),n.bind("keydown",function(e){if(e.isDefaultPrevented())return e;var t=y.top();if(t&&t.value.keyboard)switch(e.which){case 27:e.preventDefault(),i.$apply(function(){w.dismiss(t.key,"escape key press")});break;case 9:w.loadFocusElementList(t);var n=!1;e.shiftKey?w.isFocusInFirstItem(e)&&(n=w.focusLastFocusableElement()):w.isFocusInLastItem(e)&&(n=w.focusFirstFocusableElement()),n&&(e.preventDefault(),e.stopPropagation())}}),w.open=function(e,t){var r=n[0].activeElement,o=t.openedClass||b;y.add(e,{deferred:t.deferred,renderDeferred:t.renderDeferred,modalScope:t.scope,backdrop:t.backdrop,keyboard:t.keyboard,openedClass:t.openedClass}),$.put(o,e);var s=n.find("body").eq(0),l=c();if(l>=0&&!m){h=i.$new(!0),h.index=l;var u=angular.element('<div modal-backdrop="modal-backdrop"></div>');u.attr("backdrop-class",t.backdropClass),t.animation&&u.attr("modal-animation","true"),m=a(u)(h),s.append(m)}var d=angular.element('<div modal-window="modal-window"></div>');d.attr({"template-url":t.windowTemplateUrl,"window-class":t.windowClass,size:t.size,index:y.length()-1,animate:"animate"}).html(t.content),t.animation&&d.attr("modal-animation","true");var p=a(d)(t.scope);y.top().value.modalDomEl=p,y.top().value.modalOpener=r,s.append(p),s.addClass(o),w.clearFocusListCache()},w.close=function(e,t){var n=y.get(e);return n&&f(n,t,!0)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.resolve(t),u(e,n.value.modalOpener),!0):!n},w.dismiss=function(e,t){var n=y.get(e);return n&&f(n,t,!1)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.reject(t),u(e,n.value.modalOpener),!0):!n},w.dismissAll=function(e){for(var t=this.getTop();t&&this.dismiss(t.key,e);)t=this.getTop()},w.getTop=function(){return y.top()},w.modalRendered=function(e){var t=y.get(e);t&&t.value.renderDeferred.resolve()},w.focusFirstFocusableElement=function(){return v.length>0?(v[0].focus(),!0):!1},w.focusLastFocusableElement=function(){return v.length>0?(v[v.length-1].focus(),!0):!1},w.isFocusInFirstItem=function(e){return v.length>0?(e.target||e.srcElement)==v[0]:!1},w.isFocusInLastItem=function(e){return v.length>0?(e.target||e.srcElement)==v[v.length-1]:!1},w.clearFocusListCache=function(){v=[],k=0},w.loadFocusElementList=function(e){if((void 0===v||!v.length0)&&e){var t=e.value.modalDomEl;t&&t.length&&(v=t[0].querySelectorAll(x))}},w}]).provider("$modal",function(){var e={options:{animation:!0,backdrop:!0,keyboard:!0},$get:["$injector","$rootScope","$q","$templateRequest","$controller","$modalStack",function(t,n,a,i,r,o){function s(e){return e.template?a.when(e.template):i(angular.isFunction(e.templateUrl)?e.templateUrl():e.templateUrl)}function l(e){var n=[];return angular.forEach(e,function(e){angular.isFunction(e)||angular.isArray(e)?n.push(a.when(t.invoke(e))):angular.isString(e)?n.push(a.when(t.get(e))):n.push(a.when(e))}),n}var c={},u=null;return c.getPromiseChain=function(){return u},c.open=function(t){var i=a.defer(),c=a.defer(),d=a.defer(),p={result:i.promise,opened:c.promise,rendered:d.promise,close:function(e){return o.close(p,e)},dismiss:function(e){return o.dismiss(p,e)}};if(t=angular.extend({},e.options,t),t.resolve=t.resolve||{},!t.template&&!t.templateUrl)throw new Error("One of template or templateUrl options is required.");var f,g=a.all([s(t)].concat(l(t.resolve)));return f=u=a.all([u]).then(function(){return g},function(){return g}).then(function(e){var a=(t.scope||n).$new();a.$close=p.close,a.$dismiss=p.dismiss,a.$on("$destroy",function(){a.$$uibDestructionScheduled||a.$dismiss("$uibUnscheduledDestruction")});var s,l={},u=1;t.controller&&(l.$scope=a,l.$modalInstance=p,angular.forEach(t.resolve,function(t,n){l[n]=e[u++]}),s=r(t.controller,l),t.controllerAs&&(t.bindToController&&angular.extend(s,a),a[t.controllerAs]=s)),o.open(p,{scope:a,deferred:i,renderDeferred:d,content:e[0],animation:t.animation,backdrop:t.backdrop,keyboard:t.keyboard,backdropClass:t.backdropClass,windowClass:t.windowClass,windowTemplateUrl:t.windowTemplateUrl,size:t.size,openedClass:t.openedClass}),c.resolve(!0)},function(e){c.reject(e),i.reject(e)}).finally(function(){u===f&&(u=null)}),p},c}]};return e}),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(e,t,n){var a=this,i={$setViewValue:angular.noop},r=t.numPages?n(t.numPages).assign:angular.noop;this.init=function(o,s){i=o,this.config=s,i.$render=function(){a.render()},t.itemsPerPage?e.$parent.$watch(n(t.itemsPerPage),function(t){a.itemsPerPage=parseInt(t,10),e.totalPages=a.calculateTotalPages()}):this.itemsPerPage=s.itemsPerPage,e.$watch("totalItems",function(){e.totalPages=a.calculateTotalPages()}),e.$watch("totalPages",function(t){r(e.$parent,t),e.page>t?e.selectPage(t):i.$render()})},this.calculateTotalPages=function(){var t=this.itemsPerPage<1?1:Math.ceil(e.totalItems/this.itemsPerPage);return Math.max(t||0,1)},this.render=function(){e.page=parseInt(i.$viewValue,10)||1},e.selectPage=function(t,n){n&&n.preventDefault();var a=!e.ngDisabled||!n;a&&e.page!==t&&t>0&&t<=e.totalPages&&(n&&n.target&&n.target.blur(),i.$setViewValue(t),i.$render())},e.getText=function(t){return e[t+"Text"]||a.config[t+"Text"]},e.noPrevious=function(){return 1===e.page},e.noNext=function(){return e.page===e.totalPages}}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(e,t){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@",ngDisabled:"="},require:["pagination","?ngModel"],controller:"PaginationController",controllerAs:"pagination",templateUrl:function(e,t){return t.templateUrl||"template/pagination/pagination.html"
},replace:!0,link:function(n,a,i,r){function o(e,t,n){return{number:e,text:t,active:n}}function s(e,t){var n=[],a=1,i=t,r=angular.isDefined(u)&&t>u;r&&(d?(a=Math.max(e-Math.floor(u/2),1),i=a+u-1,i>t&&(i=t,a=i-u+1)):(a=(Math.ceil(e/u)-1)*u+1,i=Math.min(a+u-1,t)));for(var s=a;i>=s;s++){var l=o(s,s,s===e);n.push(l)}if(r&&!d){if(a>1){var c=o(a-1,"...",!1);n.unshift(c)}if(t>i){var p=o(i+1,"...",!1);n.push(p)}}return n}var l=r[0],c=r[1];if(c){var u=angular.isDefined(i.maxSize)?n.$parent.$eval(i.maxSize):t.maxSize,d=angular.isDefined(i.rotate)?n.$parent.$eval(i.rotate):t.rotate;n.boundaryLinks=angular.isDefined(i.boundaryLinks)?n.$parent.$eval(i.boundaryLinks):t.boundaryLinks,n.directionLinks=angular.isDefined(i.directionLinks)?n.$parent.$eval(i.directionLinks):t.directionLinks,l.init(c,t),i.maxSize&&n.$parent.$watch(e(i.maxSize),function(e){u=parseInt(e,10),l.render()});var p=l.render;l.render=function(){p(),n.page>0&&n.page<=n.totalPages&&(n.pages=s(n.page,n.totalPages))}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("pager",["pagerConfig",function(e){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@",ngDisabled:"="},require:["pager","?ngModel"],controller:"PaginationController",controllerAs:"pagination",templateUrl:function(e,t){return t.templateUrl||"template/pagination/pager.html"},replace:!0,link:function(t,n,a,i){var r=i[0],o=i[1];o&&(t.align=angular.isDefined(a.align)?t.$parent.$eval(a.align):e.align,r.init(o,e))}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).provider("$tooltip",function(){function e(e){var t=/[A-Z]/g,n="-";return e.replace(t,function(e,t){return(t?n:"")+e.toLowerCase()})}var t={placement:"top",animation:!0,popupDelay:0,useContentExp:!1},n={mouseenter:"mouseleave",click:"click",focus:"blur",none:""},a={};this.options=function(e){angular.extend(a,e)},this.setTriggers=function(e){angular.extend(n,e)},this.$get=["$window","$compile","$timeout","$document","$position","$interpolate","$rootScope","$parse",function(i,r,o,s,l,c,u,d){return function(i,p,f,g){function m(e){var t=(e||g.trigger||f).split(" "),a=t.map(function(e){return n[e]||e});return{show:t,hide:a}}g=angular.extend({},t,a,g);var h=e(i),v=c.startSymbol(),b=c.endSymbol(),y="<div "+h+'-popup title="'+v+"title"+b+'" '+(g.useContentExp?'content-exp="contentExp()" ':'content="'+v+"content"+b+'" ')+'placement="'+v+"placement"+b+'" popup-class="'+v+"popupClass"+b+'" animation="animation" is-open="isOpen"origin-scope="origScope" ></div>';return{restrict:"EA",compile:function(){var e=r(y);return function(t,n,a){function r(){P.isOpen?f():c()}function c(){(!I||t.$eval(a[p+"Enable"]))&&($(),P.popupDelay?O||(O=o(h,P.popupDelay,!1)):h())}function f(){v(),u.$$phase||u.$digest()}function h(){return O=null,T&&(o.cancel(T),T=null),(g.useContentExp?P.contentExp():P.content)?(b(),P.isOpen=!0,L&&L.assign(P.origScope,P.isOpen),u.$$phase||P.$apply(),S.css({display:"block"}),F(),void 0):angular.noop}function v(){P.isOpen=!1,L&&L.assign(P.origScope,P.isOpen),o.cancel(O),O=null,o.cancel(E),E=null,P.animation?T||(T=o(y,500)):y()}function b(){S&&y(),D=P.$new(),S=e(D,function(e){M?s.find("body").append(e):n.after(e)}),g.useContentExp&&(D.$watch("contentExp()",function(e){!e&&P.isOpen&&v()}),D.$watch(function(){U||(U=!0,D.$$postDigest(function(){U=!1,P.isOpen&&F()}))}))}function y(){T=null,S&&(S.remove(),S=null),D&&(D.$destroy(),D=null)}function $(){w(),k(),x()}function w(){P.popupClass=a[p+"Class"]}function k(){var e=a[p+"Placement"];P.placement=angular.isDefined(e)?e:g.placement}function x(){var e=a[p+"PopupDelay"],t=parseInt(e,10);P.popupDelay=isNaN(t)?g.popupDelay:t}function C(){var e=a[p+"Trigger"];N(),A=m(e),"none"!==A.show&&A.show.forEach(function(e,t){e===A.hide[t]?n[0].addEventListener(e,r):e&&(n[0].addEventListener(e,c),n[0].addEventListener(A.hide[t],f))})}var S,D,T,O,E,M=angular.isDefined(g.appendToBody)?g.appendToBody:!1,A=m(void 0),I=angular.isDefined(a[p+"Enable"]),P=t.$new(!0),U=!1,L=angular.isDefined(a[p+"IsOpen"])?d(a[p+"IsOpen"]):!1,F=function(){S&&(E||(E=o(function(){S.css({top:0,left:0,width:"auto",height:"auto"});var e=l.position(S),t=l.positionElements(n,S,P.placement,M);t.top+="px",t.left+="px",t.width=e.width+"px",t.height=e.height+"px",S.css(t),E=null},0,!1)))};P.origScope=t,P.isOpen=!1,P.contentExp=function(){return t.$eval(a[i])},g.useContentExp||a.$observe(i,function(e){P.content=e,!e&&P.isOpen?v():F()}),a.$observe("disabled",function(e){O&&e&&(o.cancel(O),O=null),e&&P.isOpen&&v()}),a.$observe(p+"Title",function(e){P.title=e,F()}),a.$observe(p+"Placement",function(){P.isOpen&&(k(),F())}),L&&t.$watch(L,function(e){e!==P.isOpen&&r()});var N=function(){A.show.forEach(function(e){n.unbind(e,c)}),A.hide.forEach(function(e){n.unbind(e,f)})};C();var V=t.$eval(a[p+"Animation"]);P.animation=angular.isDefined(V)?!!V:g.animation;var _=t.$eval(a[p+"AppendToBody"]);M=angular.isDefined(_)?_:M,M&&t.$on("$locationChangeSuccess",function(){P.isOpen&&v()}),t.$on("$destroy",function(){o.cancel(T),o.cancel(O),o.cancel(E),N(),y(),P=null})}}}}}]}).directive("tooltipTemplateTransclude",["$animate","$sce","$compile","$templateRequest",function(e,t,n,a){return{link:function(i,r,o){var s,l,c,u=i.$eval(o.tooltipTemplateTranscludeScope),d=0,p=function(){l&&(l.remove(),l=null),s&&(s.$destroy(),s=null),c&&(e.leave(c).then(function(){l=null}),l=c,c=null)};i.$watch(t.parseAsResourceUrl(o.tooltipTemplateTransclude),function(t){var o=++d;t?(a(t,!0).then(function(a){if(o===d){var i=u.$new(),l=a,f=n(l)(i,function(t){p(),e.enter(t,r)});s=i,c=f,s.$emit("$includeContentLoaded",t)}},function(){o===d&&(p(),i.$emit("$includeContentError",t))}),i.$emit("$includeContentRequested",t)):p()}),i.$on("$destroy",p)}}}]).directive("tooltipClasses",function(){return{restrict:"A",link:function(e,t,n){e.placement&&t.addClass(e.placement),e.popupClass&&t.addClass(e.popupClass),e.animation()&&t.addClass(n.tooltipAnimationClass)}}}).directive("tooltipPopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html"}}).directive("tooltip",["$tooltip",function(e){return e("tooltip","tooltip","mouseenter")}]).directive("tooltipTemplatePopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/tooltip/tooltip-template-popup.html"}}).directive("tooltipTemplate",["$tooltip",function(e){return e("tooltipTemplate","tooltip","mouseenter",{useContentExp:!0})}]).directive("tooltipHtmlPopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-popup.html"}}).directive("tooltipHtml",["$tooltip",function(e){return e("tooltipHtml","tooltip","mouseenter",{useContentExp:!0})}]).directive("tooltipHtmlUnsafePopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-unsafe-popup.html"}}).value("tooltipHtmlUnsafeSuppressDeprecated",!1).directive("tooltipHtmlUnsafe",["$tooltip","tooltipHtmlUnsafeSuppressDeprecated","$log",function(e,t,n){return t||n.warn("tooltip-html-unsafe is now deprecated. Use tooltip-html or tooltip-template instead."),e("tooltipHtmlUnsafe","tooltip","mouseenter")}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("popoverTemplatePopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/popover/popover-template.html"}}).directive("popoverTemplate",["$tooltip",function(e){return e("popoverTemplate","popover","click",{useContentExp:!0})}]).directive("popoverHtmlPopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",title:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover-html.html"}}).directive("popoverHtml",["$tooltip",function(e){return e("popoverHtml","popover","click",{useContentExp:!0})}]).directive("popoverPopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html"}}).directive("popover",["$tooltip",function(e){return e("popover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).value("$progressSuppressWarning",!1).controller("ProgressController",["$scope","$attrs","progressConfig",function(e,t,n){var a=this,i=angular.isDefined(t.animate)?e.$parent.$eval(t.animate):n.animate;this.bars=[],e.max=angular.isDefined(e.max)?e.max:n.max,this.addBar=function(t,n){i||n.css({transition:"none"}),this.bars.push(t),t.max=e.max,t.$watch("value",function(){t.recalculatePercentage()}),t.recalculatePercentage=function(){t.percent=+(100*t.value/t.max).toFixed(2);var e=a.bars.reduce(function(e,t){return e+t.percent},0);e>100&&(t.percent-=e-100)},t.$on("$destroy",function(){n=null,a.removeBar(t)})},this.removeBar=function(e){this.bars.splice(this.bars.indexOf(e),1)},e.$watch("max",function(){a.bars.forEach(function(t){t.max=e.max,t.recalculatePercentage()})})}]).directive("uibProgress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"uibProgress",scope:{max:"=?"},templateUrl:"template/progressbar/progress.html"}}).directive("progress",["$log","$progressSuppressWarning",function(e,t){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{max:"=?"},templateUrl:"template/progressbar/progress.html",link:function(){t&&e.warn("progress is now deprecated. Use uib-progress instead")}}}]).directive("uibBar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^uibProgress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(e,t,n,a){a.addBar(e,t)}}}).directive("bar",["$log","$progressSuppressWarning",function(e,t){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(n,a,i,r){t&&e.warn("bar is now deprecated. Use uib-bar instead"),r.addBar(n,a)}}}]).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",max:"=?",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(e,t,n,a){a.addBar(e,angular.element(t.children()[0]))}}}),angular.module("ui.bootstrap.rating",[]).constant("ratingConfig",{max:5,stateOn:null,stateOff:null,titles:["one","two","three","four","five"]}).controller("RatingController",["$scope","$attrs","ratingConfig",function(e,t,n){var a={$setViewValue:angular.noop};this.init=function(i){a=i,a.$render=this.render,a.$formatters.push(function(e){return angular.isNumber(e)&&e<<0!==e&&(e=Math.round(e)),e}),this.stateOn=angular.isDefined(t.stateOn)?e.$parent.$eval(t.stateOn):n.stateOn,this.stateOff=angular.isDefined(t.stateOff)?e.$parent.$eval(t.stateOff):n.stateOff;var r=angular.isDefined(t.titles)?e.$parent.$eval(t.titles):n.titles;this.titles=angular.isArray(r)&&r.length>0?r:n.titles;var o=angular.isDefined(t.ratingStates)?e.$parent.$eval(t.ratingStates):new Array(angular.isDefined(t.max)?e.$parent.$eval(t.max):n.max);e.range=this.buildTemplateObjects(o)},this.buildTemplateObjects=function(e){for(var t=0,n=e.length;n>t;t++)e[t]=angular.extend({index:t},{stateOn:this.stateOn,stateOff:this.stateOff,title:this.getTitle(t)},e[t]);return e},this.getTitle=function(e){return e>=this.titles.length?e+1:this.titles[e]},e.rate=function(t){!e.readonly&&t>=0&&t<=e.range.length&&(a.$setViewValue(a.$viewValue===t?0:t),a.$render())},e.enter=function(t){e.readonly||(e.value=t),e.onHover({value:t})},e.reset=function(){e.value=a.$viewValue,e.onLeave()},e.onKeydown=function(t){/(37|38|39|40)/.test(t.which)&&(t.preventDefault(),t.stopPropagation(),e.rate(e.value+(38===t.which||39===t.which?1:-1)))},this.render=function(){e.value=a.$viewValue}}]).directive("rating",function(){return{restrict:"EA",require:["rating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"RatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(e,t,n,a){var i=a[0],r=a[1];i.init(r)}}}),angular.module("ui.bootstrap.tabs",[]).controller("TabsetController",["$scope",function(e){var t=this,n=t.tabs=e.tabs=[];t.select=function(e){angular.forEach(n,function(t){t.active&&t!==e&&(t.active=!1,t.onDeselect(),e.selectCalled=!1)}),e.active=!0,e.selectCalled||(e.onSelect(),e.selectCalled=!0)},t.addTab=function(e){n.push(e),1===n.length&&e.active!==!1?e.active=!0:e.active?t.select(e):e.active=!1},t.removeTab=function(e){var i=n.indexOf(e);if(e.active&&n.length>1&&!a){var r=i==n.length-1?i-1:i+1;t.select(n[r])}n.splice(i,1)};var a;e.$on("$destroy",function(){a=!0})}]).directive("tabset",function(){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"TabsetController",templateUrl:"template/tabs/tabset.html",link:function(e,t,n){e.vertical=angular.isDefined(n.vertical)?e.$parent.$eval(n.vertical):!1,e.justified=angular.isDefined(n.justified)?e.$parent.$eval(n.justified):!1}}}).directive("tab",["$parse","$log",function(e,t){return{require:"^tabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},link:function(n,a,i,r,o){n.$watch("active",function(e){e&&r.select(n)}),n.disabled=!1,i.disable&&n.$parent.$watch(e(i.disable),function(e){n.disabled=!!e}),i.disabled&&(t.warn('Use of "disabled" attribute has been deprecated, please use "disable"'),n.$parent.$watch(e(i.disabled),function(e){n.disabled=!!e})),n.select=function(){n.disabled||(n.active=!0)},r.addTab(n),n.$on("$destroy",function(){r.removeTab(n)}),n.$transcludeFn=o}}}]).directive("tabHeadingTransclude",function(){return{restrict:"A",require:"^tab",link:function(e,t){e.$watch("headingElement",function(e){e&&(t.html(""),t.append(e))})}}}).directive("tabContentTransclude",function(){function e(e){return e.tagName&&(e.hasAttribute("tab-heading")||e.hasAttribute("data-tab-heading")||e.hasAttribute("x-tab-heading")||"tab-heading"===e.tagName.toLowerCase()||"data-tab-heading"===e.tagName.toLowerCase()||"x-tab-heading"===e.tagName.toLowerCase())}return{restrict:"A",require:"^tabset",link:function(t,n,a){var i=t.$eval(a.tabContentTransclude);i.$transcludeFn(i.$parent,function(t){angular.forEach(t,function(t){e(t)?i.headingElement=t:n.append(t)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("timepickerConfig",{hourStep:1,minuteStep:1,showMeridian:!0,meridians:null,readonlyInput:!1,mousewheel:!0,arrowkeys:!0,showSpinners:!0}).controller("TimepickerController",["$scope","$attrs","$parse","$log","$locale","timepickerConfig",function(e,t,n,a,i,r){function o(){var t=parseInt(e.hours,10),n=e.showMeridian?t>0&&13>t:t>=0&&24>t;return n?(e.showMeridian&&(12===t&&(t=0),e.meridian===h[1]&&(t+=12)),t):void 0}function s(){var t=parseInt(e.minutes,10);return t>=0&&60>t?t:void 0}function l(e){return angular.isDefined(e)&&e.toString().length<2?"0"+e:e.toString()}function c(e){u(),m.$setViewValue(new Date(g)),d(e)}function u(){m.$setValidity("time",!0),e.invalidHours=!1,e.invalidMinutes=!1}function d(t){var n=g.getHours(),a=g.getMinutes();e.showMeridian&&(n=0===n||12===n?12:n%12),e.hours="h"===t?n:l(n),"m"!==t&&(e.minutes=l(a)),e.meridian=g.getHours()<12?h[0]:h[1]}function p(e,t){var n=new Date(e.getTime()+6e4*t),a=new Date(e);return a.setHours(n.getHours(),n.getMinutes()),a}function f(e){g=p(g,e),c()}var g=new Date,m={$setViewValue:angular.noop},h=angular.isDefined(t.meridians)?e.$parent.$eval(t.meridians):r.meridians||i.DATETIME_FORMATS.AMPMS;this.init=function(n,a){m=n,m.$render=this.render,m.$formatters.unshift(function(e){return e?new Date(e):null});var i=a.eq(0),o=a.eq(1),s=angular.isDefined(t.mousewheel)?e.$parent.$eval(t.mousewheel):r.mousewheel;s&&this.setupMousewheelEvents(i,o);var l=angular.isDefined(t.arrowkeys)?e.$parent.$eval(t.arrowkeys):r.arrowkeys;l&&this.setupArrowkeyEvents(i,o),e.readonlyInput=angular.isDefined(t.readonlyInput)?e.$parent.$eval(t.readonlyInput):r.readonlyInput,this.setupInputEvents(i,o)};var v=r.hourStep;t.hourStep&&e.$parent.$watch(n(t.hourStep),function(e){v=parseInt(e,10)});var b=r.minuteStep;t.minuteStep&&e.$parent.$watch(n(t.minuteStep),function(e){b=parseInt(e,10)});var y;e.$parent.$watch(n(t.min),function(e){var t=new Date(e);y=isNaN(t)?void 0:t});var $;e.$parent.$watch(n(t.max),function(e){var t=new Date(e);$=isNaN(t)?void 0:t}),e.noIncrementHours=function(){var e=p(g,60*v);return e>$||g>e&&y>e},e.noDecrementHours=function(){var e=p(g,60*-v);return y>e||e>g&&e>$},e.noIncrementMinutes=function(){var e=p(g,b);return e>$||g>e&&y>e},e.noDecrementMinutes=function(){var e=p(g,-b);return y>e||e>g&&e>$},e.noToggleMeridian=function(){return g.getHours()<13?p(g,720)>$:p(g,-720)<y},e.showMeridian=r.showMeridian,t.showMeridian&&e.$parent.$watch(n(t.showMeridian),function(t){if(e.showMeridian=!!t,m.$error.time){var n=o(),a=s();angular.isDefined(n)&&angular.isDefined(a)&&(g.setHours(n),c())}else d()}),this.setupMousewheelEvents=function(t,n){var a=function(e){e.originalEvent&&(e=e.originalEvent);var t=e.wheelDelta?e.wheelDelta:-e.deltaY;return e.detail||t>0};t.bind("mousewheel wheel",function(t){e.$apply(a(t)?e.incrementHours():e.decrementHours()),t.preventDefault()}),n.bind("mousewheel wheel",function(t){e.$apply(a(t)?e.incrementMinutes():e.decrementMinutes()),t.preventDefault()})},this.setupArrowkeyEvents=function(t,n){t.bind("keydown",function(t){38===t.which?(t.preventDefault(),e.incrementHours(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementHours(),e.$apply())}),n.bind("keydown",function(t){38===t.which?(t.preventDefault(),e.incrementMinutes(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementMinutes(),e.$apply())})},this.setupInputEvents=function(t,n){if(e.readonlyInput)return e.updateHours=angular.noop,e.updateMinutes=angular.noop,void 0;var a=function(t,n){m.$setViewValue(null),m.$setValidity("time",!1),angular.isDefined(t)&&(e.invalidHours=t),angular.isDefined(n)&&(e.invalidMinutes=n)};e.updateHours=function(){var e=o(),t=s();angular.isDefined(e)&&angular.isDefined(t)?(g.setHours(e),y>g||g>$?a(!0):c("h")):a(!0)},t.bind("blur",function(){!e.invalidHours&&e.hours<10&&e.$apply(function(){e.hours=l(e.hours)})}),e.updateMinutes=function(){var e=s(),t=o();angular.isDefined(e)&&angular.isDefined(t)?(g.setMinutes(e),y>g||g>$?a(void 0,!0):c("m")):a(void 0,!0)},n.bind("blur",function(){!e.invalidMinutes&&e.minutes<10&&e.$apply(function(){e.minutes=l(e.minutes)})})},this.render=function(){var t=m.$viewValue;isNaN(t)?(m.$setValidity("time",!1),a.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(t&&(g=t),y>g||g>$?(m.$setValidity("time",!1),e.invalidHours=!0,e.invalidMinutes=!0):u(),d())},e.showSpinners=angular.isDefined(t.showSpinners)?e.$parent.$eval(t.showSpinners):r.showSpinners,e.incrementHours=function(){e.noIncrementHours()||f(60*v)},e.decrementHours=function(){e.noDecrementHours()||f(60*-v)},e.incrementMinutes=function(){e.noIncrementMinutes()||f(b)},e.decrementMinutes=function(){e.noDecrementMinutes()||f(-b)},e.toggleMeridian=function(){e.noToggleMeridian()||f(720*(g.getHours()<12?1:-1))}}]).directive("timepicker",function(){return{restrict:"EA",require:["timepicker","?^ngModel"],controller:"TimepickerController",controllerAs:"timepicker",replace:!0,scope:{},templateUrl:function(e,t){return t.templateUrl||"template/timepicker/timepicker.html"},link:function(e,t,n,a){var i=a[0],r=a[1];r&&i.init(r,t.find("input"))}}}),angular.module("ui.bootstrap.transition",[]).value("$transitionSuppressDeprecated",!1).factory("$transition",["$q","$timeout","$rootScope","$log","$transitionSuppressDeprecated",function(e,t,n,a,i){function r(e){for(var t in e)if(void 0!==s.style[t])return e[t]}i||a.warn("$transition is now deprecated. Use $animate from ngAnimate instead.");var o=function(a,i,r){r=r||{};var s=e.defer(),l=o[r.animation?"animationEndEventName":"transitionEndEventName"],c=function(){n.$apply(function(){a.unbind(l,c),s.resolve(a)})};return l&&a.bind(l,c),t(function(){angular.isString(i)?a.addClass(i):angular.isFunction(i)?i(a):angular.isObject(i)&&a.css(i),l||s.resolve(a)}),s.promise.cancel=function(){l&&a.unbind(l,c),s.reject("Transition cancelled")},s.promise},s=document.createElement("trans"),l={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"},c={WebkitTransition:"webkitAnimationEnd",MozTransition:"animationend",OTransition:"oAnimationEnd",transition:"animationend"};return o.transitionEndEventName=r(l),o.animationEndEventName=r(c),o}]),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.position"]).factory("typeaheadParser",["$parse",function(e){var t=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(n){var a=n.match(t);if(!a)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+n+'".');return{itemName:a[3],source:e(a[4]),viewMapper:e(a[2]||a[1]),modelMapper:e(a[1])}}}}]).directive("typeahead",["$compile","$parse","$q","$timeout","$document","$window","$rootScope","$position","typeaheadParser",function(e,t,n,a,i,r,o,s,l){var c=[9,13,27,38,40],u=200;return{require:["ngModel","^?ngModelOptions"],link:function(d,p,f,g){function m(){F.moveInProgress||(F.moveInProgress=!0,F.$digest()),B&&a.cancel(B),B=a(function(){F.matches.length&&h(),F.moveInProgress=!1,F.$digest()},u)}function h(){F.position=E?s.offset(p):s.position(p),F.position.top+=p.prop("offsetHeight")}var v=g[0],b=g[1],y=d.$eval(f.typeaheadMinLength);y||0===y||(y=1);var $,w,k=d.$eval(f.typeaheadWaitMs)||0,x=d.$eval(f.typeaheadEditable)!==!1,C=t(f.typeaheadLoading).assign||angular.noop,S=t(f.typeaheadOnSelect),D=angular.isDefined(f.typeaheadSelectOnBlur)?d.$eval(f.typeaheadSelectOnBlur):!1,T=t(f.typeaheadNoResults).assign||angular.noop,O=f.typeaheadInputFormatter?t(f.typeaheadInputFormatter):void 0,E=f.typeaheadAppendToBody?d.$eval(f.typeaheadAppendToBody):!1,M=d.$eval(f.typeaheadFocusFirst)!==!1,A=f.typeaheadSelectOnExact?d.$eval(f.typeaheadSelectOnExact):!1,I=t(f.ngModel),P=t(f.ngModel+"($$$p)"),U=function(e,t){return angular.isFunction(I(d))&&b&&b.$options&&b.$options.getterSetter?P(e,{$$$p:t}):I.assign(e,t)},L=l.parse(f.typeahead),F=d.$new(),N=d.$on("$destroy",function(){F.$destroy()});F.$on("$destroy",N);var V="typeahead-"+F.$id+"-"+Math.floor(1e4*Math.random());p.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":V});var _=angular.element("<div typeahead-popup></div>");_.attr({id:V,matches:"matches",active:"activeIdx",select:"select(activeIdx)","move-in-progress":"moveInProgress",query:"query",position:"position"}),angular.isDefined(f.typeaheadTemplateUrl)&&_.attr("template-url",f.typeaheadTemplateUrl),angular.isDefined(f.typeaheadPopupTemplateUrl)&&_.attr("popup-template-url",f.typeaheadPopupTemplateUrl);var H=function(){F.matches=[],F.activeIdx=-1,p.attr("aria-expanded",!1)},R=function(e){return V+"-option-"+e};F.$watch("activeIdx",function(e){0>e?p.removeAttr("aria-activedescendant"):p.attr("aria-activedescendant",R(e))});var q=function(e,t){return F.matches.length>t&&e?e.toUpperCase()===F.matches[t].label.toUpperCase():!1},j=function(e){var t={$viewValue:e};C(d,!0),T(d,!1),n.when(L.source(d,t)).then(function(n){var a=e===v.$viewValue;if(a&&$)if(n&&n.length>0){F.activeIdx=M?0:-1,T(d,!1),F.matches.length=0;for(var i=0;i<n.length;i++)t[L.itemName]=n[i],F.matches.push({id:R(i),label:L.viewMapper(F,t),model:n[i]});F.query=e,h(),p.attr("aria-expanded",!0),A&&1===F.matches.length&&q(e,0)&&F.select(0)}else H(),T(d,!0);a&&C(d,!1)},function(){H(),C(d,!1),T(d,!0)})};E&&(angular.element(r).bind("resize",m),i.find("body").bind("scroll",m));var B;F.moveInProgress=!1,H(),F.query=void 0;var z,Y=function(e){z=a(function(){j(e)},k)},W=function(){z&&a.cancel(z)};v.$parsers.unshift(function(e){return $=!0,0===y||e&&e.length>=y?k>0?(W(),Y(e)):j(e):(C(d,!1),W(),H()),x?e:e?(v.$setValidity("editable",!1),void 0):(v.$setValidity("editable",!0),null)}),v.$formatters.push(function(e){var t,n,a={};return x||v.$setValidity("editable",!0),O?(a.$model=e,O(d,a)):(a[L.itemName]=e,t=L.viewMapper(d,a),a[L.itemName]=void 0,n=L.viewMapper(d,a),t!==n?t:e)}),F.select=function(e){var t,n,i={};w=!0,i[L.itemName]=n=F.matches[e].model,t=L.modelMapper(d,i),U(d,t),v.$setValidity("editable",!0),v.$setValidity("parse",!0),S(d,{$item:n,$model:t,$label:L.viewMapper(d,i)}),H(),F.$eval(f.typeaheadFocusOnSelect)!==!1&&a(function(){p[0].focus()},0,!1)},p.bind("keydown",function(e){if(0!==F.matches.length&&-1!==c.indexOf(e.which)){if(-1===F.activeIdx&&(9===e.which||13===e.which))return H(),F.$digest(),void 0;e.preventDefault(),40===e.which?(F.activeIdx=(F.activeIdx+1)%F.matches.length,F.$digest()):38===e.which?(F.activeIdx=(F.activeIdx>0?F.activeIdx:F.matches.length)-1,F.$digest()):13===e.which||9===e.which?F.$apply(function(){F.select(F.activeIdx)}):27===e.which&&(e.stopPropagation(),H(),F.$digest())}}),p.bind("blur",function(){D&&F.matches.length&&-1!==F.activeIdx&&!w&&(w=!0,F.$apply(function(){F.select(F.activeIdx)})),$=!1,w=!1});var G=function(e){p[0]!==e.target&&3!==e.which&&0!==F.matches.length&&(H(),o.$$phase||F.$digest())};i.bind("click",G),d.$on("$destroy",function(){i.unbind("click",G),E&&K.remove(),_.remove()});var K=e(_)(F);E?i.find("body").append(K):p.after(K)}}}]).directive("typeaheadPopup",function(){return{restrict:"EA",scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&"},replace:!0,templateUrl:function(e,t){return t.popupTemplateUrl||"template/typeahead/typeahead-popup.html"},link:function(e,t,n){e.templateUrl=n.templateUrl,e.isOpen=function(){return e.matches.length>0},e.isActive=function(t){return e.active==t},e.selectActive=function(t){e.active=t},e.selectMatch=function(t){e.select({activeIdx:t})}}}}).directive("typeaheadMatch",["$templateRequest","$compile","$parse",function(e,t,n){return{restrict:"EA",scope:{index:"=",match:"=",query:"="},link:function(a,i,r){var o=n(r.templateUrl)(a.$parent)||"template/typeahead/typeahead-match.html";e(o).then(function(e){t(e.trim())(a,function(e){i.replaceWith(e)})})}}}]).filter("typeaheadHighlight",["$sce","$injector","$log",function(e,t,n){function a(e){return e.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}function i(e){return/<.*>/g.test(e)}var r;return r=t.has("$sanitize"),function(t,o){return!r&&i(t)&&n.warn("Unsafe use of typeahead please use ngSanitize"),t=o?(""+t).replace(new RegExp(a(o),"gi"),"<strong>$&</strong>"):t,r||(t=e.trustAsHtml(t)),t}}]),angular.module("template/accordion/accordion-group.html",[]).run(["$templateCache",function(e){e.put("template/accordion/accordion-group.html",'<div class="panel {{panelClass || \'panel-default\'}}">\n  <div class="panel-heading" ng-keypress="toggleOpen($event)">\n    <h4 class="panel-title">\n      <a href tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse collapse" collapse="!isOpen">\n	  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>\n')}]),angular.module("template/accordion/accordion.html",[]).run(["$templateCache",function(e){e.put("template/accordion/accordion.html",'<div class="panel-group" ng-transclude></div>')}]),angular.module("template/alert/alert.html",[]).run(["$templateCache",function(e){e.put("template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissible\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close($event)">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("template/carousel/carousel.html",[]).run(["$templateCache",function(e){e.put("template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n</div>\n')}]),angular.module("template/carousel/slide.html",[]).run(["$templateCache",function(e){e.put("template/carousel/slide.html",'<div ng-class="{\n    \'active\': active\n  }" class="item text-center" ng-transclude></div>\n')}]),angular.module("template/datepicker/datepicker.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/datepicker.html",'<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n</div>')}]),angular.module("template/datepicker/day.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/day.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/month.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/month.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')
}]),angular.module("template/datepicker/popup.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/popup.html",'<ul class="dropdown-menu" ng-if="isOpen" style="display: block" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n	<li ng-transclude></li>\n	<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n		<span class="btn-group pull-left">\n			<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n			<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n		</span>\n		<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n	</li>\n</ul>\n')}]),angular.module("template/datepicker/year.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/year.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}">\n        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/modal/backdrop.html",[]).run(["$templateCache",function(e){e.put("template/modal/backdrop.html",'<div class="modal-backdrop"\n     modal-animation-class="fade"\n     modal-in-class="in"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("template/modal/window.html",[]).run(["$templateCache",function(e){e.put("template/modal/window.html",'<div modal-render="{{$isRendered}}" tabindex="-1" role="dialog" class="modal"\n    modal-animation-class="fade"\n    modal-in-class="in"\n	ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" ng-click="close($event)">\n    <div class="modal-dialog" ng-class="size ? \'modal-\' + size : \'\'"><div class="modal-content" modal-transclude></div></div>\n</div>\n')}]),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function(e){e.put("template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n</ul>\n')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function(e){e.put("template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)">{{::getText(\'first\')}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)">{{page.text}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)">{{::getText(\'last\')}}</a></li>\n</ul>\n')}]),angular.module("template/tooltip/tooltip-html-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-html-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-html-unsafe-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-html-unsafe-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-template-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-template-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner"\n    tooltip-template-transclude="contentExp()"\n    tooltip-template-transclude-scope="originScope()"></div>\n</div>\n')}]),angular.module("template/popover/popover-html.html",[]).run(["$templateCache",function(e){e.put("template/popover/popover-html.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind-html="contentExp()"></div>\n  </div>\n</div>\n')}]),angular.module("template/popover/popover-template.html",[]).run(["$templateCache",function(e){e.put("template/popover/popover-template.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content"\n        tooltip-template-transclude="contentExp()"\n        tooltip-template-transclude-scope="originScope()"></div>\n  </div>\n</div>\n')}]),angular.module("template/popover/popover.html",[]).run(["$templateCache",function(e){e.put("template/popover/popover.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" style="min-width: 0;" ng-transclude></div>\n')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/progress.html",'<div class="progress" ng-transclude></div>')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" style="min-width: 0;" ng-transclude></div>\n</div>\n')}]),angular.module("template/rating/rating.html",[]).run(["$templateCache",function(e){e.put("template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <span ng-repeat-start="r in range track by $index" class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')" ng-attr-title="{{r.title}}" ></i>\n</span>\n')}]),angular.module("template/tabs/tab.html",[]).run(["$templateCache",function(e){e.put("template/tabs/tab.html",'<li ng-class="{active: active, disabled: disabled}">\n  <a href ng-click="select()" tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("template/tabs/tabset.html",[]).run(["$templateCache",function(e){e.put("template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("template/timepicker/timepicker.html",[]).run(["$templateCache",function(e){e.put("template/timepicker/timepicker.html",'<table>\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group" ng-class="{\'has-error\': invalidHours}">\n        <input style="width:50px;" type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2">\n      </td>\n      <td>:</td>\n      <td class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n        <input style="width:50px;" type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2">\n      </td>\n      <td ng-show="showMeridian"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(e){e.put("template/typeahead/typeahead-match.html",'<a href tabindex="-1" ng-bind-html="match.label | typeaheadHighlight:query"></a>\n')}]),angular.module("template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(e){e.put("template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{::match.id}}">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),!angular.$$csp()&&angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'),function(){"use strict";angular.module("risevision.widget.common.tooltip",["ui.bootstrap"]).directive("rvTooltip",[function(){return{restrict:"A",link:function(e,t){t.addClass("fa"),t.addClass("fa-question-circle"),t.addClass("fa-lg")}}}])}(),"undefined"!=typeof angular&&angular.module("risevision.widget.common.storage-selector.config",[]).value("STORAGE_MODAL","https://apps.risevision.com/storage-selector.html#/?cid="),function(){"use strict";angular.module("risevision.widget.common.storage-selector",["ui.bootstrap","risevision.widget.common.storage-selector.config"]).directive("storageSelector",["$templateCache","$modal","$sce","$log","STORAGE_MODAL",function(e,t,n,a,i){return{restrict:"EA",scope:{companyId:"@",type:"@",label:"@",selected:"="},template:e.get("storage-selector.html"),link:function(e){function r(){e.storageUrl="undefined"!=typeof e.type&&""!==e.type?i+e.companyId+"&selector-type="+e.type:i+e.companyId}e.storageUrl="",e.open=function(){e.modalInstance=t.open({templateUrl:"storage.html",controller:"StorageCtrl",size:"md",backdrop:!0,resolve:{storageUrl:function(){return{url:n.trustAsResourceUrl(e.storageUrl)}}}}),e.modalInstance.result.then(function(t){e.files=t,a.info("Picked: ",t),e.$emit("picked",t,e.type)},function(){e.canceled=!0,a.info("Modal dismissed at: "+new Date)})},e.$watch("companyId",function(e){e&&r()}),e.$watch("type",function(e){e&&r()})}}}])}(),angular.module("risevision.widget.common.storage-selector").controller("StorageCtrl",["$scope","$modalInstance","storageUrl","$window","$log","STORAGE_MODAL",function(e,t,n,a,i,r){e.storageUrl=n,e.isSameOrigin=function(e){var t=document.createElement("a");return t.href=r,-1!==e.indexOf(t.host)},e.messageHandler=function(n){e.isSameOrigin(n.origin)&&(Array.isArray(n.data)?t.close(n.data):"string"==typeof n.data&&"close"===n.data&&t.dismiss("cancel"))},a.addEventListener("message",e.messageHandler)}]),function(e){try{e=angular.module("risevision.widget.common.storage-selector")}catch(t){e=angular.module("risevision.widget.common.storage-selector",[])}e.run(["$templateCache",function(e){"use strict";e.put("storage-selector.html",'<button class="btn btn-default" ng-class="{active: selected}" ng-click="open()" type="button" >\n  {{ label }}<img src="http://s3.amazonaws.com/Rise-Images/Icons/storage.png" class="storage-selector-icon" ng-class="{\'icon-right\': label}">\n</button>\n\n<script type="text/ng-template" id="storage.html">\n        <iframe class="modal-dialog" scrolling="no" marginwidth="0" src="{{ storageUrl.url }}"></iframe>\n</script>\n')}])}(),function(){"use strict";try{angular.module("risevision.common.config")}catch(e){angular.module("risevision.common.config",[])}angular.module("risevision.common.config").value("STORE_URL","https://store.risevision.com/").value("STORE_SERVER_URL","https://store-dot-rvaserver2.appspot.com/"),angular.module("risevision.widget.common.subscription-status.config",[]).value("IN_RVA_PATH","product/productId/?cid=companyId").value("ACCOUNT_PATH","account?cid=companyId").value("PATH_URL","v1/company/companyId/product/status?pc=").value("AUTH_PATH_URL","v1/widget/auth?cid=companyId&pc=")}(),function(){"use strict";angular.module("risevision.widget.common.subscription-status",["risevision.common.config","risevision.widget.common.subscription-status.config","risevision.widget.common.subscription-status.service","risevision.widget.common","risevision.common.i18n","ngSanitize","ui.bootstrap"])}(),function(){"use strict";angular.module("risevision.widget.common.subscription-status").directive("appSubscriptionStatus",["$templateCache","$modal","subscriptionStatusService",function(e,t,n){return{restrict:"AE",require:"?ngModel",scope:{productId:"@",productCode:"@",companyId:"@",productPrice:"@"},template:e.get("app-subscription-status-template.html"),link:function(e,a,i,r){function o(){e.productCode&&e.productId&&e.companyId&&n.get(e.productCode,e.companyId).then(function(t){t&&(e.subscriptionStatus=t)},function(){})}e.subscriptionStatus={status:"N/A",statusCode:"na",subscribed:!1,expiry:null},e.$watch("companyId",function(){o()}),r&&e.$watch("subscriptionStatus",function(e){r.$setViewValue(e)}),e.$watch("showStoreModal",function(n){if(n){var a=t.open({templateUrl:"store-iframe-template.html",controller:"StoreModalController",size:"lg",resolve:{productId:function(){return e.productId},companyId:function(){return e.companyId}}});a.result.then(function(){o()},function(){o()}).finally(function(){e.showStoreModal=!1})}})}}}]).directive("ngDisableRightClick",function(){return function(e,t){t.bind("contextmenu",function(t){e.$apply(function(){t.preventDefault()})})}})}(),function(){"use strict";angular.module("risevision.widget.common.subscription-status").directive("subscriptionStatus",["$rootScope","$templateCache","subscriptionStatusService","STORE_URL","ACCOUNT_PATH","IN_RVA_PATH",function(e,t,n,a,i,r){return{restrict:"AE",require:"?ngModel",scope:{productId:"@",productCode:"@",companyId:"@",expandedFormat:"@",showStoreModal:"=?"},template:t.get("subscription-status-template.html"),link:function(t,o,s,l){function c(){t.productCode&&t.productId&&t.companyId&&n.get(t.productCode,t.companyId).then(function(n){n&&(t.subscriptionStatus&&t.subscriptionStatus.status===n.status||e.$emit("subscription-status:changed",n),t.subscriptionStatus=n)},function(){})}t.subscriptionStatus={status:"N/A",statusCode:"na",subscribed:!1,expiry:null};var u=function(){t.storeAccountUrl=a+i.replace("companyId",t.companyId),t.storeUrl=a+r.replace("productId",t.productId).replace("companyId",t.companyId)};t.$watch("companyId",function(){c(),u()}),e.$on("refreshSubscriptionStatus",function(e,n){(null===n||t.subscriptionStatus.statusCode===n)&&c()}),l&&t.$watch("subscriptionStatus",function(e){l.$setViewValue(e)})}}}]).filter("to_trusted",["$sce",function(e){return function(t){return e.trustAsHtml(t)}}])}(),angular.module("risevision.widget.common.subscription-status").filter("productTrialDaysToExpiry",["$interpolate","$translate",function(e,t){var n=null,a=null;return t(["subscription-status.expires-today","subscription-status.expires-in"],{days:"{{days}}"}).then(function(t){n=e(t["subscription-status.expires-today"]),a=e(t["subscription-status.expires-in"])}),function(e){var t="";try{var i=864e5,r=new Date(e).getTime()-(new Date).getTime(),o=Math.floor(r/i),s={days:o};t=0===o?null!==n?n(s):"":o>0?null!==a?a(s):"":null!==n?n(s):""}catch(l){t=null!==n?n(s):""}return t}}]),function(){"use strict";angular.module("risevision.widget.common.subscription-status.service",["risevision.common.config","risevision.widget.common.subscription-status.config"]).service("subscriptionStatusService",["$http","$q","STORE_SERVER_URL","PATH_URL","AUTH_PATH_URL",function(e,t,n,a,i){function r(e,t){return Math.floor((t.getTime()-e.getTime())/l)}var o=["On Trial","Trial Expired","Subscribed","Suspended","Cancelled","Free","Not Subscribed","Product Not Found","Company Not Found","Error"],s=["on-trial","trial-expired","subscribed","suspended","cancelled","free","not-subscribed","product-not-found","company-not-found","error"],l=864e5,c=function(a,r){var o=t.defer(),s=n+i.replace("companyId",r)+a;return e.get(s).then(function(e){e&&e.data?o.resolve(e.data.authorized):o.resolve(!1)}),o.promise},u=function(i,l){var c=t.defer(),u=n+a.replace("companyId",l)+i;return e.get(u).then(function(e){if(e&&e.data&&e.data.length){var t=e.data[0];t.plural="";var n=o.indexOf(t.status);n>=0&&(t.statusCode=s[n]),""===t.status?(t.status="N/A",t.statusCode="na",t.subscribed=!1):t.subscribed=t.status===o[0]||t.status===o[2]||t.status===o[5]?!0:!1,"not-subscribed"===t.statusCode&&t.trialPeriod&&t.trialPeriod>0&&(t.statusCode="trial-available",t.subscribed=!0),t.expiry&&"on-trial"===t.statusCode&&(t.expiry=new Date(t.expiry),t.expiry instanceof Date&&!isNaN(t.expiry.valueOf())&&(t.expiry=r(new Date,t.expiry)),0===t.expiry?t.plural="-zero":t.expiry>1&&(t.plural="-many")),c.resolve(t)}else c.reject("No response")}),c.promise};this.get=function(e,t){return u(e,t).then(function(n){return n.subscribed===!1?c(e,t).then(function(e){return n.subscribed=e,n}):n})}}])}(),function(e){try{e=angular.module("risevision.widget.common.subscription-status")}catch(t){e=angular.module("risevision.widget.common.subscription-status",[])}e.run(["$templateCache",function(e){"use strict";e.put("app-subscription-status-template.html",'<a id="app-subscription-status" href=""\n  ng-click="showStoreModal = true" class="store-link">\n    <div class="rate">\n      <strong>${{productPrice}}</strong>\n    </div>\n    <div class="subscribe">\n      <strong ng-if="!subscriptionStatus.subscribed"><span translate="subscription-status.get-subscription"></span></strong>\n      <strong ng-if="subscriptionStatus.subscribed"><span translate="subscription-status.continue-to-app"></span></strong>\n    </div>\n</a>\n')}])}(),function(e){try{e=angular.module("risevision.widget.common.subscription-status")}catch(t){e=angular.module("risevision.widget.common.subscription-status",[])}e.run(["$templateCache",function(e){"use strict";e.put("subscription-status-template.html",'<div ng-show="!expandedFormat">\n  <h3 ng-disable-right-click>\n    <span ng-show="subscriptionStatus.statusCode !== \'not-subscribed\'" ng-bind-html="\'subscription-status.\' + subscriptionStatus.statusCode + subscriptionStatus.plural | translate:subscriptionStatus | to_trusted"></span>\n  </h3>\n  \n  <span ng-show="subscriptionStatus.statusCode === \'trial-available\'">\n    <button class="btn btn-primary btn-xs" ng-click="showStoreModal = true;">\n      <span translate="subscription-status.start-trial"></span>\n    </button>\n  </span>\n  <span ng-show="[\'on-trial\', \'trial-expired\', \'cancelled\', \'not-subscribed\'].indexOf(subscriptionStatus.statusCode) >= 0">\n    <a class="btn btn-primary btn-xs" ng-href="{{storeUrl}}" target="_blank">\n      <span translate="subscription-status.subscribe"></span>\n    </a>\n  </span>\n  <span ng-show="[\'suspended\'].indexOf(subscriptionStatus.statusCode) >= 0">\n    <a type="button" class="btn btn-primary btn-xs" ng-href="{{storeAccountUrl}}" target="_blank">\n      <span translate="subscription-status.view-account"></span>\n    </a>\n  </span>\n</div>\n\n<div ng-show="expandedFormat">\n  <div class="subscription-status trial" ng-show="subscriptionStatus.statusCode === \'on-trial\'">\n    <span ng-bind-html="\'subscription-status.expanded-\' + subscriptionStatus.statusCode + subscriptionStatus.plural | translate:subscriptionStatus | to_trusted"></span>\n    <a type="button" class="btn btn-primary add-left" ng-href="{{storeUrl}}" target="_blank">\n      <span translate="subscription-status.subscribe-now"></span>\n    </a>\n  </div>\n  <div class="subscription-status expired" ng-show="subscriptionStatus.statusCode === \'trial-expired\'">\n    <span translate="subscription-status.expanded-expired"></span>\n    <a type="button" class="btn btn-primary add-left" ng-href="{{storeUrl}}" target="_blank">\n      <span translate="subscription-status.subscribe-now"></span>\n    </a>\n  </div>\n  <div class="subscription-status cancelled" ng-show="subscriptionStatus.statusCode === \'cancelled\'">\n   <span translate="subscription-status.expanded-cancelled"></span>\n    <a type="button" class="btn btn-primary add-left" ng-href="{{storeUrl}}" target="_blank">\n      <span translate="subscription-status.subscribe-now"></span>\n    </a>\n  </div>\n  <div class="subscription-status suspended" ng-show="subscriptionStatus.statusCode === \'suspended\'">\n    <span translate="subscription-status.expanded-suspended"></span>\n    <a type="button" class="btn btn-primary add-left" ng-href="{{storeAccountUrl}}" target="_blank">\n      <span translate="subscription-status.view-invoices"></span>\n    </a>\n  </div>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.url-field",["risevision.common.i18n","risevision.widget.common.tooltip"]).directive("urlField",["$templateCache","$log",function(e,t){return{restrict:"E",require:"?ngModel",scope:{url:"=",hideLabel:"@",fileType:"@"},template:e.get("_angular/url-field/url-field.html"),link:function(e,n,a,i){function r(e,t){var n,a=e.toLowerCase();switch(t){case"image":n=[".jpg",".jpeg",".png",".bmp",".svg",".gif"];break;case"video":n=[".webm",".mp4",".ogv",".ogg"];break;default:n=[]}for(var i=0,r=n.length;r>i;i++)if(-1!==a.indexOf(n[i]))return!0;return!1}function o(){if("undefined"!==e.fileType&&"undefined"!==e.url&&"image"===e.fileType){var t=new Image;t.onload=function(){e.valid=!0,e.$apply()},t.onerror=function(){e.valid=!1,e.invalidType=e.fileType,e.$apply()},t.src=e.url}}function s(t){var n,a;return n=/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/i,-1===t.indexOf("://")&&(t="http://"+t),a=n.test(t),a&&"undefined"!=typeof e.fileType?(a=r(t,e.fileType),a||(e.invalidType=e.fileType)):e.invalidType="url",a&&o(),a}e.doValidation=!0,e.forcedValid=!1,e.valid=!0,e.invalidType="url",e.allowInitEmpty="undefined"!=typeof a.initEmpty,e.blur=function(){e.$emit("urlFieldBlur")},e.$watch("url",function(t){"undefined"!=typeof t&&null!==t&&(""!==t&&e.allowInitEmpty&&(e.allowInitEmpty=!1),e.doValidation&&!e.allowInitEmpty&&(e.valid=s(e.url)))}),e.$watch("valid",function(e){i&&(t.info("Calling $setValidity() on parent controller"),i.$setValidity("valid",e))}),e.$watch("doValidation",function(t){"undefined"!=typeof e.url&&(t?(e.forcedValid=!1,e.allowInitEmpty||(e.valid=s(e.url))):(e.forcedValid=!0,e.valid=!0))})}}}])}(),function(e){try{e=angular.module("risevision.widget.common.url-field")}catch(t){e=angular.module("risevision.widget.common.url-field",[])}e.run(["$templateCache",function(e){"use strict";e.put("_angular/url-field/url-field.html",'<div class="form-group" >\n  <label ng-if="!hideLabel">{{ "url.label" | translate }}</label>\n  <div>\n    <input name="url" type="text" ng-model="url" ng-blur="blur()" class="form-control" placeholder="http://">\n  </div>\n  <p ng-if="!valid && invalidType === \'url\'" class="text-danger">{{ "url.errors.url" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'image\'" class="text-danger">{{ "url.errors.image" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'video\'" class="text-danger">{{ "url.errors.video" | translate }}</p>\n  <div class="checkbox" ng-show="forcedValid || !valid">\n    <label>\n      <input name="validate-url" ng-click="doValidation = !doValidation" type="checkbox"\n             value="validate-url"> {{"url.validate.label" | translate}}\n    </label>\n  </div>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.file-selector",["risevision.common.i18n","risevision.widget.common.storage-selector","risevision.widget.common.url-field","risevision.widget.common.subscription-status"]).directive("fileSelector",["$templateCache","$log","$window","$rootScope",function(e,t,n,a){return{restrict:"E",require:"?ngModel",scope:{title:"@",fileLabel:"@",folderLabel:"@",companyId:"@",fileType:"@",selector:"="},template:e.get("_angular/file-selector/file-selector.html"),link:function(e,t,i,r){function o(e,t){var n,a=e.toLowerCase();switch(t){case"image":n=[".jpg",".jpeg",".png",".bmp",".svg",".gif",".webp"];break;case"video":n=[".webm",".mp4",".ogv",".ogg"];break;default:n=[]}for(var i=0,r=n.length;r>i;i++)if(-1!==a.indexOf(n[i]))return!0;return!1}function s(t){switch(t){case"single-file":e.fileBtnSelected=!0,e.folderBtnSelected=!1,e.customBtnSelected=!1;break;case"single-folder":e.fileBtnSelected=!1,e.folderBtnSelected=!0,e.customBtnSelected=!1;break;case"custom":e.fileBtnSelected=!1,e.folderBtnSelected=!1,e.customBtnSelected=!0;break;default:e.fileBtnSelected=!1,e.folderBtnSelected=!1,e.customBtnSelected=!1}}function l(e,t){var n,a,i,r,o,s,l;if("single-file"===t)n=e.split("storage.googleapis.com/risemedialibrary-")[1],n=decodeURIComponent(n.slice(n.indexOf("/")+1)),a=n.split("/"),o=a.pop(),s=a.length>0?a.join("/"):"",""!==s&&(s+="/"),l=s+o;else if("single-folder"===t){i=e.split("?");for(var c=0;c<i.length;c++)if(r=i[c].split("="),"prefix"===r[0]&&"undefined"!=typeof r[1]&&""!==r[1]){l=decodeURIComponent(r[1]);break}}return l}e.defaultSetting={selection:"",storageName:"",url:""},s(),e.selectorValid=!1,e.customInit=!1,e.isSubscribed=!0,e.hideSubscription="undefined"!=typeof i.hideSubscription,e.subscriptionOff=!0,e.defaults=function(e){if(e)for(var t=1,n=arguments.length;n>t;t++){var a=arguments[t];for(var i in a)void 0===e[i]&&(e[i]=a[i])}return e},e.onCustomBtnHandler=function(){e.selector.selection="custom",e.selector.url="",e.selector.storageName=""},e.previewFile=function(){n.open(e.selector.url,"_blank")},e.$on("picked",function(t,n,a){e.selector.selection=a,e.selector.storageName=l(n[0],e.selector.selection),e.selector.url=n[0]}),e.$watch("selectorValid",function(e){r&&r.$setValidity("selectorValid",e)}),e.$watch("selector",function(t){e.defaults(t,e.defaultSetting)}),e.$watch("selector.selection",function(t){"undefined"!=typeof t&&(s(t),e.subscriptionOff=""===t||"custom"===t,"single-folder"===t?e.selectorValid=!0:"custom"===t&&(e.customInit=!0,e.selectorValid=!1),e.subscriptionOff||e.hideSubscription||(e.isSubscribed=!1,a.$broadcast("refreshSubscriptionStatus",null)),a.$broadcast("fileSelectorClick",t))}),e.$watch("selector.url",function(t){"undefined"!=typeof t&&null!==t&&("single-file"===e.selector.selection&&"undefined"!=typeof e.fileType?e.selectorValid=o(t,e.fileType):"custom"===e.selector.selection&&e.customInit&&""!==t&&(e.customInit=!1,e.selectorValid=!0))}),e.$watch("subscribed",function(t){"undefined"!=typeof t&&"na"!==t.statusCode&&(e.isSubscribed=t.subscribed)})}}}])}(),function(e){try{e=angular.module("risevision.widget.common.file-selector")}catch(t){e=angular.module("risevision.widget.common.file-selector",[])}e.run(["$templateCache",function(e){"use strict";e.put("_angular/file-selector/file-selector.html",'<div class="form-group file-selector">\n  <label ng-if="title" class="control-label remove-bottom">{{ title }}</label>\n\n  <div class="row half-top half-bottom">\n    <div class="col-md-12">\n      <!-- Storage Single File - Button -->\n      <storage-selector selected="fileBtnSelected"\n                        company-id="{{companyId}}"\n                        type="single-file"\n                        label="{{ fileLabel }}"></storage-selector>\n      <!-- Storage Single Folder - Button -->\n      <storage-selector ng-if="folderLabel"\n                        selected="folderBtnSelected"\n                        company-id="{{companyId}}"\n                        type="single-folder"\n                        label="{{ folderLabel }}"></storage-selector>\n      <!-- Custom File - Button -->\n      <button name="customBtn" type="button" class="btn btn-default"\n              ng-class="{active: customBtnSelected}"\n              ng-click="onCustomBtnHandler()">{{ \'file-selector.buttons.custom\' | translate }}\n        <i class="fa fa-link fa-large"></i></button>\n    </div>\n  </div>\n\n  <!-- Storage Single File - Input -->\n  <div class="form-group" ng-if="selector.selection === \'single-file\'">\n    <div class="input-group custom-addon">\n      <input name="storage-file-name" type="text" class="form-control" ng-model="selector.storageName" readonly>\n      <span class="input-group-addon">\n        <button name="previewBtn" class="btn btn-default" ng-click="previewFile()">{{ \'file-selector.buttons.preview\' | translate }}\n          <img src="http://s3.amazonaws.com/Rise-Images/Icons/newtab-icon.png" class="storage-selector-icon icon-right">\n        </button>\n      </span>\n    </div>\n    <p ng-if="!selectorValid && fileType === \'image\'" class="text-danger">{{ "file-selector.errors.storage.image" | translate }}</p>\n    <p ng-if="!selectorValid && fileType === \'video\'" class="text-danger">{{ "file-selector.errors.storage.video" | translate }}</p>\n  </div>\n\n  <!-- Storage Single Folder - Input -->\n  <div ng-if="selector.selection === \'single-folder\'">\n    <input name="storage-folder-name" type="text" class="form-control" ng-model="selector.storageName" readonly>\n  </div>\n\n  <!-- Custom File - Input -->\n  <div ng-if="selector.selection === \'custom\'">\n    <url-field id="customUrl" name="customUrl" url="selector.url"\n               file-type="{{fileType}}"\n               hide-label="true"\n               ng-model="customurlentry" valid init-empty></url-field>\n  </div>\n\n  <!-- Storage Subscription Status -->\n  <div ng-if="!isSubscribed && !hideSubscription && !subscriptionOff" subscription-status expanded-format="true"\n       product-id="24" product-code="b0cba08a4baa0c62b8cdc621b6f6a124f89a03db" company-id="{{companyId}}"\n       ng-model="$parent.subscribed">\n  </div>\n\n</div>\n')
}])}(),function(){"use strict";angular.module("risevision.widget.common.position-setting",["risevision.common.i18n"]).directive("positionSetting",["$templateCache","$log",function(e){return{restrict:"E",scope:{position:"=",hideLabel:"@",parentContainerClass:"=",containerClass:"="},template:e.get("_angular/position-setting/position-setting.html"),link:function(e){e.$watch("position",function(t){"undefined"==typeof t&&(e.position="top-left")})}}}])}(),function(e){try{e=angular.module("risevision.widget.common.position-setting")}catch(t){e=angular.module("risevision.widget.common.position-setting",[])}e.run(["$templateCache",function(e){"use strict";e.put("_angular/position-setting/position-setting.html",'<div class="{{parentContainerClass || \'row\'}}">\n  <div class="{{containerClass || \'col-md-4\'}}">\n    <label ng-if="!hideLabel"> {{\'widgets.alignment\' | translate}}</label>\n    <select name="position" ng-model="position" class="form-control">\n      <option value="top-left">{{\'position.top.left\' | translate}}</option>\n      <option value="top-center">{{\'position.top.center\' | translate}}</option>\n      <option value="top-right">{{\'position.top.right\' | translate}}</option>\n      <option value="middle-left">{{\'position.middle.left\' | translate}}</option>\n      <option value="middle-center">{{\'position.middle.center\' | translate}}</option>\n      <option value="middle-right">{{\'position.middle.right\' | translate}}</option>\n      <option value="bottom-left">{{\'position.bottom.left\' | translate}}</option>\n      <option value="bottom-center">{{\'position.bottom.center\' | translate}}</option>\n      <option value="bottom-right">{{\'position.bottom.right\' | translate}}</option>\n    </select>\n  </div>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.widget-button-toolbar",["risevision.common.i18n"]).directive("widgetButtonToolbar",["$templateCache",function(e){return{restrict:"E",scope:{save:"&",cancel:"&",disableSave:"&"},template:e.get("_angular/widget-button-toolbar/widget-button-toolbar.html")}}])}(),function(e){try{e=angular.module("risevision.widget.common.widget-button-toolbar")}catch(t){e=angular.module("risevision.widget.common.widget-button-toolbar",[])}e.run(["$templateCache",function(e){"use strict";e.put("_angular/widget-button-toolbar/widget-button-toolbar.html",'<div class="pull-right">\n  <button id="save" class="btn btn-primary btn-fixed-width" type="button" ng-click="save()" ng-disabled="disableSave()">\n    <span>{{"common.save" | translate}}</span>\n    <i class="fa fa-white fa-check icon-right"></i>\n  </button>\n  <button id="cancel" class="btn btn-default btn-fixed-width" type="button" ng-click="cancel()">\n    <span>{{"common.cancel" | translate}}</span>\n    <i class="fa fa-white fa-times icon-right"></i>\n  </button>\n</div>\n')}])}(),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={STORAGE_ENV:"prod"};angular.module("risevision.widget.image.settings",["risevision.common.i18n","risevision.widget.common","risevision.widget.common.widget-button-toolbar","risevision.widget.common.position-setting","risevision.widget.common.tooltip","risevision.widget.common.file-selector"]),angular.module("risevision.widget.common",[]),angular.module("risevision.widget.common").controller("settingsController",["$scope","settingsSaver","settingsGetter","settingsCloser",function(e,t,n,a){e.settings={params:{},additionalParams:{}},e.alerts=[],e.getAdditionalParam=function(t,n){var a=e.settings.additionalParams[t];return angular.isUndefined(a)?n:a},e.setAdditionalParam=function(t,n){e.settings.additionalParams[t]=n},e.loadAdditionalParams=function(){n.getAdditionalParams().then(function(t){e.settings.additionalParams=t,e.$broadcast("loadAdditionalParams",t)},function(e){alert(e)})},e.setAdditionalParams=function(t,n){e.settings.additionalParams[t]=n},e.saveSettings=function(){e.alerts=[],e.$broadcast("collectAdditionalParams"),t.saveSettings(e.settings).then(function(){},function(t){e.alerts=t.alerts})},e.closeSettings=function(){a.closeSettings().then(function(){},function(t){e.alerts=t.alerts})},e.settings.params=n.getParams(),e.loadAdditionalParams()}]).directive("scrollOnAlerts",function(){return{restrict:"A",scope:!1,link:function(e,t){e.$watchCollection("alerts",function(e,n){e.length>0&&0===n.length&&$("body").animate({scrollTop:t.offset().top},"fast")})}}}),angular.module("risevision.widget.common").constant("STORAGE_FILE_URL_BASE","storage.googleapis.com/risemedialibrary-").constant("STORAGE_FOLDER_URL_BASE","googleapis.com/storage/").factory("commonSettings",["$log","STORAGE_FILE_URL_BASE","STORAGE_FOLDER_URL_BASE",function(e,t,n){var a={getStorageUrlData:function(e){function a(e){return-1!==e.indexOf(t)?"file":-1!==e.indexOf(n)?"folder":null}function i(e){var t=e.split("risemedialibrary-");return t[1].slice(0,t[1].indexOf("/"))}var r,o,s,l,c={};if("file"===a(e))r=e.split(t)[1],r=decodeURIComponent(r.slice(r.indexOf("/")+1)),o=r.split("/"),c.companyId=i(e),c.fileName=o.pop(),c.folder=o.length>0?o.join("/"):"",""!==c.folder&&(c.folder+="/");else if("folder"===a(e)){s=e.split("?");for(var u=0;u<s.length;u++)if(l=s[u].split("="),"prefix"===l[0]&&"undefined"!=typeof l[1]&&""!==l[1]){c.companyId=i(e),c.folder=decodeURIComponent(l[1]),c.fileName="";break}}return c}};return a}]),angular.module("risevision.widget.common").factory("gadgetsApi",["$window",function(e){return e.gadgets}]),angular.module("risevision.widget.common").factory("googleFontLoader",["$http","angularLoad",function(e,t){function n(){for(var e="",n="",a="",r=[],o=!1,s=",sans-serif;",l="//fonts.googleapis.com/css?family=",c=["Buda","Coda Caption","Open Sans Condensed","UnifrakturCook","Molle"],u=0;u<i.length;u++)e=i[u],-1===c.indexOf(e)&&(a=l+e,t.loadCSS(a),r.push(a),/\s/.test(e)&&(o=!0),n+=o?e+"='"+e+"'"+s:e+"="+e+s);return{fonts:n,urls:r}}var a={},i=[];return a.getGoogleFonts=function(){return 0===i.length?e.get("https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyBXxVK_IOV7LNQMuVVo_l7ZvN53ejN86zY&sort=alpha",{cache:!0}).then(function(e){if(e.data&&e.data.items){for(var t=0,a=e.data.items.length;a>t;t++)i.push(e.data.items[t].family);return n()}}):n()},a.getFontsUsed=function(e){var t=[];return angular.forEach(i,function(n){-1!==e.indexOf(n)&&t.push(n)}),t},a}]),angular.module("risevision.widget.common").service("i18nLoader",["$window","$q",function(e,t){var n=t.defer();e.i18n.init({fallbackLng:"en",resGetPath:"locales/__ns_____lng__.json"},function(){n.resolve(e.i18n)}),this.get=function(){return n.promise}}]),angular.module("risevision.widget.common").factory("imageValidator",["$q",function(e){var t={isImage:function(t){var n=e.defer(),a=new Image;return a.onload=function(){n.resolve(!0)},a.onerror=function(){n.resolve(!1)},a.src=t,n.promise}};return t}]),angular.module("risevision.widget.common").service("settingsSaver",["$q","$log","gadgetsApi","settingsParser",function(e,t,n,a){function i(e){var t=angular.copy(e);return delete t.params.id,delete t.params.companyId,delete t.params.rsW,delete t.params.rsH,t}this.saveSettings=function(r,o){var s=e.defer(),l=[],c="";r=i(r),o&&(l=o(r)),l.length>0&&(t.debug("Validation failed.",l),s.reject({alerts:l})),r.params.hasOwnProperty("layoutURL")&&(c+=r.params.layoutURL+"?",delete r.params.layoutURL),c+=a.encodeParams(r.params);var u=a.encodeAdditionalParams(r.additionalParams);return n.rpc.call("","rscmd_saveSettings",function(e){t.debug("encoded settings",JSON.stringify(e)),t.debug("Settings saved. ",r),s.resolve(e)},{params:c,additionalParams:u}),s.promise}}]).service("settingsGetter",["$q","gadgetsApi","$log","settingsParser","$window","defaultSettings",function(e,t,n,a,i,r){this.getAdditionalParams=function(){var i=e.defer(),o=r.additionalParams||{};return t.rpc.call("","rscmd_getAdditionalParams",function(e){e=e?a.parseAdditionalParams(e):{},n.debug("getAdditionalParams returns ",e),i.resolve($.extend(!0,o,e))}),i.promise},this.getParams=function(){var e=r.params||{};return angular.extend(e,a.parseParams(i.location.search))}}]).service("settingsParser",[function(){function e(e){return 0===e.indexOf("up_")?e.slice(3):null}this.parseAdditionalParams=function(e){return e?JSON.parse(e):{}},this.encodeAdditionalParams=function(e){return JSON.stringify(e)},this.encodeParams=function(e){var t=[];for(var n in e)if(e.hasOwnProperty(n)){var a;a="object"==typeof e[n]?JSON.stringify(e[n]):e[n],t.push("up_"+encodeURIComponent(n)+"="+encodeURIComponent(a))}return t.join("&")},this.parseParams=function(t){"?"===t[0]&&(t=t.slice(1));for(var n={},a=t.split("&"),i=0;i<a.length;i++){var r=a[i].split("="),o=e(decodeURIComponent(r[0]));if(o)try{n[o]=JSON.parse(decodeURIComponent(r[1]))}catch(s){n[o]=decodeURIComponent(r[1])}}return n}}]).service("settingsCloser",["$q","$log","gadgetsApi",function(e,t,n){this.closeSettings=function(){var t=e.defer();return n.rpc.call("","rscmd_closeSettings",function(){t.resolve(!0)}),t.promise}}]).value("defaultSettings",{}),function(e){"use strict";e.module("risevision.widget.common.visualization",[]).factory("visualizationApi",["$q","$window",function(e,t){var n,a=e.defer(),i={get:function(){return n||(n=a.promise,t.google.visualization?a.resolve(t.google.visualization):t.google.setOnLoadCallback(function(){a.resolve(t.google.visualization)})),n}};return i}])}(angular),angular.module("risevision.widget.image.settings").controller("imageSettingsController",["$scope","$rootScope","$q","$log","commonSettings",function(e,t,n,a,i){e.isFolder=!1,e.$on("fileSelectorClick",function(t,n){e.isFolder="single-folder"===n?!0:!1}),e.$watch("settings.additionalParams.selector.url",function(t){"undefined"!=typeof t&&""!==t&&(e.settings.additionalParams.storage=i.getStorageUrlData(t))}),e.$watch("settings.additionalParams.resume",function(t){"undefined"==typeof t&&(e.settings.additionalParams.resume=!0)}),e.$watch("settings.additionalParams.url",function(t){var n={};"undefined"!=typeof t&&""!==t&&(n=i.getStorageUrlData(t),e.settings.additionalParams.selector=0!==Object.keys(n).length?{selection:"single-file",storageName:n.folder+n.fileName,url:t}:{selection:"custom",storageName:"",url:t},e.settings.additionalParams.url="")})}]).value("defaultSettings",{params:{},additionalParams:{selector:{},storage:{},resume:!0,scaleToFit:!0,position:"middle-center",duration:10,pause:10,autoHide:!1,url:"",background:{}}});
//# sourceMappingURL=data:application/json;base64,
