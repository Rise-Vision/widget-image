angular.module("pascalprecht.translate",["ng"]).run(["$translate",function(e){var t=e.storageKey(),n=e.storage(),a=function(){var a=e.preferredLanguage();angular.isString(a)?e.use(a):n.put(t,e.use())};n?n.get(t)?e.use(n.get(t))["catch"](a):a():angular.isString(e.preferredLanguage())&&e.use(e.preferredLanguage())}]),angular.module("pascalprecht.translate").provider("$translate",["$STORAGE_KEY",function(e){var t,n,a,i,r,o,s,l,c,u,d,p,g,f,m,h={},v=[],b=e,y=[],$=!1,w="translate-cloak",k=!1,x=".",S="2.5.2",C=function(){var e,t,n=window.navigator,a=["language","browserLanguage","systemLanguage","userLanguage"];if(angular.isArray(n.languages))for(e=0;e<n.languages.length;e++)if(t=n.languages[e],t&&t.length)return t;for(e=0;e<a.length;e++)if(t=n[a[e]],t&&t.length)return t;return null};C.displayName="angular-translate/service: getFirstBrowserLanguage";var D=function(){return(C()||"").split("-").join("_")};D.displayName="angular-translate/service: getLocale";var T=function(e,t){for(var n=0,a=e.length;a>n;n++)if(e[n]===t)return n;return-1},M=function(){return this.replace(/^\s+|\s+$/g,"")},E=function(e){for(var t=[],a=angular.lowercase(e),i=0,r=v.length;r>i;i++)t.push(angular.lowercase(v[i]));if(T(t,a)>-1)return e;if(n){var o;for(var s in n){var l=!1,c=Object.prototype.hasOwnProperty.call(n,s)&&angular.lowercase(s)===angular.lowercase(e);if("*"===s.slice(-1)&&(l=s.slice(0,-1)===e.slice(0,s.length-1)),(c||l)&&(o=n[s],T(t,angular.lowercase(o))>-1))return o}}var u=e.split("_");return u.length>1&&T(t,angular.lowercase(u[0]))>-1?u[0]:e},O=function(e,t){if(!e&&!t)return h;if(e&&!t){if(angular.isString(e))return h[e]}else angular.isObject(h[e])||(h[e]={}),angular.extend(h[e],A(t));return this};this.translations=O,this.cloakClassName=function(e){return e?(w=e,this):w};var A=function(e,t,n,a){var i,r,o,s;t||(t=[]),n||(n={});for(i in e)Object.prototype.hasOwnProperty.call(e,i)&&(s=e[i],angular.isObject(s)?A(s,t.concat(i),n,i):(r=t.length?""+t.join(x)+x+i:i,t.length&&i===a&&(o=""+t.join(x),n[o]="@:"+r),n[r]=s));return n};this.addInterpolation=function(e){return y.push(e),this},this.useMessageFormatInterpolation=function(){return this.useInterpolation("$translateMessageFormatInterpolation")},this.useInterpolation=function(e){return u=e,this},this.useSanitizeValueStrategy=function(e){return $=e,this},this.preferredLanguage=function(e){return I(e),this};var I=function(e){return e&&(t=e),t};this.translationNotFoundIndicator=function(e){return this.translationNotFoundIndicatorLeft(e),this.translationNotFoundIndicatorRight(e),this},this.translationNotFoundIndicatorLeft=function(e){return e?(g=e,this):g},this.translationNotFoundIndicatorRight=function(e){return e?(f=e,this):f},this.fallbackLanguage=function(e){return P(e),this};var P=function(e){return e?(angular.isString(e)?(i=!0,a=[e]):angular.isArray(e)&&(i=!1,a=e),angular.isString(t)&&T(a,t)<0&&a.push(t),this):i?a[0]:a};this.use=function(e){if(e){if(!h[e]&&!d)throw new Error("$translateProvider couldn't find translationTable for langKey: '"+e+"'");return r=e,this}return r};var L=function(e){return e?(b=e,void 0):l?l+b:b};this.storageKey=L,this.useUrlLoader=function(e,t){return this.useLoader("$translateUrlLoader",angular.extend({url:e},t))},this.useStaticFilesLoader=function(e){return this.useLoader("$translateStaticFilesLoader",e)},this.useLoader=function(e,t){return d=e,p=t||{},this},this.useLocalStorage=function(){return this.useStorage("$translateLocalStorage")},this.useCookieStorage=function(){return this.useStorage("$translateCookieStorage")},this.useStorage=function(e){return s=e,this},this.storagePrefix=function(e){return e?(l=e,this):e},this.useMissingTranslationHandlerLog=function(){return this.useMissingTranslationHandler("$translateMissingTranslationHandlerLog")},this.useMissingTranslationHandler=function(e){return c=e,this},this.usePostCompiling=function(e){return k=!!e,this},this.determinePreferredLanguage=function(e){var n=e&&angular.isFunction(e)?e():D();return t=v.length?E(n):n,this},this.registerAvailableLanguageKeys=function(e,t){return e?(v=e,t&&(n=t),this):v},this.useLoaderCache=function(e){return e===!1?m=void 0:e===!0?m=!0:"undefined"==typeof e?m="$translationCache":e&&(m=e),this},this.$get=["$log","$injector","$rootScope","$q",function(e,n,l,v){var x,C,D,_=n.get(u||"$translateDefaultInterpolation"),V=!1,U={},F={},R=function(e,n,i){if(angular.isArray(e)){var o=function(e){for(var t={},a=[],r=function(e){var a=v.defer(),r=function(n){t[e]=n,a.resolve([e,n])};return R(e,n,i).then(r,r),a.promise},o=0,s=e.length;s>o;o++)a.push(r(e[o]));return v.all(a).then(function(){return t})};return o(e)}var l=v.defer();e&&(e=M.apply(e));var c=function(){var e=t?F[t]:F[r];if(C=0,s&&!e){var n=x.get(b);if(e=F[n],a&&a.length){var i=T(a,n);C=0===i?1:0,T(a,t)<0&&a.push(t)}}return e}();return c?c.then(function(){J(e,n,i).then(l.resolve,l.reject)},l.reject):J(e,n,i).then(l.resolve,l.reject),l.promise},N=function(e){return g&&(e=[g,e].join(" ")),f&&(e=[e,f].join(" ")),e},q=function(e){r=e,l.$emit("$translateChangeSuccess",{language:e}),s&&x.put(R.storageKey(),r),_.setLocale(r),angular.forEach(U,function(e,t){U[t].setLocale(r)}),l.$emit("$translateChangeEnd",{language:e})},H=function(e){if(!e)throw"No language key specified for loading.";var t=v.defer();l.$emit("$translateLoadingStart",{language:e}),V=!0;var a=m;"string"==typeof a&&(a=n.get(a));var i=angular.extend({},p,{key:e,$http:angular.extend({},{cache:a},p.$http)});return n.get(d)(i).then(function(n){var a={};l.$emit("$translateLoadingSuccess",{language:e}),angular.isArray(n)?angular.forEach(n,function(e){angular.extend(a,A(e))}):angular.extend(a,A(n)),V=!1,t.resolve({key:e,table:a}),l.$emit("$translateLoadingEnd",{language:e})},function(e){l.$emit("$translateLoadingError",{language:e}),t.reject(e),l.$emit("$translateLoadingEnd",{language:e})}),t.promise};if(s&&(x=n.get(s),!x.get||!x.put))throw new Error("Couldn't use storage '"+s+"', missing get() or put() method!");angular.isFunction(_.useSanitizeValueStrategy)&&_.useSanitizeValueStrategy($),y.length&&angular.forEach(y,function(e){var a=n.get(e);a.setLocale(t||r),angular.isFunction(a.useSanitizeValueStrategy)&&a.useSanitizeValueStrategy($),U[a.getInterpolationIdentifier()]=a});var j=function(e){var t=v.defer();return Object.prototype.hasOwnProperty.call(h,e)?t.resolve(h[e]):F[e]?F[e].then(function(e){O(e.key,e.table),t.resolve(e.table)},t.reject):t.reject(),t.promise},B=function(e,t,n,a){var i=v.defer();return j(e).then(function(o){Object.prototype.hasOwnProperty.call(o,t)?(a.setLocale(e),i.resolve(a.interpolate(o[t],n)),a.setLocale(r)):i.reject()},i.reject),i.promise},z=function(e,t,n,a){var i,o=h[e];return o&&Object.prototype.hasOwnProperty.call(o,t)&&(a.setLocale(e),i=a.interpolate(o[t],n),a.setLocale(r)),i},Y=function(e){if(c){var t=n.get(c)(e,r);return void 0!==t?t:e}return e},G=function(e,t,n,i){var r=v.defer();if(e<a.length){var o=a[e];B(o,t,n,i).then(r.resolve,function(){G(e+1,t,n,i).then(r.resolve)})}else r.resolve(Y(t));return r.promise},W=function(e,t,n,i){var r;if(e<a.length){var o=a[e];r=z(o,t,n,i),r||(r=W(e+1,t,n,i))}return r},K=function(e,t,n){return G(D>0?D:C,e,t,n)},X=function(e,t,n){return W(D>0?D:C,e,t,n)},J=function(e,t,n){var i=v.defer(),o=r?h[r]:h,s=n?U[n]:_;if(o&&Object.prototype.hasOwnProperty.call(o,e)){var l=o[e];"@:"===l.substr(0,2)?R(l.substr(2),t,n).then(i.resolve,i.reject):i.resolve(s.interpolate(l,t))}else{var u;c&&!V&&(u=Y(e)),r&&a&&a.length?K(e,t,s).then(function(e){i.resolve(e)},function(e){i.reject(N(e))}):c&&!V&&u?i.resolve(u):i.reject(N(e))}return i.promise},Z=function(e,t,n){var i,o=r?h[r]:h,s=n?U[n]:_;if(o&&Object.prototype.hasOwnProperty.call(o,e)){var l=o[e];i="@:"===l.substr(0,2)?Z(l.substr(2),t,n):s.interpolate(l,t)}else{var u;c&&!V&&(u=Y(e)),r&&a&&a.length?(C=0,i=X(e,t,s)):i=c&&!V&&u?u:N(e)}return i};if(R.preferredLanguage=function(e){return e&&I(e),t},R.cloakClassName=function(){return w},R.fallbackLanguage=function(e){if(void 0!==e&&null!==e){if(P(e),d&&a&&a.length)for(var t=0,n=a.length;n>t;t++)F[a[t]]||(F[a[t]]=H(a[t]));R.use(R.use())}return i?a[0]:a},R.useFallbackLanguage=function(e){if(void 0!==e&&null!==e)if(e){var t=T(a,e);t>-1&&(D=t)}else D=0},R.proposedLanguage=function(){return o},R.storage=function(){return x},R.use=function(e){if(!e)return r;var t=v.defer();l.$emit("$translateChangeStart",{language:e});var n=E(e);return n&&(e=n),h[e]||!d||F[e]?(t.resolve(e),q(e)):(o=e,F[e]=H(e).then(function(n){return O(n.key,n.table),t.resolve(n.key),q(n.key),o===e&&(o=void 0),n},function(e){o===e&&(o=void 0),l.$emit("$translateChangeError",{language:e}),t.reject(e),l.$emit("$translateChangeEnd",{language:e})})),t.promise},R.storageKey=function(){return L()},R.isPostCompilingEnabled=function(){return k},R.refresh=function(e){function t(){i.resolve(),l.$emit("$translateRefreshEnd",{language:e})}function n(){i.reject(),l.$emit("$translateRefreshEnd",{language:e})}if(!d)throw new Error("Couldn't refresh translation table, no loader registered!");var i=v.defer();if(l.$emit("$translateRefreshStart",{language:e}),e)h[e]?H(e).then(function(n){O(n.key,n.table),e===r&&q(r),t()},n):n();else{var o=[],s={};if(a&&a.length)for(var c=0,u=a.length;u>c;c++)o.push(H(a[c])),s[a[c]]=!0;r&&!s[r]&&o.push(H(r)),v.all(o).then(function(e){angular.forEach(e,function(e){h[e.key]&&delete h[e.key],O(e.key,e.table)}),r&&q(r),t()})}return i.promise},R.instant=function(e,n,i){if(null===e||angular.isUndefined(e))return e;if(angular.isArray(e)){for(var o={},s=0,l=e.length;l>s;s++)o[e[s]]=R.instant(e[s],n,i);return o}if(angular.isString(e)&&e.length<1)return e;e&&(e=M.apply(e));var u,d=[];t&&d.push(t),r&&d.push(r),a&&a.length&&(d=d.concat(a));for(var p=0,g=d.length;g>p;p++){var f=d[p];if(h[f]&&"undefined"!=typeof h[f][e]&&(u=Z(e,n,i)),"undefined"!=typeof u)break}return u||""===u||(u=_.interpolate(e,n),c&&!V&&(u=Y(e))),u},R.versionInfo=function(){return S},R.loaderCache=function(){return m},d&&(angular.equals(h,{})&&R.use(R.use()),a&&a.length))for(var Q=function(e){return O(e.key,e.table),l.$emit("$translateChangeEnd",{language:e.key}),e},et=0,tt=a.length;tt>et;et++)F[a[et]]=H(a[et]).then(Q);return R}]}]),angular.module("pascalprecht.translate").factory("$translateDefaultInterpolation",["$interpolate",function(e){var t,n={},a="default",i=null,r={escaped:function(e){var t={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=angular.element("<div></div>").text(e[n]).html());return t}},o=function(e){var t;return t=angular.isFunction(r[i])?r[i](e):e};return n.setLocale=function(e){t=e},n.getInterpolationIdentifier=function(){return a},n.useSanitizeValueStrategy=function(e){return i=e,this},n.interpolate=function(t,n){return i&&(n=o(n)),e(t)(n||{})},n}]),angular.module("pascalprecht.translate").constant("$STORAGE_KEY","NG_TRANSLATE_LANG_KEY"),angular.module("pascalprecht.translate").directive("translate",["$translate","$q","$interpolate","$compile","$parse","$rootScope",function(e,t,n,a,i,r){return{restrict:"AE",scope:!0,compile:function(t,o){var s=o.translateValues?o.translateValues:void 0,l=o.translateInterpolation?o.translateInterpolation:void 0,c=t[0].outerHTML.match(/translate-value-+/i),u="^(.*)("+n.startSymbol()+".*"+n.endSymbol()+")(.*)",d="^(.*)"+n.startSymbol()+"(.*)"+n.endSymbol()+"(.*)";return function(t,p,g){t.interpolateParams={},t.preText="",t.postText="";var f={},m=function(e){if(angular.equals(e,"")||!angular.isDefined(e)){var a=p.text().match(u);angular.isArray(a)?(t.preText=a[1],t.postText=a[3],f.translate=n(a[2])(t.$parent),watcherMatches=p.text().match(d),angular.isArray(watcherMatches)&&watcherMatches[2]&&watcherMatches[2].length&&t.$watch(watcherMatches[2],function(e){f.translate=e,$()})):f.translate=p.text().replace(/^\s+|\s+$/g,"")}else f.translate=e;$()},h=function(e){g.$observe(e,function(t){f[e]=t,$()})};g.$observe("translate",function(e){m(e)});for(var v in g)g.hasOwnProperty(v)&&"translateAttr"===v.substr(0,13)&&h(v);if(g.$observe("translateDefault",function(e){t.defaultText=e}),s&&g.$observe("translateValues",function(e){e&&t.$parent.$watch(function(){angular.extend(t.interpolateParams,i(e)(t.$parent))})}),c){var b=function(e){g.$observe(e,function(n){var a=angular.lowercase(e.substr(14,1))+e.substr(15);t.interpolateParams[a]=n})};for(var y in g)Object.prototype.hasOwnProperty.call(g,y)&&"translateValue"===y.substr(0,14)&&"translateValues"!==y&&b(y)}var $=function(){for(var e in f)f.hasOwnProperty(e)&&f[e]&&w(e,f[e],t,t.interpolateParams)},w=function(t,n,a,i){e(n,i,l).then(function(e){k(e,a,!0,t)},function(e){k(e,a,!1,t)})},k=function(t,n,i,r){if("translate"===r){i||"undefined"==typeof n.defaultText||(t=n.defaultText),p.html(n.preText+t+n.postText);var s=e.isPostCompilingEnabled(),l="undefined"!=typeof o.translateCompile,c=l&&"false"!==o.translateCompile;(s&&!l||c)&&a(p.contents())(n)}else{i||"undefined"==typeof n.defaultText||(t=n.defaultText);var u=g.$attr[r].substr(15);p.attr(u,t)}};t.$watch("interpolateParams",$,!0);var x=r.$on("$translateChangeSuccess",$);p.text().length&&m(""),$(),t.$on("$destroy",x)}}}}]),angular.module("pascalprecht.translate").directive("translateCloak",["$rootScope","$translate",function(e,t){return{compile:function(n){var a=function(){n.addClass(t.cloakClassName())},i=function(){n.removeClass(t.cloakClassName())},r=e.$on("$translateChangeEnd",function(){i(),r(),r=null});return a(),function(e,n,r){r.translateCloak&&r.translateCloak.length&&r.$observe("translateCloak",function(e){t(e).then(i,a)})}}}}]),angular.module("pascalprecht.translate").filter("translate",["$parse","$translate",function(e,t){var n=function(n,a,i){return angular.isObject(a)||(a=e(a)(this)),t.instant(n,a,i)};return n.$stateful=!0,n}]),function(e,t){"use strict";function n(){this.$get=["$$sanitizeUri",function(e){return function(t){var n=[];return r(t,l(n,function(t,n){return!/^unsafe/.test(e(t,n))})),n.join("")}}]}function a(e){var n=[],a=l(n,t.noop);return a.chars(e),n.join("")}function i(e){var t,n={},a=e.split(",");for(t=0;t<a.length;t++)n[a[t]]=!0;return n}function r(e,n){function a(e,a,r,s){if(a=t.lowercase(a),S[a])for(;y.last()&&C[y.last()];)i("",y.last());x[a]&&y.last()==a&&i("",a),s=$[a]||!!s,s||y.push(a);var l={};r.replace(p,function(e,t,n,a,i){var r=n||a||i||"";l[t]=o(r)}),n.start&&n.start(a,l,s)}function i(e,a){var i,r=0;if(a=t.lowercase(a))for(r=y.length-1;r>=0&&y[r]!=a;r--);if(r>=0){for(i=y.length-1;i>=r;i--)n.end&&n.end(y[i]);y.length=r}}"string"!=typeof e&&(e=null===e||"undefined"==typeof e?"":""+e);var r,s,l,b,y=[],w=e;for(y.last=function(){return y[y.length-1]};e;){if(b="",s=!0,y.last()&&T[y.last()]?(e=e.replace(new RegExp("([\\W\\w]*)<\\s*\\/\\s*"+y.last()+"[^>]*>","i"),function(e,t){return t=t.replace(m,"$1").replace(v,"$1"),n.chars&&n.chars(o(t)),""}),i("",y.last())):(0===e.indexOf("<!--")?(r=e.indexOf("--",4),r>=0&&e.lastIndexOf("-->",r)===r&&(n.comment&&n.comment(e.substring(4,r)),e=e.substring(r+3),s=!1)):h.test(e)?(l=e.match(h),l&&(e=e.replace(l[0],""),s=!1)):f.test(e)?(l=e.match(d),l&&(e=e.substring(l[0].length),l[0].replace(d,i),s=!1)):g.test(e)&&(l=e.match(u),l?(l[4]&&(e=e.substring(l[0].length),l[0].replace(u,a)),s=!1):(b+="<",e=e.substring(1))),s&&(r=e.indexOf("<"),b+=0>r?e:e.substring(0,r),e=0>r?"":e.substring(r),n.chars&&n.chars(o(b)))),e==w)throw c("badparse","The sanitizer was unable to parse the following block of html: {0}",e);w=e}i()}function o(e){return e?(P.innerHTML=e.replace(/</g,"&lt;"),P.textContent):""}function s(e){return e.replace(/&/g,"&amp;").replace(b,function(e){var t=e.charCodeAt(0),n=e.charCodeAt(1);return"&#"+(1024*(t-55296)+(n-56320)+65536)+";"}).replace(y,function(e){return"&#"+e.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function l(e,n){var a=!1,i=t.bind(e,e.push);return{start:function(e,r,o){e=t.lowercase(e),!a&&T[e]&&(a=e),a||M[e]!==!0||(i("<"),i(e),t.forEach(r,function(a,r){var o=t.lowercase(r),l="img"===e&&"src"===o||"background"===o;I[o]!==!0||E[o]===!0&&!n(a,l)||(i(" "),i(r),i('="'),i(s(a)),i('"'))}),i(o?"/>":">"))},end:function(e){e=t.lowercase(e),a||M[e]!==!0||(i("</"),i(e),i(">")),e==a&&(a=!1)},chars:function(e){a||i(s(e))}}}var c=t.$$minErr("$sanitize"),u=/^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/,d=/^<\/\s*([\w:-]+)[^>]*>/,p=/([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,g=/^</,f=/^<\//,m=/<!--(.*?)-->/g,h=/<!DOCTYPE([^>]*?)>/i,v=/<!\[CDATA\[(.*?)]]>/g,b=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,y=/([^\#-~| |!])/g,$=i("area,br,col,hr,img,wbr"),w=i("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),k=i("rp,rt"),x=t.extend({},k,w),S=t.extend({},w,i("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul")),C=t.extend({},k,i("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),D=i("animate,animateColor,animateMotion,animateTransform,circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,set,stop,svg,switch,text,title,tspan,use"),T=i("script,style"),M=t.extend({},$,S,C,x,D),E=i("background,cite,href,longdesc,src,usemap,xlink:href"),O=i("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,target,title,type,valign,value,vspace,width"),A=i("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,attributeName,attributeType,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan"),I=t.extend({},E,A,O),P=document.createElement("pre");t.module("ngSanitize",[]).provider("$sanitize",n),t.module("ngSanitize").filter("linky",["$sanitize",function(e){var n=/((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"”’]/i,i=/^mailto:/i;return function(r,o){function s(e){e&&g.push(a(e))}function l(e,n){g.push("<a "),t.isDefined(o)&&g.push('target="',o,'" '),g.push('href="',e.replace(/"/g,"&quot;"),'">'),s(n),g.push("</a>")}if(!r)return r;for(var c,u,d,p=r,g=[];c=p.match(n);)u=c[0],c[2]||c[4]||(u=(c[3]?"http://":"mailto:")+u),d=c.index,s(p.substr(0,d)),l(u,c[0].replace(i,"")),p=p.substring(d+c[0].length);return s(p),e(g.join(""))}}])}(window,window.angular),angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(e,t){return function(n){if(!n||!angular.isString(n.prefix)||!angular.isString(n.suffix))throw new Error("Couldn't load static files, no prefix or suffix specified!");var a=e.defer();return t(angular.extend({url:[n.prefix,n.key,n.suffix].join(""),method:"GET",params:""},n.$http)).success(function(e){a.resolve(e)}).error(function(){a.reject(n.key)}),a.promise}}]),angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(e,t){function n(e,a){t(angular.extend({url:[e.prefix,e.key.toLowerCase(),e.suffix].join(""),method:"GET",params:""},e.$http)).success(function(e){a.resolve(e)}).error(function(){if(e.key.indexOf("_")>=0){var t=e.key.substr(0,e.key.lastIndexOf("_")),i=angular.extend({},e,{key:t});n(i,a)}else a.resolve("{}")})}return function(t){if(!t||!angular.isString(t.prefix)||!angular.isString(t.suffix))throw new Error('Couldn"t load static files, no prefix or suffix specified!');var a=e.defer();return n(t,a),a.promise}}]),angular.module("risevision.common.i18n",["pascalprecht.translate","risevision.common.i18n.config"]).config(["$translateProvider","LOCALES_PREFIX","LOCALES_SUFIX",function(e,t,n){e.useStaticFilesLoader({prefix:t,suffix:n}),e.determinePreferredLanguage().fallbackLanguage("en")}]),angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.transition","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.transition",[]).factory("$transition",["$q","$timeout","$rootScope",function(e,t,n){function a(e){for(var t in e)if(void 0!==r.style[t])return e[t]}var i=function(a,r,o){o=o||{};var s=e.defer(),l=i[o.animation?"animationEndEventName":"transitionEndEventName"],c=function(){n.$apply(function(){a.unbind(l,c),s.resolve(a)})};return l&&a.bind(l,c),t(function(){angular.isString(r)?a.addClass(r):angular.isFunction(r)?r(a):angular.isObject(r)&&a.css(r),l||s.resolve(a)}),s.promise.cancel=function(){l&&a.unbind(l,c),s.reject("Transition cancelled")},s.promise},r=document.createElement("trans"),o={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"},s={WebkitTransition:"webkitAnimationEnd",MozTransition:"animationend",OTransition:"oAnimationEnd",transition:"animationend"};return i.transitionEndEventName=a(o),i.animationEndEventName=a(s),i}]),angular.module("ui.bootstrap.collapse",["ui.bootstrap.transition"]).directive("collapse",["$transition",function(e){return{link:function(t,n,a){function i(t){function a(){c===i&&(c=void 0)}var i=e(n,t);return c&&c.cancel(),c=i,i.then(a,a),i}function r(){u?(u=!1,o()):(n.removeClass("collapse").addClass("collapsing"),i({height:n[0].scrollHeight+"px"}).then(o))}function o(){n.removeClass("collapsing"),n.addClass("collapse in"),n.css({height:"auto"})}function s(){if(u)u=!1,l(),n.css({height:0});else{n.css({height:n[0].scrollHeight+"px"});{n[0].offsetWidth}n.removeClass("collapse in").addClass("collapsing"),i({height:0}).then(l)}}function l(){n.removeClass("collapsing"),n.addClass("collapse")}var c,u=!0;t.$watch(a.collapse,function(e){e?s():r()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("accordionConfig",{closeOthers:!0}).controller("AccordionController",["$scope","$attrs","accordionConfig",function(e,t,n){this.groups=[],this.closeOthers=function(a){var i=angular.isDefined(t.closeOthers)?e.$eval(t.closeOthers):n.closeOthers;i&&angular.forEach(this.groups,function(e){e!==a&&(e.isOpen=!1)})},this.addGroup=function(e){var t=this;this.groups.push(e),e.$on("$destroy",function(){t.removeGroup(e)})},this.removeGroup=function(e){var t=this.groups.indexOf(e);-1!==t&&this.groups.splice(t,1)}}]).directive("accordion",function(){return{restrict:"EA",controller:"AccordionController",transclude:!0,replace:!1,templateUrl:"template/accordion/accordion.html"}}).directive("accordionGroup",function(){return{require:"^accordion",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/accordion/accordion-group.html",scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(e){this.heading=e}},link:function(e,t,n,a){a.addGroup(e),e.$watch("isOpen",function(t){t&&a.closeOthers(e)}),e.toggleOpen=function(){e.isDisabled||(e.isOpen=!e.isOpen)}}}}).directive("accordionHeading",function(){return{restrict:"EA",transclude:!0,template:"",replace:!0,require:"^accordionGroup",link:function(e,t,n,a,i){a.setHeading(i(e,function(){}))}}}).directive("accordionTransclude",function(){return{require:"^accordionGroup",link:function(e,t,n,a){e.$watch(function(){return a[n.accordionTransclude]},function(e){e&&(t.html(""),t.append(e))})}}}),angular.module("ui.bootstrap.alert",[]).controller("AlertController",["$scope","$attrs",function(e,t){e.closeable="close"in t}]).directive("alert",function(){return{restrict:"EA",controller:"AlertController",templateUrl:"template/alert/alert.html",transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}),angular.module("ui.bootstrap.bindHtml",[]).directive("bindHtmlUnsafe",function(){return function(e,t,n){t.addClass("ng-binding").data("$binding",n.bindHtmlUnsafe),e.$watch(n.bindHtmlUnsafe,function(e){t.html(e||"")})}}),angular.module("ui.bootstrap.buttons",[]).constant("buttonConfig",{activeClass:"active",toggleEvent:"click"}).controller("ButtonsController",["buttonConfig",function(e){this.activeClass=e.activeClass||"active",this.toggleEvent=e.toggleEvent||"click"}]).directive("btnRadio",function(){return{require:["btnRadio","ngModel"],controller:"ButtonsController",link:function(e,t,n,a){var i=a[0],r=a[1];r.$render=function(){t.toggleClass(i.activeClass,angular.equals(r.$modelValue,e.$eval(n.btnRadio)))},t.bind(i.toggleEvent,function(){var a=t.hasClass(i.activeClass);(!a||angular.isDefined(n.uncheckable))&&e.$apply(function(){r.$setViewValue(a?null:e.$eval(n.btnRadio)),r.$render()})})}}}).directive("btnCheckbox",function(){return{require:["btnCheckbox","ngModel"],controller:"ButtonsController",link:function(e,t,n,a){function i(){return o(n.btnCheckboxTrue,!0)}function r(){return o(n.btnCheckboxFalse,!1)}function o(t,n){var a=e.$eval(t);return angular.isDefined(a)?a:n}var s=a[0],l=a[1];l.$render=function(){t.toggleClass(s.activeClass,angular.equals(l.$modelValue,i()))},t.bind(s.toggleEvent,function(){e.$apply(function(){l.$setViewValue(t.hasClass(s.activeClass)?r():i()),l.$render()})})}}}),angular.module("ui.bootstrap.carousel",["ui.bootstrap.transition"]).controller("CarouselController",["$scope","$timeout","$transition",function(e,t,n){function a(){i();var n=+e.interval;!isNaN(n)&&n>=0&&(o=t(r,n))}function i(){o&&(t.cancel(o),o=null)}function r(){s?(e.next(),a()):e.pause()}var o,s,l=this,c=l.slides=e.slides=[],u=-1;l.currentSlide=null;var d=!1;l.select=e.select=function(i,r){function o(){if(!d){if(l.currentSlide&&angular.isString(r)&&!e.noTransition&&i.$element){i.$element.addClass(r);{i.$element[0].offsetWidth}angular.forEach(c,function(e){angular.extend(e,{direction:"",entering:!1,leaving:!1,active:!1})}),angular.extend(i,{direction:r,active:!0,entering:!0}),angular.extend(l.currentSlide||{},{direction:r,leaving:!0}),e.$currentTransition=n(i.$element,{}),function(t,n){e.$currentTransition.then(function(){s(t,n)},function(){s(t,n)})}(i,l.currentSlide)}else s(i,l.currentSlide);l.currentSlide=i,u=p,a()}}function s(t,n){angular.extend(t,{direction:"",active:!0,leaving:!1,entering:!1}),angular.extend(n||{},{direction:"",active:!1,leaving:!1,entering:!1}),e.$currentTransition=null}var p=c.indexOf(i);void 0===r&&(r=p>u?"next":"prev"),i&&i!==l.currentSlide&&(e.$currentTransition?(e.$currentTransition.cancel(),t(o)):o())},e.$on("$destroy",function(){d=!0}),l.indexOfSlide=function(e){return c.indexOf(e)},e.next=function(){var t=(u+1)%c.length;return e.$currentTransition?void 0:l.select(c[t],"next")},e.prev=function(){var t=0>u-1?c.length-1:u-1;return e.$currentTransition?void 0:l.select(c[t],"prev")},e.isActive=function(e){return l.currentSlide===e},e.$watch("interval",a),e.$on("$destroy",i),e.play=function(){s||(s=!0,a())},e.pause=function(){e.noPause||(s=!1,i())},l.addSlide=function(t,n){t.$element=n,c.push(t),1===c.length||t.active?(l.select(c[c.length-1]),1==c.length&&e.play()):t.active=!1},l.removeSlide=function(e){var t=c.indexOf(e);c.splice(t,1),c.length>0&&e.active?t>=c.length?l.select(c[t-1]):l.select(c[t]):u>t&&u--}}]).directive("carousel",[function(){return{restrict:"EA",transclude:!0,replace:!0,controller:"CarouselController",require:"carousel",templateUrl:"template/carousel/carousel.html",scope:{interval:"=",noTransition:"=",noPause:"="}}}]).directive("slide",function(){return{require:"^carousel",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/carousel/slide.html",scope:{active:"=?"},link:function(e,t,n,a){a.addSlide(e,t),e.$on("$destroy",function(){a.removeSlide(e)}),e.$watch("active",function(t){t&&a.select(e)})}}}),angular.module("ui.bootstrap.dateparser",[]).service("dateParser",["$locale","orderByFilter",function(e,t){function n(e){var n=[],a=e.split("");return angular.forEach(i,function(t,i){var r=e.indexOf(i);if(r>-1){e=e.split(""),a[r]="("+t.regex+")",e[r]="$";for(var o=r+1,s=r+i.length;s>o;o++)a[o]="",e[o]="$";e=e.join(""),n.push({index:r,apply:t.apply})}}),{regex:new RegExp("^"+a.join("")+"$"),map:t(n,"index")}}function a(e,t,n){return 1===t&&n>28?29===n&&(e%4===0&&e%100!==0||e%400===0):3===t||5===t||8===t||10===t?31>n:!0}this.parsers={};var i={yyyy:{regex:"\\d{4}",apply:function(e){this.year=+e}},yy:{regex:"\\d{2}",apply:function(e){this.year=+e+2e3}},y:{regex:"\\d{1,4}",apply:function(e){this.year=+e}},MMMM:{regex:e.DATETIME_FORMATS.MONTH.join("|"),apply:function(t){this.month=e.DATETIME_FORMATS.MONTH.indexOf(t)}},MMM:{regex:e.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(t){this.month=e.DATETIME_FORMATS.SHORTMONTH.indexOf(t)}},MM:{regex:"0[1-9]|1[0-2]",apply:function(e){this.month=e-1}},M:{regex:"[1-9]|1[0-2]",apply:function(e){this.month=e-1}},dd:{regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e}},d:{regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e}},EEEE:{regex:e.DATETIME_FORMATS.DAY.join("|")},EEE:{regex:e.DATETIME_FORMATS.SHORTDAY.join("|")}};this.parse=function(t,i){if(!angular.isString(t)||!i)return t;i=e.DATETIME_FORMATS[i]||i,this.parsers[i]||(this.parsers[i]=n(i));var r=this.parsers[i],o=r.regex,s=r.map,l=t.match(o);if(l&&l.length){for(var c,u={year:1900,month:0,date:1,hours:0},d=1,p=l.length;p>d;d++){var g=s[d-1];g.apply&&g.apply.call(u,l[d])}return a(u.year,u.month,u.date)&&(c=new Date(u.year,u.month,u.date,u.hours)),c}}}]),angular.module("ui.bootstrap.position",[]).factory("$position",["$document","$window",function(e,t){function n(e,n){return e.currentStyle?e.currentStyle[n]:t.getComputedStyle?t.getComputedStyle(e)[n]:e.style[n]}function a(e){return"static"===(n(e,"position")||"static")}var i=function(t){for(var n=e[0],i=t.offsetParent||n;i&&i!==n&&a(i);)i=i.offsetParent;return i||n};return{position:function(t){var n=this.offset(t),a={top:0,left:0},r=i(t[0]);
r!=e[0]&&(a=this.offset(angular.element(r)),a.top+=r.clientTop-r.scrollTop,a.left+=r.clientLeft-r.scrollLeft);var o=t[0].getBoundingClientRect();return{width:o.width||t.prop("offsetWidth"),height:o.height||t.prop("offsetHeight"),top:n.top-a.top,left:n.left-a.left}},offset:function(n){var a=n[0].getBoundingClientRect();return{width:a.width||n.prop("offsetWidth"),height:a.height||n.prop("offsetHeight"),top:a.top+(t.pageYOffset||e[0].documentElement.scrollTop),left:a.left+(t.pageXOffset||e[0].documentElement.scrollLeft)}},positionElements:function(e,t,n,a){var i,r,o,s,l=n.split("-"),c=l[0],u=l[1]||"center";i=a?this.offset(e):this.position(e),r=t.prop("offsetWidth"),o=t.prop("offsetHeight");var d={center:function(){return i.left+i.width/2-r/2},left:function(){return i.left},right:function(){return i.left+i.width}},p={center:function(){return i.top+i.height/2-o/2},top:function(){return i.top},bottom:function(){return i.top+i.height}};switch(c){case"right":s={top:p[u](),left:d[c]()};break;case"left":s={top:p[u](),left:i.left-r};break;case"bottom":s={top:p[c](),left:d[u]()};break;default:s={top:i.top-o,left:d[u]()}}return s}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.position"]).constant("datepickerConfig",{formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",datepickerMode:"day",minMode:"day",maxMode:"year",showWeeks:!0,startingDay:0,yearRange:20,minDate:null,maxDate:null}).controller("DatepickerController",["$scope","$attrs","$parse","$interpolate","$timeout","$log","dateFilter","datepickerConfig",function(e,t,n,a,i,r,o,s){var l=this,c={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","minMode","maxMode","showWeeks","startingDay","yearRange"],function(n,i){l[n]=angular.isDefined(t[n])?8>i?a(t[n])(e.$parent):e.$parent.$eval(t[n]):s[n]}),angular.forEach(["minDate","maxDate"],function(a){t[a]?e.$parent.$watch(n(t[a]),function(e){l[a]=e?new Date(e):null,l.refreshView()}):l[a]=s[a]?new Date(s[a]):null}),e.datepickerMode=e.datepickerMode||s.datepickerMode,e.uniqueId="datepicker-"+e.$id+"-"+Math.floor(1e4*Math.random()),this.activeDate=angular.isDefined(t.initDate)?e.$parent.$eval(t.initDate):new Date,e.isActive=function(t){return 0===l.compare(t.date,l.activeDate)?(e.activeDateId=t.uid,!0):!1},this.init=function(e){c=e,c.$render=function(){l.render()}},this.render=function(){if(c.$modelValue){var e=new Date(c.$modelValue),t=!isNaN(e);t?this.activeDate=e:r.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.'),c.$setValidity("date",t)}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var e=c.$modelValue?new Date(c.$modelValue):null;c.$setValidity("date-disabled",!e||this.element&&!this.isDisabled(e))}},this.createDateObject=function(e,t){var n=c.$modelValue?new Date(c.$modelValue):null;return{date:e,label:o(e,t),selected:n&&0===this.compare(e,n),disabled:this.isDisabled(e),current:0===this.compare(e,new Date)}},this.isDisabled=function(n){return this.minDate&&this.compare(n,this.minDate)<0||this.maxDate&&this.compare(n,this.maxDate)>0||t.dateDisabled&&e.dateDisabled({date:n,mode:e.datepickerMode})},this.split=function(e,t){for(var n=[];e.length>0;)n.push(e.splice(0,t));return n},e.select=function(t){if(e.datepickerMode===l.minMode){var n=c.$modelValue?new Date(c.$modelValue):new Date(0,0,0,0,0,0,0);n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),c.$setViewValue(n),c.$render()}else l.activeDate=t,e.datepickerMode=l.modes[l.modes.indexOf(e.datepickerMode)-1]},e.move=function(e){var t=l.activeDate.getFullYear()+e*(l.step.years||0),n=l.activeDate.getMonth()+e*(l.step.months||0);l.activeDate.setFullYear(t,n,1),l.refreshView()},e.toggleMode=function(t){t=t||1,e.datepickerMode===l.maxMode&&1===t||e.datepickerMode===l.minMode&&-1===t||(e.datepickerMode=l.modes[l.modes.indexOf(e.datepickerMode)+t])},e.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var u=function(){i(function(){l.element[0].focus()},0,!1)};e.$on("datepicker.focus",u),e.keydown=function(t){var n=e.keys[t.which];if(n&&!t.shiftKey&&!t.altKey)if(t.preventDefault(),t.stopPropagation(),"enter"===n||"space"===n){if(l.isDisabled(l.activeDate))return;e.select(l.activeDate),u()}else!t.ctrlKey||"up"!==n&&"down"!==n?(l.handleKeyDown(n,t),l.refreshView()):(e.toggleMode("up"===n?1:-1),u())}}]).directive("datepicker",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/datepicker.html",scope:{datepickerMode:"=?",dateDisabled:"&"},require:["datepicker","?^ngModel"],controller:"DatepickerController",link:function(e,t,n,a){var i=a[0],r=a[1];r&&i.init(r)}}}).directive("daypicker",["dateFilter",function(e){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/day.html",require:"^datepicker",link:function(t,n,a,i){function r(e,t){return 1!==t||e%4!==0||e%100===0&&e%400!==0?l[t]:29}function o(e,t){var n=new Array(t),a=new Date(e),i=0;for(a.setHours(12);t>i;)n[i++]=new Date(a),a.setDate(a.getDate()+1);return n}function s(e){var t=new Date(e);t.setDate(t.getDate()+4-(t.getDay()||7));var n=t.getTime();return t.setMonth(0),t.setDate(1),Math.floor(Math.round((n-t)/864e5)/7)+1}t.showWeeks=i.showWeeks,i.step={months:1},i.element=n;var l=[31,28,31,30,31,30,31,31,30,31,30,31];i._refreshView=function(){var n=i.activeDate.getFullYear(),a=i.activeDate.getMonth(),r=new Date(n,a,1),l=i.startingDay-r.getDay(),c=l>0?7-l:-l,u=new Date(r);c>0&&u.setDate(-c+1);for(var d=o(u,42),p=0;42>p;p++)d[p]=angular.extend(i.createDateObject(d[p],i.formatDay),{secondary:d[p].getMonth()!==a,uid:t.uniqueId+"-"+p});t.labels=new Array(7);for(var g=0;7>g;g++)t.labels[g]={abbr:e(d[g].date,i.formatDayHeader),full:e(d[g].date,"EEEE")};if(t.title=e(i.activeDate,i.formatDayTitle),t.rows=i.split(d,7),t.showWeeks){t.weekNumbers=[];for(var f=s(t.rows[0][0].date),m=t.rows.length;t.weekNumbers.push(f++)<m;);}},i.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate())-new Date(t.getFullYear(),t.getMonth(),t.getDate())},i.handleKeyDown=function(e){var t=i.activeDate.getDate();if("left"===e)t-=1;else if("up"===e)t-=7;else if("right"===e)t+=1;else if("down"===e)t+=7;else if("pageup"===e||"pagedown"===e){var n=i.activeDate.getMonth()+("pageup"===e?-1:1);i.activeDate.setMonth(n,1),t=Math.min(r(i.activeDate.getFullYear(),i.activeDate.getMonth()),t)}else"home"===e?t=1:"end"===e&&(t=r(i.activeDate.getFullYear(),i.activeDate.getMonth()));i.activeDate.setDate(t)},i.refreshView()}}}]).directive("monthpicker",["dateFilter",function(e){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/month.html",require:"^datepicker",link:function(t,n,a,i){i.step={years:1},i.element=n,i._refreshView=function(){for(var n=new Array(12),a=i.activeDate.getFullYear(),r=0;12>r;r++)n[r]=angular.extend(i.createDateObject(new Date(a,r,1),i.formatMonth),{uid:t.uniqueId+"-"+r});t.title=e(i.activeDate,i.formatMonthTitle),t.rows=i.split(n,3)},i.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth())-new Date(t.getFullYear(),t.getMonth())},i.handleKeyDown=function(e){var t=i.activeDate.getMonth();if("left"===e)t-=1;else if("up"===e)t-=3;else if("right"===e)t+=1;else if("down"===e)t+=3;else if("pageup"===e||"pagedown"===e){var n=i.activeDate.getFullYear()+("pageup"===e?-1:1);i.activeDate.setFullYear(n)}else"home"===e?t=0:"end"===e&&(t=11);i.activeDate.setMonth(t)},i.refreshView()}}}]).directive("yearpicker",["dateFilter",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/year.html",require:"^datepicker",link:function(e,t,n,a){function i(e){return parseInt((e-1)/r,10)*r+1}var r=a.yearRange;a.step={years:r},a.element=t,a._refreshView=function(){for(var t=new Array(r),n=0,o=i(a.activeDate.getFullYear());r>n;n++)t[n]=angular.extend(a.createDateObject(new Date(o+n,0,1),a.formatYear),{uid:e.uniqueId+"-"+n});e.title=[t[0].label,t[r-1].label].join(" - "),e.rows=a.split(t,5)},a.compare=function(e,t){return e.getFullYear()-t.getFullYear()},a.handleKeyDown=function(e){var t=a.activeDate.getFullYear();"left"===e?t-=1:"up"===e?t-=5:"right"===e?t+=1:"down"===e?t+=5:"pageup"===e||"pagedown"===e?t+=("pageup"===e?-1:1)*a.step.years:"home"===e?t=i(a.activeDate.getFullYear()):"end"===e&&(t=i(a.activeDate.getFullYear())+r-1),a.activeDate.setFullYear(t)},a.refreshView()}}}]).constant("datepickerPopupConfig",{datepickerPopup:"yyyy-MM-dd",currentText:"Today",clearText:"Clear",closeText:"Done",closeOnDateSelection:!0,appendToBody:!1,showButtonBar:!0}).directive("datepickerPopup",["$compile","$parse","$document","$position","dateFilter","dateParser","datepickerPopupConfig",function(e,t,n,a,i,r,o){return{restrict:"EA",require:"ngModel",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&"},link:function(s,l,c,u){function d(e){return e.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()})}function p(e){if(e){if(angular.isDate(e)&&!isNaN(e))return u.$setValidity("date",!0),e;if(angular.isString(e)){var t=r.parse(e,g)||new Date(e);return isNaN(t)?(u.$setValidity("date",!1),void 0):(u.$setValidity("date",!0),t)}return u.$setValidity("date",!1),void 0}return u.$setValidity("date",!0),null}var g,f=angular.isDefined(c.closeOnDateSelection)?s.$parent.$eval(c.closeOnDateSelection):o.closeOnDateSelection,m=angular.isDefined(c.datepickerAppendToBody)?s.$parent.$eval(c.datepickerAppendToBody):o.appendToBody;s.showButtonBar=angular.isDefined(c.showButtonBar)?s.$parent.$eval(c.showButtonBar):o.showButtonBar,s.getText=function(e){return s[e+"Text"]||o[e+"Text"]},c.$observe("datepickerPopup",function(e){g=e||o.datepickerPopup,u.$render()});var h=angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");h.attr({"ng-model":"date","ng-change":"dateSelection()"});var v=angular.element(h.children()[0]);c.datepickerOptions&&angular.forEach(s.$parent.$eval(c.datepickerOptions),function(e,t){v.attr(d(t),e)}),s.watchData={},angular.forEach(["minDate","maxDate","datepickerMode"],function(e){if(c[e]){var n=t(c[e]);if(s.$parent.$watch(n,function(t){s.watchData[e]=t}),v.attr(d(e),"watchData."+e),"datepickerMode"===e){var a=n.assign;s.$watch("watchData."+e,function(e,t){e!==t&&a(s.$parent,e)})}}}),c.dateDisabled&&v.attr("date-disabled","dateDisabled({ date: date, mode: mode })"),u.$parsers.unshift(p),s.dateSelection=function(e){angular.isDefined(e)&&(s.date=e),u.$setViewValue(s.date),u.$render(),f&&(s.isOpen=!1,l[0].focus())},l.bind("input change keyup",function(){s.$apply(function(){s.date=u.$modelValue})}),u.$render=function(){var e=u.$viewValue?i(u.$viewValue,g):"";l.val(e),s.date=p(u.$modelValue)};var b=function(e){s.isOpen&&e.target!==l[0]&&s.$apply(function(){s.isOpen=!1})},y=function(e){s.keydown(e)};l.bind("keydown",y),s.keydown=function(e){27===e.which?(e.preventDefault(),e.stopPropagation(),s.close()):40!==e.which||s.isOpen||(s.isOpen=!0)},s.$watch("isOpen",function(e){e?(s.$broadcast("datepicker.focus"),s.position=m?a.offset(l):a.position(l),s.position.top=s.position.top+l.prop("offsetHeight"),n.bind("click",b)):n.unbind("click",b)}),s.select=function(e){if("today"===e){var t=new Date;angular.isDate(u.$modelValue)?(e=new Date(u.$modelValue),e.setFullYear(t.getFullYear(),t.getMonth(),t.getDate())):e=new Date(t.setHours(0,0,0,0))}s.dateSelection(e)},s.close=function(){s.isOpen=!1,l[0].focus()};var $=e(h)(s);h.remove(),m?n.find("body").append($):l.after($),s.$on("$destroy",function(){$.remove(),l.unbind("keydown",y),n.unbind("click",b)})}}}]).directive("datepickerPopupWrap",function(){return{restrict:"EA",replace:!0,transclude:!0,templateUrl:"template/datepicker/popup.html",link:function(e,t){t.bind("click",function(e){e.preventDefault(),e.stopPropagation()})}}}),angular.module("ui.bootstrap.dropdown",[]).constant("dropdownConfig",{openClass:"open"}).service("dropdownService",["$document",function(e){var t=null;this.open=function(i){t||(e.bind("click",n),e.bind("keydown",a)),t&&t!==i&&(t.isOpen=!1),t=i},this.close=function(i){t===i&&(t=null,e.unbind("click",n),e.unbind("keydown",a))};var n=function(e){var n=t.getToggleElement();e&&n&&n[0].contains(e.target)||t.$apply(function(){t.isOpen=!1})},a=function(e){27===e.which&&(t.focusToggleElement(),n())}}]).controller("DropdownController",["$scope","$attrs","$parse","dropdownConfig","dropdownService","$animate",function(e,t,n,a,i,r){var o,s=this,l=e.$new(),c=a.openClass,u=angular.noop,d=t.onToggle?n(t.onToggle):angular.noop;this.init=function(a){s.$element=a,t.isOpen&&(o=n(t.isOpen),u=o.assign,e.$watch(o,function(e){l.isOpen=!!e}))},this.toggle=function(e){return l.isOpen=arguments.length?!!e:!l.isOpen},this.isOpen=function(){return l.isOpen},l.getToggleElement=function(){return s.toggleElement},l.focusToggleElement=function(){s.toggleElement&&s.toggleElement[0].focus()},l.$watch("isOpen",function(t,n){r[t?"addClass":"removeClass"](s.$element,c),t?(l.focusToggleElement(),i.open(l)):i.close(l),u(e,t),angular.isDefined(t)&&t!==n&&d(e,{open:!!t})}),e.$on("$locationChangeSuccess",function(){l.isOpen=!1}),e.$on("$destroy",function(){l.$destroy()})}]).directive("dropdown",function(){return{restrict:"CA",controller:"DropdownController",link:function(e,t,n,a){a.init(t)}}}).directive("dropdownToggle",function(){return{restrict:"CA",require:"?^dropdown",link:function(e,t,n,a){if(a){a.toggleElement=t;var i=function(i){i.preventDefault(),t.hasClass("disabled")||n.disabled||e.$apply(function(){a.toggle()})};t.bind("click",i),t.attr({"aria-haspopup":!0,"aria-expanded":!1}),e.$watch(a.isOpen,function(e){t.attr("aria-expanded",!!e)}),e.$on("$destroy",function(){t.unbind("click",i)})}}}}),angular.module("ui.bootstrap.modal",["ui.bootstrap.transition"]).factory("$$stackedMap",function(){return{createNew:function(){var e=[];return{add:function(t,n){e.push({key:t,value:n})},get:function(t){for(var n=0;n<e.length;n++)if(t==e[n].key)return e[n]},keys:function(){for(var t=[],n=0;n<e.length;n++)t.push(e[n].key);return t},top:function(){return e[e.length-1]},remove:function(t){for(var n=-1,a=0;a<e.length;a++)if(t==e[a].key){n=a;break}return e.splice(n,1)[0]},removeTop:function(){return e.splice(e.length-1,1)[0]},length:function(){return e.length}}}}}).directive("modalBackdrop",["$timeout",function(e){return{restrict:"EA",replace:!0,templateUrl:"template/modal/backdrop.html",link:function(t,n,a){t.backdropClass=a.backdropClass||"",t.animate=!1,e(function(){t.animate=!0})}}}]).directive("modalWindow",["$modalStack","$timeout",function(e,t){return{restrict:"EA",scope:{index:"@",animate:"="},replace:!0,transclude:!0,templateUrl:function(e,t){return t.templateUrl||"template/modal/window.html"},link:function(n,a,i){a.addClass(i.windowClass||""),n.size=i.size,t(function(){n.animate=!0,a[0].querySelectorAll("[autofocus]").length||a[0].focus()}),n.close=function(t){var n=e.getTop();n&&n.value.backdrop&&"static"!=n.value.backdrop&&t.target===t.currentTarget&&(t.preventDefault(),t.stopPropagation(),e.dismiss(n.key,"backdrop click"))}}}}]).directive("modalTransclude",function(){return{link:function(e,t,n,a,i){i(e.$parent,function(e){t.empty(),t.append(e)})}}}).factory("$modalStack",["$transition","$timeout","$document","$compile","$rootScope","$$stackedMap",function(e,t,n,a,i,r){function o(){for(var e=-1,t=g.keys(),n=0;n<t.length;n++)g.get(t[n]).value.backdrop&&(e=n);return e}function s(e){var t=n.find("body").eq(0),a=g.get(e).value;g.remove(e),c(a.modalDomEl,a.modalScope,300,function(){a.modalScope.$destroy(),t.toggleClass(p,g.length()>0),l()})}function l(){if(u&&-1==o()){var e=d;c(u,d,150,function(){e.$destroy(),e=null}),u=void 0,d=void 0}}function c(n,a,i,r){function o(){o.done||(o.done=!0,n.remove(),r&&r())}a.animate=!1;var s=e.transitionEndEventName;if(s){var l=t(o,i);n.bind(s,function(){t.cancel(l),o(),a.$apply()})}else t(o)}var u,d,p="modal-open",g=r.createNew(),f={};return i.$watch(o,function(e){d&&(d.index=e)}),n.bind("keydown",function(e){var t;27===e.which&&(t=g.top(),t&&t.value.keyboard&&(e.preventDefault(),i.$apply(function(){f.dismiss(t.key,"escape key press")})))}),f.open=function(e,t){g.add(e,{deferred:t.deferred,modalScope:t.scope,backdrop:t.backdrop,keyboard:t.keyboard});var r=n.find("body").eq(0),s=o();if(s>=0&&!u){d=i.$new(!0),d.index=s;var l=angular.element("<div modal-backdrop></div>");l.attr("backdrop-class",t.backdropClass),u=a(l)(d),r.append(u)}var c=angular.element("<div modal-window></div>");c.attr({"template-url":t.windowTemplateUrl,"window-class":t.windowClass,size:t.size,index:g.length()-1,animate:"animate"}).html(t.content);var f=a(c)(t.scope);g.top().value.modalDomEl=f,r.append(f),r.addClass(p)},f.close=function(e,t){var n=g.get(e);n&&(n.value.deferred.resolve(t),s(e))},f.dismiss=function(e,t){var n=g.get(e);n&&(n.value.deferred.reject(t),s(e))},f.dismissAll=function(e){for(var t=this.getTop();t;)this.dismiss(t.key,e),t=this.getTop()},f.getTop=function(){return g.top()},f}]).provider("$modal",function(){var e={options:{backdrop:!0,keyboard:!0},$get:["$injector","$rootScope","$q","$http","$templateCache","$controller","$modalStack",function(t,n,a,i,r,o,s){function l(e){return e.template?a.when(e.template):i.get(angular.isFunction(e.templateUrl)?e.templateUrl():e.templateUrl,{cache:r}).then(function(e){return e.data})}function c(e){var n=[];return angular.forEach(e,function(e){(angular.isFunction(e)||angular.isArray(e))&&n.push(a.when(t.invoke(e)))}),n}var u={};return u.open=function(t){var i=a.defer(),r=a.defer(),u={result:i.promise,opened:r.promise,close:function(e){s.close(u,e)},dismiss:function(e){s.dismiss(u,e)}};if(t=angular.extend({},e.options,t),t.resolve=t.resolve||{},!t.template&&!t.templateUrl)throw new Error("One of template or templateUrl options is required.");var d=a.all([l(t)].concat(c(t.resolve)));return d.then(function(e){var a=(t.scope||n).$new();a.$close=u.close,a.$dismiss=u.dismiss;var r,l={},c=1;t.controller&&(l.$scope=a,l.$modalInstance=u,angular.forEach(t.resolve,function(t,n){l[n]=e[c++]}),r=o(t.controller,l),t.controllerAs&&(a[t.controllerAs]=r)),s.open(u,{scope:a,deferred:i,content:e[0],backdrop:t.backdrop,keyboard:t.keyboard,backdropClass:t.backdropClass,windowClass:t.windowClass,windowTemplateUrl:t.windowTemplateUrl,size:t.size})},function(e){i.reject(e)}),d.then(function(){r.resolve(!0)},function(){r.reject(!1)}),u},u}]};return e}),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(e,t,n){var a=this,i={$setViewValue:angular.noop},r=t.numPages?n(t.numPages).assign:angular.noop;this.init=function(r,o){i=r,this.config=o,i.$render=function(){a.render()},t.itemsPerPage?e.$parent.$watch(n(t.itemsPerPage),function(t){a.itemsPerPage=parseInt(t,10),e.totalPages=a.calculateTotalPages()}):this.itemsPerPage=o.itemsPerPage},this.calculateTotalPages=function(){var t=this.itemsPerPage<1?1:Math.ceil(e.totalItems/this.itemsPerPage);return Math.max(t||0,1)},this.render=function(){e.page=parseInt(i.$viewValue,10)||1},e.selectPage=function(t){e.page!==t&&t>0&&t<=e.totalPages&&(i.$setViewValue(t),i.$render())},e.getText=function(t){return e[t+"Text"]||a.config[t+"Text"]},e.noPrevious=function(){return 1===e.page},e.noNext=function(){return e.page===e.totalPages},e.$watch("totalItems",function(){e.totalPages=a.calculateTotalPages()}),e.$watch("totalPages",function(t){r(e.$parent,t),e.page>t?e.selectPage(t):i.$render()})}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(e,t){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@"},require:["pagination","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pagination.html",replace:!0,link:function(n,a,i,r){function o(e,t,n){return{number:e,text:t,active:n}}function s(e,t){var n=[],a=1,i=t,r=angular.isDefined(u)&&t>u;r&&(d?(a=Math.max(e-Math.floor(u/2),1),i=a+u-1,i>t&&(i=t,a=i-u+1)):(a=(Math.ceil(e/u)-1)*u+1,i=Math.min(a+u-1,t)));for(var s=a;i>=s;s++){var l=o(s,s,s===e);n.push(l)}if(r&&!d){if(a>1){var c=o(a-1,"...",!1);n.unshift(c)}if(t>i){var p=o(i+1,"...",!1);n.push(p)}}return n}var l=r[0],c=r[1];if(c){var u=angular.isDefined(i.maxSize)?n.$parent.$eval(i.maxSize):t.maxSize,d=angular.isDefined(i.rotate)?n.$parent.$eval(i.rotate):t.rotate;n.boundaryLinks=angular.isDefined(i.boundaryLinks)?n.$parent.$eval(i.boundaryLinks):t.boundaryLinks,n.directionLinks=angular.isDefined(i.directionLinks)?n.$parent.$eval(i.directionLinks):t.directionLinks,l.init(c,t),i.maxSize&&n.$parent.$watch(e(i.maxSize),function(e){u=parseInt(e,10),l.render()});var p=l.render;l.render=function(){p(),n.page>0&&n.page<=n.totalPages&&(n.pages=s(n.page,n.totalPages))}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("pager",["pagerConfig",function(e){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@"},require:["pager","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pager.html",replace:!0,link:function(t,n,a,i){var r=i[0],o=i[1];o&&(t.align=angular.isDefined(a.align)?t.$parent.$eval(a.align):e.align,r.init(o,e))}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).provider("$tooltip",function(){function e(e){var t=/[A-Z]/g,n="-";return e.replace(t,function(e,t){return(t?n:"")+e.toLowerCase()})}var t={placement:"top",animation:!0,popupDelay:0},n={mouseenter:"mouseleave",click:"click",focus:"blur"},a={};this.options=function(e){angular.extend(a,e)},this.setTriggers=function(e){angular.extend(n,e)},this.$get=["$window","$compile","$timeout","$parse","$document","$position","$interpolate",function(i,r,o,s,l,c,u){return function(i,d,p){function g(e){var t=e||f.trigger||p,a=n[t]||t;return{show:t,hide:a}}var f=angular.extend({},t,a),m=e(i),h=u.startSymbol(),v=u.endSymbol(),b="<div "+m+'-popup title="'+h+"tt_title"+v+'" content="'+h+"tt_content"+v+'" placement="'+h+"tt_placement"+v+'" animation="tt_animation" is-open="tt_isOpen"></div>';return{restrict:"EA",scope:!0,compile:function(){var e=r(b);return function(t,n,a){function r(){t.tt_isOpen?p():u()}function u(){(!S||t.$eval(a[d+"Enable"]))&&(t.tt_popupDelay?w||(w=o(m,t.tt_popupDelay,!1),w.then(function(e){e()})):m()())}function p(){t.$apply(function(){h()})}function m(){return w=null,$&&(o.cancel($),$=null),t.tt_content?(v(),y.css({top:0,left:0,display:"block"}),k?l.find("body").append(y):n.after(y),C(),t.tt_isOpen=!0,t.$digest(),C):angular.noop}function h(){t.tt_isOpen=!1,o.cancel(w),w=null,t.tt_animation?$||($=o(b,500)):b()}function v(){y&&b(),y=e(t,function(){}),t.$digest()}function b(){$=null,y&&(y.remove(),y=null)}var y,$,w,k=angular.isDefined(f.appendToBody)?f.appendToBody:!1,x=g(void 0),S=angular.isDefined(a[d+"Enable"]),C=function(){var e=c.positionElements(n,y,t.tt_placement,k);e.top+="px",e.left+="px",y.css(e)};t.tt_isOpen=!1,a.$observe(i,function(e){t.tt_content=e,!e&&t.tt_isOpen&&h()}),a.$observe(d+"Title",function(e){t.tt_title=e}),a.$observe(d+"Placement",function(e){t.tt_placement=angular.isDefined(e)?e:f.placement}),a.$observe(d+"PopupDelay",function(e){var n=parseInt(e,10);t.tt_popupDelay=isNaN(n)?f.popupDelay:n});var D=function(){n.unbind(x.show,u),n.unbind(x.hide,p)};a.$observe(d+"Trigger",function(e){D(),x=g(e),x.show===x.hide?n.bind(x.show,r):(n.bind(x.show,u),n.bind(x.hide,p))});var T=t.$eval(a[d+"Animation"]);t.tt_animation=angular.isDefined(T)?!!T:f.animation,a.$observe(d+"AppendToBody",function(e){k=angular.isDefined(e)?s(e)(t):k}),k&&t.$on("$locationChangeSuccess",function(){t.tt_isOpen&&h()}),t.$on("$destroy",function(){o.cancel($),o.cancel(w),D(),b()})}}}}}]}).directive("tooltipPopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html"}}).directive("tooltip",["$tooltip",function(e){return e("tooltip","tooltip","mouseenter")}]).directive("tooltipHtmlUnsafePopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-unsafe-popup.html"}}).directive("tooltipHtmlUnsafe",["$tooltip",function(e){return e("tooltipHtmlUnsafe","tooltip","mouseenter")}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("popoverPopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html"}}).directive("popover",["$tooltip",function(e){return e("popover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).controller("ProgressController",["$scope","$attrs","progressConfig",function(e,t,n){var a=this,i=angular.isDefined(t.animate)?e.$parent.$eval(t.animate):n.animate;this.bars=[],e.max=angular.isDefined(t.max)?e.$parent.$eval(t.max):n.max,this.addBar=function(t,n){i||n.css({transition:"none"}),this.bars.push(t),t.$watch("value",function(n){t.percent=+(100*n/e.max).toFixed(2)}),t.$on("$destroy",function(){n=null,a.removeBar(t)})},this.removeBar=function(e){this.bars.splice(this.bars.indexOf(e),1)}}]).directive("progress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{},templateUrl:"template/progressbar/progress.html"}}).directive("bar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(e,t,n,a){a.addBar(e,t)}}}).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(e,t,n,a){a.addBar(e,angular.element(t.children()[0]))}}}),angular.module("ui.bootstrap.rating",[]).constant("ratingConfig",{max:5,stateOn:null,stateOff:null}).controller("RatingController",["$scope","$attrs","ratingConfig",function(e,t,n){var a={$setViewValue:angular.noop};this.init=function(i){a=i,a.$render=this.render,this.stateOn=angular.isDefined(t.stateOn)?e.$parent.$eval(t.stateOn):n.stateOn,this.stateOff=angular.isDefined(t.stateOff)?e.$parent.$eval(t.stateOff):n.stateOff;var r=angular.isDefined(t.ratingStates)?e.$parent.$eval(t.ratingStates):new Array(angular.isDefined(t.max)?e.$parent.$eval(t.max):n.max);e.range=this.buildTemplateObjects(r)},this.buildTemplateObjects=function(e){for(var t=0,n=e.length;n>t;t++)e[t]=angular.extend({index:t},{stateOn:this.stateOn,stateOff:this.stateOff},e[t]);return e},e.rate=function(t){!e.readonly&&t>=0&&t<=e.range.length&&(a.$setViewValue(t),a.$render())},e.enter=function(t){e.readonly||(e.value=t),e.onHover({value:t})},e.reset=function(){e.value=a.$viewValue,e.onLeave()},e.onKeydown=function(t){/(37|38|39|40)/.test(t.which)&&(t.preventDefault(),t.stopPropagation(),e.rate(e.value+(38===t.which||39===t.which?1:-1)))},this.render=function(){e.value=a.$viewValue}}]).directive("rating",function(){return{restrict:"EA",require:["rating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"RatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(e,t,n,a){var i=a[0],r=a[1];r&&i.init(r)}}}),angular.module("ui.bootstrap.tabs",[]).controller("TabsetController",["$scope",function(e){var t=this,n=t.tabs=e.tabs=[];t.select=function(e){angular.forEach(n,function(t){t.active&&t!==e&&(t.active=!1,t.onDeselect())}),e.active=!0,e.onSelect()},t.addTab=function(e){n.push(e),1===n.length?e.active=!0:e.active&&t.select(e)},t.removeTab=function(e){var a=n.indexOf(e);if(e.active&&n.length>1){var i=a==n.length-1?a-1:a+1;t.select(n[i])}n.splice(a,1)}}]).directive("tabset",function(){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"TabsetController",templateUrl:"template/tabs/tabset.html",link:function(e,t,n){e.vertical=angular.isDefined(n.vertical)?e.$parent.$eval(n.vertical):!1,e.justified=angular.isDefined(n.justified)?e.$parent.$eval(n.justified):!1}}}).directive("tab",["$parse",function(e){return{require:"^tabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},compile:function(t,n,a){return function(t,n,i,r){t.$watch("active",function(e){e&&r.select(t)}),t.disabled=!1,i.disabled&&t.$parent.$watch(e(i.disabled),function(e){t.disabled=!!e}),t.select=function(){t.disabled||(t.active=!0)},r.addTab(t),t.$on("$destroy",function(){r.removeTab(t)}),t.$transcludeFn=a}}}}]).directive("tabHeadingTransclude",[function(){return{restrict:"A",require:"^tab",link:function(e,t){e.$watch("headingElement",function(e){e&&(t.html(""),t.append(e))})}}}]).directive("tabContentTransclude",function(){function e(e){return e.tagName&&(e.hasAttribute("tab-heading")||e.hasAttribute("data-tab-heading")||"tab-heading"===e.tagName.toLowerCase()||"data-tab-heading"===e.tagName.toLowerCase())}return{restrict:"A",require:"^tabset",link:function(t,n,a){var i=t.$eval(a.tabContentTransclude);i.$transcludeFn(i.$parent,function(t){angular.forEach(t,function(t){e(t)?i.headingElement=t:n.append(t)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("timepickerConfig",{hourStep:1,minuteStep:1,showMeridian:!0,meridians:null,readonlyInput:!1,mousewheel:!0}).controller("TimepickerController",["$scope","$attrs","$parse","$log","$locale","timepickerConfig",function(e,t,n,a,i,r){function o(){var t=parseInt(e.hours,10),n=e.showMeridian?t>0&&13>t:t>=0&&24>t;return n?(e.showMeridian&&(12===t&&(t=0),e.meridian===m[1]&&(t+=12)),t):void 0}function s(){var t=parseInt(e.minutes,10);return t>=0&&60>t?t:void 0}function l(e){return angular.isDefined(e)&&e.toString().length<2?"0"+e:e}function c(e){u(),f.$setViewValue(new Date(g)),d(e)}function u(){f.$setValidity("time",!0),e.invalidHours=!1,e.invalidMinutes=!1}function d(t){var n=g.getHours(),a=g.getMinutes();e.showMeridian&&(n=0===n||12===n?12:n%12),e.hours="h"===t?n:l(n),e.minutes="m"===t?a:l(a),e.meridian=g.getHours()<12?m[0]:m[1]}function p(e){var t=new Date(g.getTime()+6e4*e);g.setHours(t.getHours(),t.getMinutes()),c()}var g=new Date,f={$setViewValue:angular.noop},m=angular.isDefined(t.meridians)?e.$parent.$eval(t.meridians):r.meridians||i.DATETIME_FORMATS.AMPMS;this.init=function(n,a){f=n,f.$render=this.render;var i=a.eq(0),o=a.eq(1),s=angular.isDefined(t.mousewheel)?e.$parent.$eval(t.mousewheel):r.mousewheel;s&&this.setupMousewheelEvents(i,o),e.readonlyInput=angular.isDefined(t.readonlyInput)?e.$parent.$eval(t.readonlyInput):r.readonlyInput,this.setupInputEvents(i,o)};var h=r.hourStep;t.hourStep&&e.$parent.$watch(n(t.hourStep),function(e){h=parseInt(e,10)});var v=r.minuteStep;t.minuteStep&&e.$parent.$watch(n(t.minuteStep),function(e){v=parseInt(e,10)}),e.showMeridian=r.showMeridian,t.showMeridian&&e.$parent.$watch(n(t.showMeridian),function(t){if(e.showMeridian=!!t,f.$error.time){var n=o(),a=s();angular.isDefined(n)&&angular.isDefined(a)&&(g.setHours(n),c())}else d()}),this.setupMousewheelEvents=function(t,n){var a=function(e){e.originalEvent&&(e=e.originalEvent);var t=e.wheelDelta?e.wheelDelta:-e.deltaY;return e.detail||t>0};t.bind("mousewheel wheel",function(t){e.$apply(a(t)?e.incrementHours():e.decrementHours()),t.preventDefault()}),n.bind("mousewheel wheel",function(t){e.$apply(a(t)?e.incrementMinutes():e.decrementMinutes()),t.preventDefault()})},this.setupInputEvents=function(t,n){if(e.readonlyInput)return e.updateHours=angular.noop,e.updateMinutes=angular.noop,void 0;var a=function(t,n){f.$setViewValue(null),f.$setValidity("time",!1),angular.isDefined(t)&&(e.invalidHours=t),angular.isDefined(n)&&(e.invalidMinutes=n)
};e.updateHours=function(){var e=o();angular.isDefined(e)?(g.setHours(e),c("h")):a(!0)},t.bind("blur",function(){!e.invalidHours&&e.hours<10&&e.$apply(function(){e.hours=l(e.hours)})}),e.updateMinutes=function(){var e=s();angular.isDefined(e)?(g.setMinutes(e),c("m")):a(void 0,!0)},n.bind("blur",function(){!e.invalidMinutes&&e.minutes<10&&e.$apply(function(){e.minutes=l(e.minutes)})})},this.render=function(){var e=f.$modelValue?new Date(f.$modelValue):null;isNaN(e)?(f.$setValidity("time",!1),a.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(e&&(g=e),u(),d())},e.incrementHours=function(){p(60*h)},e.decrementHours=function(){p(60*-h)},e.incrementMinutes=function(){p(v)},e.decrementMinutes=function(){p(-v)},e.toggleMeridian=function(){p(720*(g.getHours()<12?1:-1))}}]).directive("timepicker",function(){return{restrict:"EA",require:["timepicker","?^ngModel"],controller:"TimepickerController",replace:!0,scope:{},templateUrl:"template/timepicker/timepicker.html",link:function(e,t,n,a){var i=a[0],r=a[1];r&&i.init(r,t.find("input"))}}}),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).factory("typeaheadParser",["$parse",function(e){var t=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(n){var a=n.match(t);if(!a)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+n+'".');return{itemName:a[3],source:e(a[4]),viewMapper:e(a[2]||a[1]),modelMapper:e(a[1])}}}}]).directive("typeahead",["$compile","$parse","$q","$timeout","$document","$position","typeaheadParser",function(e,t,n,a,i,r,o){var s=[9,13,27,38,40];return{require:"ngModel",link:function(l,c,u,d){var p,g=l.$eval(u.typeaheadMinLength)||1,f=l.$eval(u.typeaheadWaitMs)||0,m=l.$eval(u.typeaheadEditable)!==!1,h=t(u.typeaheadLoading).assign||angular.noop,v=t(u.typeaheadOnSelect),b=u.typeaheadInputFormatter?t(u.typeaheadInputFormatter):void 0,y=u.typeaheadAppendToBody?l.$eval(u.typeaheadAppendToBody):!1,$=t(u.ngModel).assign,w=o.parse(u.typeahead),k=l.$new();l.$on("$destroy",function(){k.$destroy()});var x="typeahead-"+k.$id+"-"+Math.floor(1e4*Math.random());c.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":x});var S=angular.element("<div typeahead-popup></div>");S.attr({id:x,matches:"matches",active:"activeIdx",select:"select(activeIdx)",query:"query",position:"position"}),angular.isDefined(u.typeaheadTemplateUrl)&&S.attr("template-url",u.typeaheadTemplateUrl);var C=function(){k.matches=[],k.activeIdx=-1,c.attr("aria-expanded",!1)},D=function(e){return x+"-option-"+e};k.$watch("activeIdx",function(e){0>e?c.removeAttr("aria-activedescendant"):c.attr("aria-activedescendant",D(e))});var T=function(e){var t={$viewValue:e};h(l,!0),n.when(w.source(l,t)).then(function(n){var a=e===d.$viewValue;if(a&&p)if(n.length>0){k.activeIdx=0,k.matches.length=0;for(var i=0;i<n.length;i++)t[w.itemName]=n[i],k.matches.push({id:D(i),label:w.viewMapper(k,t),model:n[i]});k.query=e,k.position=y?r.offset(c):r.position(c),k.position.top=k.position.top+c.prop("offsetHeight"),c.attr("aria-expanded",!0)}else C();a&&h(l,!1)},function(){C(),h(l,!1)})};C(),k.query=void 0;var M,E=function(e){M=a(function(){T(e)},f)},O=function(){M&&a.cancel(M)};d.$parsers.unshift(function(e){return p=!0,e&&e.length>=g?f>0?(O(),E(e)):T(e):(h(l,!1),O(),C()),m?e:e?(d.$setValidity("editable",!1),void 0):(d.$setValidity("editable",!0),e)}),d.$formatters.push(function(e){var t,n,a={};return b?(a.$model=e,b(l,a)):(a[w.itemName]=e,t=w.viewMapper(l,a),a[w.itemName]=void 0,n=w.viewMapper(l,a),t!==n?t:e)}),k.select=function(e){var t,n,i={};i[w.itemName]=n=k.matches[e].model,t=w.modelMapper(l,i),$(l,t),d.$setValidity("editable",!0),v(l,{$item:n,$model:t,$label:w.viewMapper(l,i)}),C(),a(function(){c[0].focus()},0,!1)},c.bind("keydown",function(e){0!==k.matches.length&&-1!==s.indexOf(e.which)&&(e.preventDefault(),40===e.which?(k.activeIdx=(k.activeIdx+1)%k.matches.length,k.$digest()):38===e.which?(k.activeIdx=(k.activeIdx?k.activeIdx:k.matches.length)-1,k.$digest()):13===e.which||9===e.which?k.$apply(function(){k.select(k.activeIdx)}):27===e.which&&(e.stopPropagation(),C(),k.$digest()))}),c.bind("blur",function(){p=!1});var A=function(e){c[0]!==e.target&&(C(),k.$digest())};i.bind("click",A),l.$on("$destroy",function(){i.unbind("click",A)});var I=e(S)(k);y?i.find("body").append(I):c.after(I)}}}]).directive("typeaheadPopup",function(){return{restrict:"EA",scope:{matches:"=",query:"=",active:"=",position:"=",select:"&"},replace:!0,templateUrl:"template/typeahead/typeahead-popup.html",link:function(e,t,n){e.templateUrl=n.templateUrl,e.isOpen=function(){return e.matches.length>0},e.isActive=function(t){return e.active==t},e.selectActive=function(t){e.active=t},e.selectMatch=function(t){e.select({activeIdx:t})}}}}).directive("typeaheadMatch",["$http","$templateCache","$compile","$parse",function(e,t,n,a){return{restrict:"EA",scope:{index:"=",match:"=",query:"="},link:function(i,r,o){var s=a(o.templateUrl)(i.$parent)||"template/typeahead/typeahead-match.html";e.get(s,{cache:t}).success(function(e){r.replaceWith(n(e.trim())(i))})}}}]).filter("typeaheadHighlight",function(){function e(e){return e.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}return function(t,n){return n?(""+t).replace(new RegExp(e(n),"gi"),"<strong>$&</strong>"):t}}),angular.module("template/accordion/accordion-group.html",[]).run(["$templateCache",function(e){e.put("template/accordion/accordion-group.html",'<div class="panel panel-default">\n  <div class="panel-heading">\n    <h4 class="panel-title">\n      <a class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse" collapse="!isOpen">\n	  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>')}]),angular.module("template/accordion/accordion.html",[]).run(["$templateCache",function(e){e.put("template/accordion/accordion.html",'<div class="panel-group" ng-transclude></div>')}]),angular.module("template/alert/alert.html",[]).run(["$templateCache",function(e){e.put("template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissable\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close()">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("template/carousel/carousel.html",[]).run(["$templateCache",function(e){e.put("template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n</div>\n')}]),angular.module("template/carousel/slide.html",[]).run(["$templateCache",function(e){e.put("template/carousel/slide.html","<div ng-class=\"{\n    'active': leaving || (active && !entering),\n    'prev': (next || active) && direction=='prev',\n    'next': (next || active) && direction=='next',\n    'right': direction=='prev',\n    'left': direction=='next'\n  }\" class=\"item text-center\" ng-transclude></div>\n")}]),angular.module("template/datepicker/datepicker.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/datepicker.html",'<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n</div>')}]),angular.module("template/datepicker/day.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/day.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{5 + showWeeks}}"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-show="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in labels track by $index" class="text-center"><small aria-label="{{label.full}}">{{label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-show="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/month.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/month.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/popup.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/popup.html",'<ul class="dropdown-menu" ng-style="{display: (isOpen && \'block\') || \'none\', top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)">\n	<li ng-transclude></li>\n	<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n		<span class="btn-group">\n			<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')">{{ getText(\'current\') }}</button>\n			<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n		</span>\n		<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n	</li>\n</ul>\n')}]),angular.module("template/datepicker/year.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/year.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/modal/backdrop.html",[]).run(["$templateCache",function(e){e.put("template/modal/backdrop.html",'<div class="modal-backdrop fade {{ backdropClass }}"\n     ng-class="{in: animate}"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("template/modal/window.html",[]).run(["$templateCache",function(e){e.put("template/modal/window.html",'<div tabindex="-1" role="dialog" class="modal fade" ng-class="{in: animate}" ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" ng-click="close($event)">\n    <div class="modal-dialog" ng-class="{\'modal-sm\': size == \'sm\', \'modal-lg\': size == \'lg\'}"><div class="modal-content" modal-transclude></div></div>\n</div>')}]),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function(e){e.put("template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious(), previous: align}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext(), next: align}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n</ul>')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function(e){e.put("template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="boundaryLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(1)">{{getText(\'first\')}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active}"><a href ng-click="selectPage(page.number)">{{page.text}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n  <li ng-if="boundaryLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(totalPages)">{{getText(\'last\')}}</a></li>\n</ul>')}]),angular.module("template/tooltip/tooltip-html-unsafe-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-html-unsafe-popup.html",'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-popup.html",'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("template/popover/popover.html",[]).run(["$templateCache",function(e){e.put("template/popover/popover.html",'<div class="popover {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-show="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/progress.html",'<div class="progress" ng-transclude></div>')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>\n</div>')}]),angular.module("template/rating/rating.html",[]).run(["$templateCache",function(e){e.put("template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <i ng-repeat="r in range track by $index" ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')">\n        <span class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    </i>\n</span>')}]),angular.module("template/tabs/tab.html",[]).run(["$templateCache",function(e){e.put("template/tabs/tab.html",'<li ng-class="{active: active, disabled: disabled}">\n  <a ng-click="select()" tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("template/tabs/tabset.html",[]).run(["$templateCache",function(e){e.put("template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("template/timepicker/timepicker.html",[]).run(["$templateCache",function(e){e.put("template/timepicker/timepicker.html",'<table>\n	<tbody>\n		<tr class="text-center">\n			<td><a ng-click="incrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="incrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n		<tr>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidHours}">\n				<input type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-mousewheel="incrementHours()" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td>:</td>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n				<input type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td ng-show="showMeridian"><button type="button" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n		</tr>\n		<tr class="text-center">\n			<td><a ng-click="decrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="decrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n	</tbody>\n</table>\n')}]),angular.module("template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(e){e.put("template/typeahead/typeahead-match.html",'<a tabindex="-1" bind-html-unsafe="match.label | typeaheadHighlight:query"></a>')}]),angular.module("template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(e){e.put("template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen()" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{match.id}}">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),function(){"use strict";angular.module("risevision.widget.common.tooltip",["ui.bootstrap"]).directive("rvTooltip",[function(){return{restrict:"A",link:function(e,t){t.addClass("fa"),t.addClass("fa-question-circle"),t.addClass("fa-lg")}}}])}(),"undefined"!=typeof angular&&angular.module("risevision.widget.common.storage-selector.config",[]).value("STORAGE_MODAL","https://storage.risevision.com/files/"),function(){"use strict";angular.module("risevision.widget.common.storage-selector",["ui.bootstrap","risevision.widget.common.storage-selector.config"]).directive("storageSelector",["$templateCache","$modal","$sce","$log","STORAGE_MODAL",function(e,t,n,a,i){return{restrict:"EA",scope:{companyId:"@",type:"@",label:"@",selected:"="},template:e.get("storage-selector.html"),link:function(e){function r(){e.storageUrl="undefined"!=typeof e.type&&""!==e.type?i+e.companyId+"?selector-type="+e.type:i+e.companyId}e.storageUrl="",e.open=function(){e.modalInstance=t.open({templateUrl:"storage.html",controller:"StorageCtrl",size:"md",backdrop:!0,resolve:{storageUrl:function(){return{url:n.trustAsResourceUrl(e.storageUrl)}}}}),e.modalInstance.result.then(function(t){e.files=t,e.$emit("picked",t,e.type)},function(){e.canceled=!0,a.info("Modal dismissed at: "+new Date)})},e.$watch("companyId",function(e){e&&r()}),e.$watch("type",function(e){e&&r()})}}}])}(),angular.module("risevision.widget.common.storage-selector").controller("StorageCtrl",["$scope","$modalInstance","storageUrl","$window","$log","STORAGE_MODAL",function(e,t,n,a,i,r){e.storageUrl=n,e.isSameOrigin=function(e){var t=document.createElement("a");return t.href=r,-1!==e.indexOf(t.host)},e.messageHandler=function(n){e.isSameOrigin(n.origin)&&(Array.isArray(n.data)?t.close(n.data):"string"==typeof n.data&&"close"===n.data&&t.dismiss("cancel"))},a.addEventListener("message",e.messageHandler)}]),function(e){try{e=angular.module("risevision.widget.common.storage-selector")}catch(t){e=angular.module("risevision.widget.common.storage-selector",[])}e.run(["$templateCache",function(e){"use strict";e.put("storage-selector.html",'<button class="btn btn-default" ng-class="{active: selected}" ng-click="open()" type="button" >\n  {{ label }}<img src="http://s3.amazonaws.com/Rise-Images/Icons/storage.png" class="storage-selector-icon" ng-class="{\'icon-right\': label}">\n</button>\n\n<script type="text/ng-template" id="storage.html">\n        <iframe class="modal-dialog" scrolling="no" marginwidth="0" src="{{ storageUrl.url }}"></iframe>\n</script>\n')}])}(),function(){"use strict";try{angular.module("risevision.common.config")}catch(e){angular.module("risevision.common.config",[])}angular.module("risevision.common.config").value("STORE_URL","https://store.risevision.com/").value("STORE_SERVER_URL","https://store-dot-rvaserver2.appspot.com/"),angular.module("risevision.widget.common.subscription-status.config",[]).value("IN_RVA_PATH","/product/productId/?up_id=iframeId&parent=parentUrl&inRVA=true&cid=companyId").value("IN_RVA_ACCOUNT_PATH","/account?up_id=iframeId&parent=parentUrl&inRVA=true").value("PATH_URL","v1/company/companyId/product/status?pc=")}(),function(){"use strict";angular.module("risevision.widget.common.subscription-status",["risevision.common.config","risevision.widget.common.subscription-status.config","risevision.widget.common.subscription-status.service","risevision.widget.common","risevision.common.i18n","ngSanitize"])}(),function(){"use strict";angular.module("risevision.widget.common.subscription-status").directive("appSubscriptionStatus",["$templateCache","subscriptionStatusService","$document","$compile",function(e,t,n,a){return{restrict:"AE",require:"?ngModel",scope:{productId:"@",productCode:"@",companyId:"@",productPrice:"@"},template:e.get("app-subscription-status-template.html"),link:function(e,i,r,o){function s(){e.productCode&&e.productId&&e.companyId&&t.get(e.productCode,e.companyId).then(function(t){t&&(e.subscriptionStatus=t)},function(){})}function l(){if(!u){var t=n.find("body").eq(0),i=angular.element("<div store-modal></div>");i.attr({id:"store-modal",animate:"animate","show-store-modal":"showStoreModal","company-id":"{{companyId}}","product-id":"{{productId}}"});var r=a(i)(e);t.append(r),u=!0}}function c(){if(!d){var t=n.find("body").eq(0),i=angular.element("<div store-account-modal></div>");i.attr({id:"store-account-modal",animate:"animate","show-store-account-modal":"showAccountStoreModal","company-id":"{{companyId}}","product-id":"{{productId}}"});var r=a(i)(e);t.append(r),d=!0}}var u=!1,d=!1;e.subscriptionStatus={status:"N/A",statusCode:"na",subscribed:!1,expiry:null},e.$watch("companyId",function(){s()}),o&&e.$watch("subscriptionStatus",function(e){o.$setViewValue(e)});var p=e.$watch("showStoreModal",function(e){e&&(l(),p())}),g=e.$watch("showStoreAccountModal",function(e){e&&(c(),g())});e.$on("store-dialog-save",function(){s()})}}}]).directive("ngDisableRightClick",function(){return function(e,t){t.bind("contextmenu",function(t){e.$apply(function(){t.preventDefault()})})}})}(),function(){"use strict";angular.module("risevision.widget.common.subscription-status").directive("storeAccountModal",["$templateCache","$location","gadgetsApi","STORE_URL","IN_RVA_ACCOUNT_PATH",function(e,t,n,a,i){return{restrict:"AE",scope:{showStoreAccountModal:"=",productId:"@",companyId:"@"},template:e.get("store-account-modal-template.html"),link:function(e,r){function o(){!e.rpcRegistered&&n&&(e.rpcRegistered=!0,n.rpc.register("rscmd_saveSettings",s),n.rpc.register("rscmd_closeSettings",l),n.rpc.setupReceiver("store-account-modal-frame"))}function s(){e.$emit("store-dialog-save"),l()}function l(){e.$apply(function(){e.showStoreAccountModal=!1})}var c=$(r);e.showStoreAccountModal=!0,e.$watch("showStoreAccountModal",function(n){if(n){o();var r=a+i.replace("productId",e.productId).replace("companyId",e.companyId).replace("iframeId","store-account-modal-frame").replace("parentUrl",encodeURIComponent(t.$$absUrl));c.find("#store-account-modal-frame").attr("src",r)}})}}}])}(),function(){"use strict";angular.module("risevision.widget.common.subscription-status").directive("storeModal",["$templateCache","$location","gadgetsApi","STORE_URL","IN_RVA_PATH",function(e,t,n,a,i){return{restrict:"AE",scope:{showStoreModal:"=",productId:"@",companyId:"@"},template:e.get("store-modal-template.html"),link:function(e,r){function o(){!e.rpcRegistered&&n&&(e.rpcRegistered=!0,n.rpc.register("rscmd_saveSettings",s),n.rpc.register("rscmd_closeSettings",l),n.rpc.setupReceiver("store-modal-frame"))}function s(){e.$emit("store-dialog-save"),l()}function l(){e.$emit("store-dialog-close"),e.$apply(function(){e.showStoreModal=!1})}var c=$(r);e.showStoreModal=!0,e.$watch("showStoreModal",function(n){if(n){o();var r=a+i.replace("productId",e.productId).replace("companyId",e.companyId).replace("iframeId","store-modal-frame").replace("parentUrl",encodeURIComponent(t.$$absUrl));c.find("#store-modal-frame").attr("src",r)}})}}}])}(),function(){"use strict";angular.module("risevision.widget.common.subscription-status").directive("subscriptionStatus",["$templateCache","subscriptionStatusService","$document","$compile","$rootScope",function(e,t,n,a,i){return{restrict:"AE",require:"?ngModel",scope:{productId:"@",productCode:"@",companyId:"@",expandedFormat:"@",showStoreModal:"=?"},template:e.get("subscription-status-template.html"),link:function(e,r,o,s){function l(){e.productCode&&e.productId&&e.companyId&&t.get(e.productCode,e.companyId).then(function(t){t&&(e.subscriptionStatus&&e.subscriptionStatus.status===t.status||i.$emit("subscription-status:changed",t),e.subscriptionStatus=t)},function(){})}function c(){if(!d){var t=n.find("body").eq(0),i=angular.element("<div store-modal></div>");i.attr({id:"store-modal",animate:"animate","show-store-modal":"showStoreModal","company-id":"{{companyId}}","product-id":"{{productId}}"});var r=a(i)(e);t.append(r),d=!0}}function u(){if(!p){var t=n.find("body").eq(0),i=angular.element("<div store-account-modal></div>");i.attr({id:"store-account-modal",animate:"animate","show-store-account-modal":"showAccountStoreModal","company-id":"{{companyId}}","product-id":"{{productId}}"});var r=a(i)(e);t.append(r),p=!0}}var d=!1,p=!1;e.subscriptionStatus={status:"N/A",statusCode:"na",subscribed:!1,expiry:null},e.$watch("companyId",function(){l()}),i.$on("refreshSubscriptionStatus",function(t,n){(null===n||e.subscriptionStatus.statusCode===n)&&l()}),s&&e.$watch("subscriptionStatus",function(e){s.$setViewValue(e)});var g=e.$watch("showStoreModal",function(e){e&&(c(),g())}),f=e.$watch("showStoreAccountModal",function(e){e&&(u(),f())});e.$on("store-dialog-save",function(){l()}),e.$on("store-dialog-close",function(){l()})}}}]).filter("to_trusted",["$sce",function(e){return function(t){return e.trustAsHtml(t)}}])}(),angular.module("risevision.widget.common.subscription-status").filter("productTrialDaysToExpiry",["$interpolate","$translate",function(e,t){var n=null,a=null;return t(["subscription-status.expires-today","subscription-status.expires-in"],{days:"{{days}}"}).then(function(t){n=e(t["subscription-status.expires-today"]),a=e(t["subscription-status.expires-in"])}),function(e){var t="";try{var i=864e5,r=new Date(e).getTime()-(new Date).getTime(),o=Math.floor(r/i),s={days:o};t=0===o?null!==n?n(s):"":o>0?null!==a?a(s):"":null!==n?n(s):""}catch(l){t=null!==n?n(s):""}return t}}]),function(){"use strict";angular.module("risevision.widget.common.subscription-status.service",["risevision.common.config","risevision.widget.common.subscription-status.config"]).service("subscriptionStatusService",["$http","$q","STORE_SERVER_URL","PATH_URL",function(e,t,n,a){function i(e,t){return Math.floor((t.getTime()-e.getTime())/s)}var r=["On Trial","Trial Expired","Subscribed","Suspended","Cancelled","Free","Not Subscribed","Product Not Found","Company Not Found","Error"],o=["on-trial","trial-expired","subscribed","suspended","cancelled","free","not-subscribed","product-not-found","company-not-found","error"],s=864e5;this.get=function(s,l){var c=t.defer(),u=n+a.replace("companyId",l)+s;return e.get(u).then(function(e){if(e&&e.data&&e.data.length){var t=e.data[0];t.plural="";var n=r.indexOf(t.status);n>=0&&(t.statusCode=o[n]),""===t.status?(t.status="N/A",t.statusCode="na",t.subscribed=!1):t.subscribed=t.status===r[0]||t.status===r[2]||t.status===r[5]?!0:!1,"not-subscribed"===t.statusCode&&t.trialPeriod&&t.trialPeriod>0&&(t.statusCode="trial-available",t.subscribed=!0),t.expiry&&"on-trial"===t.statusCode&&(t.expiry=new Date(t.expiry),t.expiry instanceof Date&&!isNaN(t.expiry.valueOf())&&(t.expiry=i(new Date,t.expiry)),0===t.expiry?t.plural="-zero":t.expiry>1&&(t.plural="-many")),c.resolve(t)
}else c.reject("No response")}),c.promise}}])}(),function(e){try{e=angular.module("risevision.widget.common.subscription-status")}catch(t){e=angular.module("risevision.widget.common.subscription-status",[])}e.run(["$templateCache",function(e){"use strict";e.put("app-subscription-status-template.html",'<a id="app-subscription-status" href=""\n  ng-click="showStoreModal = true" class="store-link">\n    <div class="rate">\n      <strong>${{productPrice}}</strong>\n    </div>\n    <div class="subscribe">\n      <strong ng-if="!subscriptionStatus.subscribed"><span translate="subscription-status.get-subscription"></span></strong>\n      <strong ng-if="subscriptionStatus.subscribed"><span translate="subscription-status.continue-to-app"></span></strong>\n    </div>\n</a>\n')}])}(),function(e){try{e=angular.module("risevision.widget.common.subscription-status")}catch(t){e=angular.module("risevision.widget.common.subscription-status",[])}e.run(["$templateCache",function(e){"use strict";e.put("store-account-modal-template.html",'<div class="widget" ng-show="showStoreAccountModal">\n  <div class="overlay" ng-click="showStoreAccountModal = false"></div>\n  <div class="settings-center">\n    <div class="wrapper container modal-content">\n      <iframe id="store-account-modal-frame" name="store-account-modal-frame" class="modal-content full-screen-modal">\n        \n      </iframe>\n    </div>\n  </div>\n</div>')}])}(),function(e){try{e=angular.module("risevision.widget.common.subscription-status")}catch(t){e=angular.module("risevision.widget.common.subscription-status",[])}e.run(["$templateCache",function(e){"use strict";e.put("store-modal-template.html",'<div class="widget" ng-show="showStoreModal">\n  <div class="overlay" ng-click="showStoreModal = false"></div>\n  <div class="settings-center">\n    <div class="wrapper container modal-content">\n      <iframe id="store-modal-frame" name="store-modal-frame" class="full-screen-modal">\n        \n      </iframe>\n    </div>\n  </div>\n</div>')}])}(),function(e){try{e=angular.module("risevision.widget.common.subscription-status")}catch(t){e=angular.module("risevision.widget.common.subscription-status",[])}e.run(["$templateCache",function(e){"use strict";e.put("subscription-status-template.html",'<div ng-show="!expandedFormat">\n  <h3 ng-disable-right-click>\n    <span ng-show="subscriptionStatus.statusCode !== \'not-subscribed\'" ng-bind-html="\'subscription-status.\' + subscriptionStatus.statusCode + subscriptionStatus.plural | translate:subscriptionStatus | to_trusted"></span>\n  </h3>\n  \n  <span ng-show="subscriptionStatus.statusCode === \'trial-available\'">\n    <button class="btn btn-primary btn-xs" ng-click="showStoreModal = true;">\n      <span translate="subscription-status.start-trial"></span>\n    </button>\n  </span>\n  <span ng-show="[\'on-trial\', \'trial-expired\', \'cancelled\', \'not-subscribed\'].indexOf(subscriptionStatus.statusCode) >= 0">\n    <button class="btn btn-primary btn-xs" ng-click="showStoreModal = true;">\n      <span translate="subscription-status.subscribe"></span>\n    </button>\n  </span>\n  <span ng-show="[\'suspended\'].indexOf(subscriptionStatus.statusCode) >= 0">\n    <button class="btn btn-primary btn-xs" ng-click="showStoreAccountModal = true;">\n      <span translate="subscription-status.view-account"></span>\n    </button>\n  </span>\n</div>\n\n<div ng-show="expandedFormat">\n  <div class="subscription-status trial" ng-show="subscriptionStatus.statusCode === \'on-trial\'">\n    <span ng-bind-html="\'subscription-status.expanded-\' + subscriptionStatus.statusCode + subscriptionStatus.plural | translate:subscriptionStatus | to_trusted"></span>\n    <button type="button" class="btn btn-primary add-left" ng-click="showStoreModal = true;">\n      <span translate="subscription-status.subscribe-now"></span>\n    </button>\n  </div>\n  <div class="subscription-status expired" ng-show="subscriptionStatus.statusCode === \'trial-expired\'">\n    <span translate="subscription-status.expanded-expired"></span>\n    <button type="button" class="btn btn-primary add-left" ng-click="showStoreModal = true;">\n      <span translate="subscription-status.subscribe-now"></span>\n    </button>\n  </div>\n  <div class="subscription-status cancelled" ng-show="subscriptionStatus.statusCode === \'cancelled\'">\n   <span translate="subscription-status.expanded-cancelled"></span>\n    <button type="button" class="btn btn-primary add-left" ng-click="showStoreModal = true;">\n      <span translate="subscription-status.subscribe-now"></span>\n    </button>\n  </div>\n  <div class="subscription-status suspended" ng-show="subscriptionStatus.statusCode === \'suspended\'">\n    <span translate="subscription-status.expanded-suspended"></span>\n    <button type="button" class="btn btn-primary add-left" ng-click="showStoreAccountModal = true;">\n      <span translate="subscription-status.view-invoices"></span>\n    </button>\n  </div>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.url-field",["risevision.common.i18n","risevision.widget.common.tooltip"]).directive("urlField",["$templateCache","$log",function(e,t){return{restrict:"E",require:"?ngModel",scope:{url:"=",hideLabel:"@",fileType:"@"},template:e.get("_angular/url-field/url-field.html"),link:function(e,n,a,i){function r(e,t){var n,a=e.toLowerCase();switch(t){case"image":n=[".jpg",".jpeg",".png",".bmp",".svg",".gif"];break;case"video":n=[".webm",".mp4",".ogv",".ogg"];break;default:n=[]}for(var i=0,r=n.length;r>i;i++)if(-1!==a.indexOf(n[i]))return!0;return!1}function o(){if("undefined"!==e.fileType&&"undefined"!==e.url&&"image"===e.fileType){var t=new Image;t.onload=function(){e.valid=!0,e.$apply()},t.onerror=function(){e.valid=!1,e.invalidType=e.fileType,e.$apply()},t.src=e.url}}function s(t){var n,a;return n=/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/i,-1===t.indexOf("://")&&(t="http://"+t),a=n.test(t),a&&"undefined"!=typeof e.fileType?(a=r(t,e.fileType),a||(e.invalidType=e.fileType)):e.invalidType="url",a&&o(),a}e.doValidation=!0,e.forcedValid=!1,e.valid=!0,e.invalidType="url",e.allowInitEmpty="undefined"!=typeof a.initEmpty,e.blur=function(){e.$emit("urlFieldBlur")},e.$watch("url",function(t){"undefined"!=typeof t&&null!==t&&(""!==t&&e.allowInitEmpty&&(e.allowInitEmpty=!1),e.doValidation&&!e.allowInitEmpty&&(e.valid=s(e.url)))}),e.$watch("valid",function(e){i&&(t.info("Calling $setValidity() on parent controller"),i.$setValidity("valid",e))}),e.$watch("doValidation",function(t){"undefined"!=typeof e.url&&(t?(e.forcedValid=!1,e.allowInitEmpty||(e.valid=s(e.url))):(e.forcedValid=!0,e.valid=!0))})}}}])}(),function(e){try{e=angular.module("risevision.widget.common.url-field")}catch(t){e=angular.module("risevision.widget.common.url-field",[])}e.run(["$templateCache",function(e){"use strict";e.put("_angular/url-field/url-field.html",'<div class="form-group" >\n  <label ng-if="!hideLabel">{{ "url.label" | translate }}</label>\n  <div>\n    <input name="url" type="text" ng-model="url" ng-blur="blur()" class="form-control" placeholder="http://">\n  </div>\n  <p ng-if="!valid && invalidType === \'url\'" class="text-danger">{{ "url.errors.url" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'image\'" class="text-danger">{{ "url.errors.image" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'video\'" class="text-danger">{{ "url.errors.video" | translate }}</p>\n  <div class="checkbox" ng-show="forcedValid || !valid">\n    <label>\n      <input name="validate-url" ng-click="doValidation = !doValidation" type="checkbox"\n             value="validate-url"> {{"url.validate.label" | translate}}\n    </label>\n  </div>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.file-selector",["risevision.common.i18n","risevision.widget.common.storage-selector","risevision.widget.common.url-field","risevision.widget.common.subscription-status"]).directive("fileSelector",["$templateCache","$log","$window","$rootScope",function(e,t,n,a){return{restrict:"E",require:"?ngModel",scope:{title:"@",fileLabel:"@",folderLabel:"@",companyId:"@",fileType:"@",selector:"="},template:e.get("_angular/file-selector/file-selector.html"),link:function(e,t,i,r){function o(e,t){var n,a=e.toLowerCase();switch(t){case"image":n=[".jpg",".jpeg",".png",".bmp",".svg",".gif"];break;case"video":n=[".webm",".mp4",".ogv",".ogg"];break;default:n=[]}for(var i=0,r=n.length;r>i;i++)if(-1!==a.indexOf(n[i]))return!0;return!1}function s(t){switch(t){case"single-file":e.fileBtnSelected=!0,e.folderBtnSelected=!1,e.customBtnSelected=!1;break;case"single-folder":e.fileBtnSelected=!1,e.folderBtnSelected=!0,e.customBtnSelected=!1;break;case"custom":e.fileBtnSelected=!1,e.folderBtnSelected=!1,e.customBtnSelected=!0;break;default:e.fileBtnSelected=!1,e.folderBtnSelected=!1,e.customBtnSelected=!1}}function l(e,t){var n,a,i,r,o,s,l;if("single-file"===t)n=e.split("storage.googleapis.com/risemedialibrary-")[1],n=decodeURIComponent(n.slice(n.indexOf("/")+1)),a=n.split("/"),o=a.pop(),s=a.length>0?a.join("/"):"",""!==s&&(s+="/"),l=s+o;else if("single-folder"===t){i=e.split("?");for(var c=0;c<i.length;c++)if(r=i[c].split("="),"prefix"===r[0]&&"undefined"!=typeof r[1]&&""!==r[1]){l=decodeURIComponent(r[1]);break}}return l}e.defaultSetting={selection:"",storageName:"",url:""},s(),e.selectorValid=!1,e.customInit=!1,e.isSubscribed=!0,e.hideSubscription="undefined"!=typeof i.hideSubscription,e.subscriptionOff=!0,e.defaults=function(e){if(e)for(var t=1,n=arguments.length;n>t;t++){var a=arguments[t];for(var i in a)void 0===e[i]&&(e[i]=a[i])}return e},e.onCustomBtnHandler=function(){e.selector.selection="custom",e.selector.url="",e.selector.storageName=""},e.previewFile=function(){n.open(e.selector.url,"_blank")},e.$on("picked",function(t,n,i){e.selector.selection=i,e.selector.storageName=l(n[0],e.selector.selection),e.selector.url=n[0],e.isSubscribed||a.$broadcast("refreshSubscriptionStatus",null)}),e.$watch("selectorValid",function(e){r&&r.$setValidity("selectorValid",e)}),e.$watch("selector",function(t){e.defaults(t,e.defaultSetting)}),e.$watch("selector.selection",function(t){"undefined"!=typeof t&&(s(t),e.subscriptionOff=""===t||"custom"===t,"single-folder"===t?e.selectorValid=!0:"custom"===t&&(e.customInit=!0,e.selectorValid=!1),a.$broadcast("fileSelectorClick",t))}),e.$watch("selector.url",function(t){"undefined"!=typeof t&&null!==t&&("single-file"===e.selector.selection&&"undefined"!=typeof e.fileType?e.selectorValid=o(t,e.fileType):"custom"===e.selector.selection&&e.customInit&&""!==t&&(e.customInit=!1,e.selectorValid=!0))}),e.$watch("subscribed",function(t){"undefined"!=typeof t&&"na"!==t.statusCode&&(e.isSubscribed=t.subscribed)})}}}])}(),function(e){try{e=angular.module("risevision.widget.common.file-selector")}catch(t){e=angular.module("risevision.widget.common.file-selector",[])}e.run(["$templateCache",function(e){"use strict";e.put("_angular/file-selector/file-selector.html",'<div class="form-group file-selector">\n  <label ng-if="title" class="control-label remove-bottom">{{ title }}</label>\n\n  <div class="row half-top half-bottom">\n    <div class="col-md-12">\n      <!-- Storage Single File - Button -->\n      <storage-selector selected="fileBtnSelected"\n                        company-id="{{companyId}}"\n                        type="single-file"\n                        label="{{ fileLabel }}"></storage-selector>\n      <!-- Storage Single Folder - Button -->\n      <storage-selector ng-if="folderLabel"\n                        selected="folderBtnSelected"\n                        company-id="{{companyId}}"\n                        type="single-folder"\n                        label="{{ folderLabel }}"></storage-selector>\n      <!-- Custom File - Button -->\n      <button name="customBtn" type="button" class="btn btn-default"\n              ng-class="{active: customBtnSelected}"\n              ng-click="onCustomBtnHandler()">{{ \'file-selector.buttons.custom\' | translate }}\n        <i class="fa fa-link fa-large"></i></button>\n    </div>\n  </div>\n\n  <!-- Storage Single File - Input -->\n  <div class="form-group" ng-if="selector.selection === \'single-file\'">\n    <div class="input-group custom-addon">\n      <input name="storage-file-name" type="text" class="form-control" ng-model="selector.storageName" readonly>\n      <span class="input-group-addon">\n        <button name="previewBtn" class="btn btn-default" ng-click="previewFile()">{{ \'file-selector.buttons.preview\' | translate }}\n          <img src="http://s3.amazonaws.com/Rise-Images/Icons/newtab-icon.png" class="storage-selector-icon icon-right">\n        </button>\n      </span>\n    </div>\n    <p ng-if="!selectorValid && fileType === \'image\'" class="text-danger">{{ "file-selector.errors.storage.image" | translate }}</p>\n    <p ng-if="!selectorValid && fileType === \'video\'" class="text-danger">{{ "file-selector.errors.storage.video" | translate }}</p>\n  </div>\n\n  <!-- Storage Single Folder - Input -->\n  <div ng-if="selector.selection === \'single-folder\'">\n    <input name="storage-folder-name" type="text" class="form-control" ng-model="selector.storageName" readonly>\n  </div>\n\n  <!-- Custom File - Input -->\n  <div ng-if="selector.selection === \'custom\'">\n    <url-field id="customUrl" name="customUrl" url="selector.url"\n               file-type="{{fileType}}"\n               hide-label="true"\n               ng-model="customurlentry" valid init-empty></url-field>\n  </div>\n\n  <!-- Storage Subscription Status -->\n  <div ng-show="!isSubscribed && !hideSubscription && !subscriptionOff" subscription-status expanded-format="true"\n       product-id="24" product-code="b0cba08a4baa0c62b8cdc621b6f6a124f89a03db" company-id="{{companyId}}"\n       ng-model="subscribed">\n  </div>\n\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.position-setting",["risevision.common.i18n"]).directive("positionSetting",["$templateCache","$log",function(e){return{restrict:"E",scope:{position:"=",hideLabel:"@",parentContainerClass:"=",containerClass:"="},template:e.get("_angular/position-setting/position-setting.html"),link:function(e){e.$watch("position",function(t){"undefined"==typeof t&&(e.position="top-left")})}}}])}(),function(e){try{e=angular.module("risevision.widget.common.position-setting")}catch(t){e=angular.module("risevision.widget.common.position-setting",[])}e.run(["$templateCache",function(e){"use strict";e.put("_angular/position-setting/position-setting.html",'<div class="{{parentContainerClass || \'row\'}}">\n  <div class="{{containerClass || \'col-md-4\'}}">\n    <label ng-if="!hideLabel"> {{\'widgets.alignment\' | translate}}</label>\n    <select name="position" ng-model="position" class="form-control">\n      <option value="top-left">{{\'position.top.left\' | translate}}</option>\n      <option value="top-center">{{\'position.top.center\' | translate}}</option>\n      <option value="top-right">{{\'position.top.right\' | translate}}</option>\n      <option value="middle-left">{{\'position.middle.left\' | translate}}</option>\n      <option value="middle-center">{{\'position.middle.center\' | translate}}</option>\n      <option value="middle-right">{{\'position.middle.right\' | translate}}</option>\n      <option value="bottom-left">{{\'position.bottom.left\' | translate}}</option>\n      <option value="bottom-center">{{\'position.bottom.center\' | translate}}</option>\n      <option value="bottom-right">{{\'position.bottom.right\' | translate}}</option>\n    </select>\n  </div>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.widget-button-toolbar",["risevision.common.i18n"]).directive("widgetButtonToolbar",["$templateCache",function(e){return{restrict:"E",scope:{save:"&",cancel:"&",disableSave:"&"},template:e.get("_angular/widget-button-toolbar/widget-button-toolbar.html")}}])}(),function(e){try{e=angular.module("risevision.widget.common.widget-button-toolbar")}catch(t){e=angular.module("risevision.widget.common.widget-button-toolbar",[])}e.run(["$templateCache",function(e){"use strict";e.put("_angular/widget-button-toolbar/widget-button-toolbar.html",'<div class="pull-right">\n  <button id="save" class="btn btn-primary btn-fixed-width" type="button" ng-click="save()" ng-disabled="disableSave()">\n    <span>{{"common.save" | translate}}</span>\n    <i class="fa fa-white fa-check icon-right"></i>\n  </button>\n  <button id="cancel" class="btn btn-default btn-fixed-width" type="button" ng-click="cancel()">\n    <span>{{"common.cancel" | translate}}</span>\n    <i class="fa fa-white fa-times icon-right"></i>\n  </button>\n</div>\n')}])}(),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={STORAGE_ENV:"prod"};angular.module("risevision.widget.image.settings",["risevision.common.i18n","risevision.widget.common","risevision.widget.common.widget-button-toolbar","risevision.widget.common.position-setting","risevision.widget.common.tooltip","risevision.widget.common.file-selector"]),angular.module("risevision.widget.common",[]),angular.module("risevision.widget.common").controller("settingsController",["$scope","settingsSaver","settingsGetter","settingsCloser",function(e,t,n,a){e.settings={params:{},additionalParams:{}},e.alerts=[],e.getAdditionalParam=function(t,n){var a=e.settings.additionalParams[t];return angular.isUndefined(a)?n:a},e.setAdditionalParam=function(t,n){e.settings.additionalParams[t]=n},e.loadAdditionalParams=function(){n.getAdditionalParams().then(function(t){e.settings.additionalParams=t,e.$broadcast("loadAdditionalParams",t)},function(e){alert(e)})},e.setAdditionalParams=function(t,n){e.settings.additionalParams[t]=n},e.saveSettings=function(){e.alerts=[],e.$broadcast("collectAdditionalParams"),t.saveSettings(e.settings).then(function(){},function(t){e.alerts=t.alerts})},e.closeSettings=function(){a.closeSettings().then(function(){},function(t){e.alerts=t.alerts})},e.settings.params=n.getParams(),e.loadAdditionalParams()}]).directive("scrollOnAlerts",function(){return{restrict:"A",scope:!1,link:function(e,t){e.$watchCollection("alerts",function(e,n){e.length>0&&0===n.length&&$("body").animate({scrollTop:t.offset().top},"fast")})}}}),angular.module("risevision.widget.common").constant("STORAGE_FILE_URL_BASE","storage.googleapis.com/risemedialibrary-").constant("STORAGE_FOLDER_URL_BASE","googleapis.com/storage/").factory("commonSettings",["$log","STORAGE_FILE_URL_BASE","STORAGE_FOLDER_URL_BASE",function(e,t,n){var a={getStorageUrlData:function(e){function a(e){return-1!==e.indexOf(t)?"file":-1!==e.indexOf(n)?"folder":null}function i(e){var t=e.split("risemedialibrary-");return t[1].slice(0,t[1].indexOf("/"))}var r,o,s,l,c={};if("file"===a(e))r=e.split(t)[1],r=decodeURIComponent(r.slice(r.indexOf("/")+1)),o=r.split("/"),c.companyId=i(e),c.fileName=o.pop(),c.folder=o.length>0?o.join("/"):"",""!==c.folder&&(c.folder+="/");else if("folder"===a(e)){s=e.split("?");for(var u=0;u<s.length;u++)if(l=s[u].split("="),"prefix"===l[0]&&"undefined"!=typeof l[1]&&""!==l[1]){c.companyId=i(e),c.folder=decodeURIComponent(l[1]),c.fileName="";break}}return c}};return a}]),angular.module("risevision.widget.common").factory("gadgetsApi",["$window",function(e){return e.gadgets}]),angular.module("risevision.widget.common").service("i18nLoader",["$window","$q",function(e,t){var n=t.defer();e.i18n.init({fallbackLng:"en",resGetPath:"locales/__ns_____lng__.json"},function(){n.resolve(e.i18n)}),this.get=function(){return n.promise}}]),angular.module("risevision.widget.common").factory("imageValidator",["$q",function(e){var t={isImage:function(t){var n=e.defer(),a=new Image;return a.onload=function(){n.resolve(!0)},a.onerror=function(){n.resolve(!1)},a.src=t,n.promise}};return t}]),angular.module("risevision.widget.common").service("settingsSaver",["$q","$log","gadgetsApi","settingsParser",function(e,t,n,a){function i(e){var t=angular.copy(e);return delete t.params.id,delete t.params.companyId,delete t.params.rsW,delete t.params.rsH,t}this.saveSettings=function(r,o){var s=e.defer(),l=[],c="";r=i(r),o&&(l=o(r)),l.length>0&&(t.debug("Validation failed.",l),s.reject({alerts:l})),r.params.hasOwnProperty("layoutURL")&&(c+=r.params.layoutURL+"?",delete r.params.layoutURL),c+=a.encodeParams(r.params);var u=a.encodeAdditionalParams(r.additionalParams);return n.rpc.call("","rscmd_saveSettings",function(e){t.debug("encoded settings",JSON.stringify(e)),t.debug("Settings saved. ",r),s.resolve(e)},{params:c,additionalParams:u}),s.promise}}]).service("settingsGetter",["$q","gadgetsApi","$log","settingsParser","$window","defaultSettings",function(e,t,n,a,i,r){this.getAdditionalParams=function(){var i=e.defer(),o=r.additionalParams||{};return t.rpc.call("","rscmd_getAdditionalParams",function(e){e=e?a.parseAdditionalParams(e):{},n.debug("getAdditionalParams returns ",e),i.resolve(angular.extend(o,e))}),i.promise},this.getParams=function(){var e=r.params||{};return angular.extend(e,a.parseParams(i.location.search))}}]).service("settingsParser",[function(){function e(e){return 0===e.indexOf("up_")?e.slice(3):null}this.parseAdditionalParams=function(e){return e?JSON.parse(e):{}},this.encodeAdditionalParams=function(e){return JSON.stringify(e)},this.encodeParams=function(e){var t=[];for(var n in e)if(e.hasOwnProperty(n)){var a;a="object"==typeof e[n]?JSON.stringify(e[n]):e[n],t.push("up_"+encodeURIComponent(n)+"="+encodeURIComponent(a))}return t.join("&")},this.parseParams=function(t){"?"===t[0]&&(t=t.slice(1));for(var n={},a=t.split("&"),i=0;i<a.length;i++){var r=a[i].split("="),o=e(decodeURIComponent(r[0]));if(o)try{n[o]=JSON.parse(decodeURIComponent(r[1]))}catch(s){n[o]=decodeURIComponent(r[1])}}return n}}]).service("settingsCloser",["$q","$log","gadgetsApi",function(e,t,n){this.closeSettings=function(){var t=e.defer();return n.rpc.call("","rscmd_closeSettings",function(){t.resolve(!0)}),t.promise}}]).value("defaultSettings",{}),function(e){"use strict";e.module("risevision.widget.common.visualization",[]).factory("visualizationApi",["$q","$window",function(e,t){var n,a=e.defer(),i={get:function(){return n||(n=a.promise,t.google.visualization?a.resolve(t.google.visualization):t.google.setOnLoadCallback(function(){a.resolve(t.google.visualization)})),n}};return i}])}(angular),angular.module("risevision.widget.image.settings").controller("imageSettingsController",["$scope","$rootScope","$q","$log","commonSettings",function(e,t,n,a,i){e.isFolder=!1,e.$on("fileSelectorClick",function(t,n){e.isFolder="single-folder"===n?!0:!1}),e.$watch("settings.additionalParams.selector.url",function(t){"undefined"!=typeof t&&""!==t&&(e.settings.additionalParams.storage=i.getStorageUrlData(t))}),e.$watch("settings.additionalParams.resume",function(t){"undefined"==typeof t&&(e.settings.additionalParams.resume=!0)}),e.$watch("settings.additionalParams.url",function(t){var n={};"undefined"!=typeof t&&""!==t&&(n=i.getStorageUrlData(t),e.settings.additionalParams.selector=0!==Object.keys(n).length?{selection:"single-file",storageName:n.folder+n.fileName,url:t}:{selection:"custom",storageName:"",url:t},e.settings.additionalParams.url="")})}]).value("defaultSettings",{params:{},additionalParams:{selector:{},storage:{},resume:!0,scaleToFit:!0,position:"middle-center",duration:10,pause:10,autoHide:!1,url:"",background:{}}});
//# sourceMappingURL=data:application/json;base64,
