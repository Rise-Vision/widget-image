if(angular.module("pascalprecht.translate",["ng"]).run(["$translate",function(e){var t=e.storageKey(),n=e.storage(),a=function(){var a=e.preferredLanguage();angular.isString(a)?e.use(a):n.put(t,e.use())};n?n.get(t)?e.use(n.get(t))["catch"](a):a():angular.isString(e.preferredLanguage())&&e.use(e.preferredLanguage())}]),angular.module("pascalprecht.translate").provider("$translate",["$STORAGE_KEY",function(e){var t,n,a,r,i,o,l,s,c,u,d,p,f,g,h,m={},v=[],b=e,y=[],w=!1,$="translate-cloak",k=!1,x=".",S="2.5.2",C=function(){var e,t,n=window.navigator,a=["language","browserLanguage","systemLanguage","userLanguage"];if(angular.isArray(n.languages))for(e=0;e<n.languages.length;e++)if(t=n.languages[e],t&&t.length)return t;for(e=0;e<a.length;e++)if(t=n[a[e]],t&&t.length)return t;return null};C.displayName="angular-translate/service: getFirstBrowserLanguage";var D=function(){return(C()||"").split("-").join("_")};D.displayName="angular-translate/service: getLocale";var T=function(e,t){for(var n=0,a=e.length;a>n;n++)if(e[n]===t)return n;return-1},M=function(){return this.replace(/^\s+|\s+$/g,"")},E=function(e){for(var t=[],a=angular.lowercase(e),r=0,i=v.length;i>r;r++)t.push(angular.lowercase(v[r]));if(T(t,a)>-1)return e;if(n){var o;for(var l in n){var s=!1,c=Object.prototype.hasOwnProperty.call(n,l)&&angular.lowercase(l)===angular.lowercase(e);if("*"===l.slice(-1)&&(s=l.slice(0,-1)===e.slice(0,l.length-1)),(c||s)&&(o=n[l],T(t,angular.lowercase(o))>-1))return o}}var u=e.split("_");return u.length>1&&T(t,angular.lowercase(u[0]))>-1?u[0]:e},O=function(e,t){if(!e&&!t)return m;if(e&&!t){if(angular.isString(e))return m[e]}else angular.isObject(m[e])||(m[e]={}),angular.extend(m[e],A(t));return this};this.translations=O,this.cloakClassName=function(e){return e?($=e,this):$};var A=function(e,t,n,a){var r,i,o,l;t||(t=[]),n||(n={});for(r in e)Object.prototype.hasOwnProperty.call(e,r)&&(l=e[r],angular.isObject(l)?A(l,t.concat(r),n,r):(i=t.length?""+t.join(x)+x+r:r,t.length&&r===a&&(o=""+t.join(x),n[o]="@:"+i),n[i]=l));return n};this.addInterpolation=function(e){return y.push(e),this},this.useMessageFormatInterpolation=function(){return this.useInterpolation("$translateMessageFormatInterpolation")},this.useInterpolation=function(e){return u=e,this},this.useSanitizeValueStrategy=function(e){return w=e,this},this.preferredLanguage=function(e){return _(e),this};var _=function(e){return e&&(t=e),t};this.translationNotFoundIndicator=function(e){return this.translationNotFoundIndicatorLeft(e),this.translationNotFoundIndicatorRight(e),this},this.translationNotFoundIndicatorLeft=function(e){return e?(f=e,this):f},this.translationNotFoundIndicatorRight=function(e){return e?(g=e,this):g},this.fallbackLanguage=function(e){return P(e),this};var P=function(e){return e?(angular.isString(e)?(r=!0,a=[e]):angular.isArray(e)&&(r=!1,a=e),angular.isString(t)&&T(a,t)<0&&a.push(t),this):r?a[0]:a};this.use=function(e){if(e){if(!m[e]&&!d)throw new Error("$translateProvider couldn't find translationTable for langKey: '"+e+"'");return i=e,this}return i};var I=function(e){return e?(b=e,void 0):s?s+b:b};this.storageKey=I,this.useUrlLoader=function(e,t){return this.useLoader("$translateUrlLoader",angular.extend({url:e},t))},this.useStaticFilesLoader=function(e){return this.useLoader("$translateStaticFilesLoader",e)},this.useLoader=function(e,t){return d=e,p=t||{},this},this.useLocalStorage=function(){return this.useStorage("$translateLocalStorage")},this.useCookieStorage=function(){return this.useStorage("$translateCookieStorage")},this.useStorage=function(e){return l=e,this},this.storagePrefix=function(e){return e?(s=e,this):e},this.useMissingTranslationHandlerLog=function(){return this.useMissingTranslationHandler("$translateMissingTranslationHandlerLog")},this.useMissingTranslationHandler=function(e){return c=e,this},this.usePostCompiling=function(e){return k=!!e,this},this.determinePreferredLanguage=function(e){var n=e&&angular.isFunction(e)?e():D();return t=v.length?E(n):n,this},this.registerAvailableLanguageKeys=function(e,t){return e?(v=e,t&&(n=t),this):v},this.useLoaderCache=function(e){return e===!1?h=void 0:e===!0?h=!0:"undefined"==typeof e?h="$translationCache":e&&(h=e),this},this.$get=["$log","$injector","$rootScope","$q",function(e,n,s,v){var x,C,D,L=n.get(u||"$translateDefaultInterpolation"),F=!1,V={},H={},R=function(e,n,r){if(angular.isArray(e)){var o=function(e){for(var t={},a=[],i=function(e){var a=v.defer(),i=function(n){t[e]=n,a.resolve([e,n])};return R(e,n,r).then(i,i),a.promise},o=0,l=e.length;l>o;o++)a.push(i(e[o]));return v.all(a).then(function(){return t})};return o(e)}var s=v.defer();e&&(e=M.apply(e));var c=function(){var e=t?H[t]:H[i];if(C=0,l&&!e){var n=x.get(b);if(e=H[n],a&&a.length){var r=T(a,n);C=0===r?1:0,T(a,t)<0&&a.push(t)}}return e}();return c?c.then(function(){J(e,n,r).then(s.resolve,s.reject)},s.reject):J(e,n,r).then(s.resolve,s.reject),s.promise},q=function(e){return f&&(e=[f,e].join(" ")),g&&(e=[e,g].join(" ")),e},j=function(e){i=e,s.$emit("$translateChangeSuccess",{language:e}),l&&x.put(R.storageKey(),i),L.setLocale(i),angular.forEach(V,function(e,t){V[t].setLocale(i)}),s.$emit("$translateChangeEnd",{language:e})},N=function(e){if(!e)throw"No language key specified for loading.";var t=v.defer();s.$emit("$translateLoadingStart",{language:e}),F=!0;var a=h;"string"==typeof a&&(a=n.get(a));var r=angular.extend({},p,{key:e,$http:angular.extend({},{cache:a},p.$http)});return n.get(d)(r).then(function(n){var a={};s.$emit("$translateLoadingSuccess",{language:e}),angular.isArray(n)?angular.forEach(n,function(e){angular.extend(a,A(e))}):angular.extend(a,A(n)),F=!1,t.resolve({key:e,table:a}),s.$emit("$translateLoadingEnd",{language:e})},function(e){s.$emit("$translateLoadingError",{language:e}),t.reject(e),s.$emit("$translateLoadingEnd",{language:e})}),t.promise};if(l&&(x=n.get(l),!x.get||!x.put))throw new Error("Couldn't use storage '"+l+"', missing get() or put() method!");angular.isFunction(L.useSanitizeValueStrategy)&&L.useSanitizeValueStrategy(w),y.length&&angular.forEach(y,function(e){var a=n.get(e);a.setLocale(t||i),angular.isFunction(a.useSanitizeValueStrategy)&&a.useSanitizeValueStrategy(w),V[a.getInterpolationIdentifier()]=a});var U=function(e){var t=v.defer();return Object.prototype.hasOwnProperty.call(m,e)?t.resolve(m[e]):H[e]?H[e].then(function(e){O(e.key,e.table),t.resolve(e.table)},t.reject):t.reject(),t.promise},z=function(e,t,n,a){var r=v.defer();return U(e).then(function(o){Object.prototype.hasOwnProperty.call(o,t)?(a.setLocale(e),r.resolve(a.interpolate(o[t],n)),a.setLocale(i)):r.reject()},r.reject),r.promise},B=function(e,t,n,a){var r,o=m[e];return o&&Object.prototype.hasOwnProperty.call(o,t)&&(a.setLocale(e),r=a.interpolate(o[t],n),a.setLocale(i)),r},Y=function(e){if(c){var t=n.get(c)(e,i);return void 0!==t?t:e}return e},G=function(e,t,n,r){var i=v.defer();if(e<a.length){var o=a[e];z(o,t,n,r).then(i.resolve,function(){G(e+1,t,n,r).then(i.resolve)})}else i.resolve(Y(t));return i.promise},K=function(e,t,n,r){var i;if(e<a.length){var o=a[e];i=B(o,t,n,r),i||(i=K(e+1,t,n,r))}return i},W=function(e,t,n){return G(D>0?D:C,e,t,n)},X=function(e,t,n){return K(D>0?D:C,e,t,n)},J=function(e,t,n){var r=v.defer(),o=i?m[i]:m,l=n?V[n]:L;if(o&&Object.prototype.hasOwnProperty.call(o,e)){var s=o[e];"@:"===s.substr(0,2)?R(s.substr(2),t,n).then(r.resolve,r.reject):r.resolve(l.interpolate(s,t))}else{var u;c&&!F&&(u=Y(e)),i&&a&&a.length?W(e,t,l).then(function(e){r.resolve(e)},function(e){r.reject(q(e))}):c&&!F&&u?r.resolve(u):r.reject(q(e))}return r.promise},Z=function(e,t,n){var r,o=i?m[i]:m,l=n?V[n]:L;if(o&&Object.prototype.hasOwnProperty.call(o,e)){var s=o[e];r="@:"===s.substr(0,2)?Z(s.substr(2),t,n):l.interpolate(s,t)}else{var u;c&&!F&&(u=Y(e)),i&&a&&a.length?(C=0,r=X(e,t,l)):r=c&&!F&&u?u:q(e)}return r};if(R.preferredLanguage=function(e){return e&&_(e),t},R.cloakClassName=function(){return $},R.fallbackLanguage=function(e){if(void 0!==e&&null!==e){if(P(e),d&&a&&a.length)for(var t=0,n=a.length;n>t;t++)H[a[t]]||(H[a[t]]=N(a[t]));R.use(R.use())}return r?a[0]:a},R.useFallbackLanguage=function(e){if(void 0!==e&&null!==e)if(e){var t=T(a,e);t>-1&&(D=t)}else D=0},R.proposedLanguage=function(){return o},R.storage=function(){return x},R.use=function(e){if(!e)return i;var t=v.defer();s.$emit("$translateChangeStart",{language:e});var n=E(e);return n&&(e=n),m[e]||!d||H[e]?(t.resolve(e),j(e)):(o=e,H[e]=N(e).then(function(n){return O(n.key,n.table),t.resolve(n.key),j(n.key),o===e&&(o=void 0),n},function(e){o===e&&(o=void 0),s.$emit("$translateChangeError",{language:e}),t.reject(e),s.$emit("$translateChangeEnd",{language:e})})),t.promise},R.storageKey=function(){return I()},R.isPostCompilingEnabled=function(){return k},R.refresh=function(e){function t(){r.resolve(),s.$emit("$translateRefreshEnd",{language:e})}function n(){r.reject(),s.$emit("$translateRefreshEnd",{language:e})}if(!d)throw new Error("Couldn't refresh translation table, no loader registered!");var r=v.defer();if(s.$emit("$translateRefreshStart",{language:e}),e)m[e]?N(e).then(function(n){O(n.key,n.table),e===i&&j(i),t()},n):n();else{var o=[],l={};if(a&&a.length)for(var c=0,u=a.length;u>c;c++)o.push(N(a[c])),l[a[c]]=!0;i&&!l[i]&&o.push(N(i)),v.all(o).then(function(e){angular.forEach(e,function(e){m[e.key]&&delete m[e.key],O(e.key,e.table)}),i&&j(i),t()})}return r.promise},R.instant=function(e,n,r){if(null===e||angular.isUndefined(e))return e;if(angular.isArray(e)){for(var o={},l=0,s=e.length;s>l;l++)o[e[l]]=R.instant(e[l],n,r);return o}if(angular.isString(e)&&e.length<1)return e;e&&(e=M.apply(e));var u,d=[];t&&d.push(t),i&&d.push(i),a&&a.length&&(d=d.concat(a));for(var p=0,f=d.length;f>p;p++){var g=d[p];if(m[g]&&"undefined"!=typeof m[g][e]&&(u=Z(e,n,r)),"undefined"!=typeof u)break}return u||""===u||(u=L.interpolate(e,n),c&&!F&&(u=Y(e))),u},R.versionInfo=function(){return S},R.loaderCache=function(){return h},d&&(angular.equals(m,{})&&R.use(R.use()),a&&a.length))for(var Q=function(e){return O(e.key,e.table),s.$emit("$translateChangeEnd",{language:e.key}),e},et=0,tt=a.length;tt>et;et++)H[a[et]]=N(a[et]).then(Q);return R}]}]),angular.module("pascalprecht.translate").factory("$translateDefaultInterpolation",["$interpolate",function(e){var t,n={},a="default",r=null,i={escaped:function(e){var t={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=angular.element("<div></div>").text(e[n]).html());return t}},o=function(e){var t;return t=angular.isFunction(i[r])?i[r](e):e};return n.setLocale=function(e){t=e},n.getInterpolationIdentifier=function(){return a},n.useSanitizeValueStrategy=function(e){return r=e,this},n.interpolate=function(t,n){return r&&(n=o(n)),e(t)(n||{})},n}]),angular.module("pascalprecht.translate").constant("$STORAGE_KEY","NG_TRANSLATE_LANG_KEY"),angular.module("pascalprecht.translate").directive("translate",["$translate","$q","$interpolate","$compile","$parse","$rootScope",function(e,t,n,a,r,i){return{restrict:"AE",scope:!0,compile:function(t,o){var l=o.translateValues?o.translateValues:void 0,s=o.translateInterpolation?o.translateInterpolation:void 0,c=t[0].outerHTML.match(/translate-value-+/i),u="^(.*)("+n.startSymbol()+".*"+n.endSymbol()+")(.*)",d="^(.*)"+n.startSymbol()+"(.*)"+n.endSymbol()+"(.*)";return function(t,p,f){t.interpolateParams={},t.preText="",t.postText="";var g={},h=function(e){if(angular.equals(e,"")||!angular.isDefined(e)){var a=p.text().match(u);angular.isArray(a)?(t.preText=a[1],t.postText=a[3],g.translate=n(a[2])(t.$parent),watcherMatches=p.text().match(d),angular.isArray(watcherMatches)&&watcherMatches[2]&&watcherMatches[2].length&&t.$watch(watcherMatches[2],function(e){g.translate=e,w()})):g.translate=p.text().replace(/^\s+|\s+$/g,"")}else g.translate=e;w()},m=function(e){f.$observe(e,function(t){g[e]=t,w()})};f.$observe("translate",function(e){h(e)});for(var v in f)f.hasOwnProperty(v)&&"translateAttr"===v.substr(0,13)&&m(v);if(f.$observe("translateDefault",function(e){t.defaultText=e}),l&&f.$observe("translateValues",function(e){e&&t.$parent.$watch(function(){angular.extend(t.interpolateParams,r(e)(t.$parent))})}),c){var b=function(e){f.$observe(e,function(n){var a=angular.lowercase(e.substr(14,1))+e.substr(15);t.interpolateParams[a]=n})};for(var y in f)Object.prototype.hasOwnProperty.call(f,y)&&"translateValue"===y.substr(0,14)&&"translateValues"!==y&&b(y)}var w=function(){for(var e in g)g.hasOwnProperty(e)&&g[e]&&$(e,g[e],t,t.interpolateParams)},$=function(t,n,a,r){e(n,r,s).then(function(e){k(e,a,!0,t)},function(e){k(e,a,!1,t)})},k=function(t,n,r,i){if("translate"===i){r||"undefined"==typeof n.defaultText||(t=n.defaultText),p.html(n.preText+t+n.postText);var l=e.isPostCompilingEnabled(),s="undefined"!=typeof o.translateCompile,c=s&&"false"!==o.translateCompile;(l&&!s||c)&&a(p.contents())(n)}else{r||"undefined"==typeof n.defaultText||(t=n.defaultText);var u=f.$attr[i].substr(15);p.attr(u,t)}};t.$watch("interpolateParams",w,!0);var x=i.$on("$translateChangeSuccess",w);p.text().length&&h(""),w(),t.$on("$destroy",x)}}}}]),angular.module("pascalprecht.translate").directive("translateCloak",["$rootScope","$translate",function(e,t){return{compile:function(n){var a=function(){n.addClass(t.cloakClassName())},r=function(){n.removeClass(t.cloakClassName())},i=e.$on("$translateChangeEnd",function(){r(),i(),i=null});return a(),function(e,n,i){i.translateCloak&&i.translateCloak.length&&i.$observe("translateCloak",function(e){t(e).then(r,a)})}}}}]),angular.module("pascalprecht.translate").filter("translate",["$parse","$translate",function(e,t){var n=function(n,a,r){return angular.isObject(a)||(a=e(a)(this)),t.instant(n,a,r)};return n.$stateful=!0,n}]),angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(e,t){return function(n){if(!n||!angular.isString(n.prefix)||!angular.isString(n.suffix))throw new Error("Couldn't load static files, no prefix or suffix specified!");var a=e.defer();return t(angular.extend({url:[n.prefix,n.key,n.suffix].join(""),method:"GET",params:""},n.$http)).success(function(e){a.resolve(e)}).error(function(){a.reject(n.key)}),a.promise}}]),angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(e,t){function n(e,a){t(angular.extend({url:[e.prefix,e.key.toLowerCase(),e.suffix].join(""),method:"GET",params:""},e.$http)).success(function(e){a.resolve(e)}).error(function(){if(e.key.indexOf("_")>=0){var t=e.key.substr(0,e.key.lastIndexOf("_")),r=angular.extend({},e,{key:t});n(r,a)}else a.resolve("{}")})}return function(t){if(!t||!angular.isString(t.prefix)||!angular.isString(t.suffix))throw new Error('Couldn"t load static files, no prefix or suffix specified!');var a=e.defer();return n(t,a),a.promise}}]),angular.module("risevision.common.i18n",["pascalprecht.translate","risevision.common.i18n.config"]).config(["$translateProvider","LOCALES_PREFIX","LOCALES_SUFIX",function(e,t,n){e.useStaticFilesLoader({prefix:t,suffix:n}),e.determinePreferredLanguage().fallbackLanguage("en")}]),angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.transition","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.transition",[]).factory("$transition",["$q","$timeout","$rootScope",function(e,t,n){function a(e){for(var t in e)if(void 0!==i.style[t])return e[t]}var r=function(a,i,o){o=o||{};var l=e.defer(),s=r[o.animation?"animationEndEventName":"transitionEndEventName"],c=function(){n.$apply(function(){a.unbind(s,c),l.resolve(a)})};return s&&a.bind(s,c),t(function(){angular.isString(i)?a.addClass(i):angular.isFunction(i)?i(a):angular.isObject(i)&&a.css(i),s||l.resolve(a)}),l.promise.cancel=function(){s&&a.unbind(s,c),l.reject("Transition cancelled")},l.promise},i=document.createElement("trans"),o={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"},l={WebkitTransition:"webkitAnimationEnd",MozTransition:"animationend",OTransition:"oAnimationEnd",transition:"animationend"};return r.transitionEndEventName=a(o),r.animationEndEventName=a(l),r}]),angular.module("ui.bootstrap.collapse",["ui.bootstrap.transition"]).directive("collapse",["$transition",function(e){return{link:function(t,n,a){function r(t){function a(){c===r&&(c=void 0)}var r=e(n,t);return c&&c.cancel(),c=r,r.then(a,a),r}function i(){u?(u=!1,o()):(n.removeClass("collapse").addClass("collapsing"),r({height:n[0].scrollHeight+"px"}).then(o))}function o(){n.removeClass("collapsing"),n.addClass("collapse in"),n.css({height:"auto"})}function l(){if(u)u=!1,s(),n.css({height:0});else{n.css({height:n[0].scrollHeight+"px"});{n[0].offsetWidth}n.removeClass("collapse in").addClass("collapsing"),r({height:0}).then(s)}}function s(){n.removeClass("collapsing"),n.addClass("collapse")}var c,u=!0;t.$watch(a.collapse,function(e){e?l():i()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("accordionConfig",{closeOthers:!0}).controller("AccordionController",["$scope","$attrs","accordionConfig",function(e,t,n){this.groups=[],this.closeOthers=function(a){var r=angular.isDefined(t.closeOthers)?e.$eval(t.closeOthers):n.closeOthers;r&&angular.forEach(this.groups,function(e){e!==a&&(e.isOpen=!1)})},this.addGroup=function(e){var t=this;this.groups.push(e),e.$on("$destroy",function(){t.removeGroup(e)})},this.removeGroup=function(e){var t=this.groups.indexOf(e);-1!==t&&this.groups.splice(t,1)}}]).directive("accordion",function(){return{restrict:"EA",controller:"AccordionController",transclude:!0,replace:!1,templateUrl:"template/accordion/accordion.html"}}).directive("accordionGroup",function(){return{require:"^accordion",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/accordion/accordion-group.html",scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(e){this.heading=e}},link:function(e,t,n,a){a.addGroup(e),e.$watch("isOpen",function(t){t&&a.closeOthers(e)}),e.toggleOpen=function(){e.isDisabled||(e.isOpen=!e.isOpen)}}}}).directive("accordionHeading",function(){return{restrict:"EA",transclude:!0,template:"",replace:!0,require:"^accordionGroup",link:function(e,t,n,a,r){a.setHeading(r(e,function(){}))}}}).directive("accordionTransclude",function(){return{require:"^accordionGroup",link:function(e,t,n,a){e.$watch(function(){return a[n.accordionTransclude]},function(e){e&&(t.html(""),t.append(e))})}}}),angular.module("ui.bootstrap.alert",[]).controller("AlertController",["$scope","$attrs",function(e,t){e.closeable="close"in t}]).directive("alert",function(){return{restrict:"EA",controller:"AlertController",templateUrl:"template/alert/alert.html",transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}),angular.module("ui.bootstrap.bindHtml",[]).directive("bindHtmlUnsafe",function(){return function(e,t,n){t.addClass("ng-binding").data("$binding",n.bindHtmlUnsafe),e.$watch(n.bindHtmlUnsafe,function(e){t.html(e||"")})}}),angular.module("ui.bootstrap.buttons",[]).constant("buttonConfig",{activeClass:"active",toggleEvent:"click"}).controller("ButtonsController",["buttonConfig",function(e){this.activeClass=e.activeClass||"active",this.toggleEvent=e.toggleEvent||"click"}]).directive("btnRadio",function(){return{require:["btnRadio","ngModel"],controller:"ButtonsController",link:function(e,t,n,a){var r=a[0],i=a[1];i.$render=function(){t.toggleClass(r.activeClass,angular.equals(i.$modelValue,e.$eval(n.btnRadio)))},t.bind(r.toggleEvent,function(){var a=t.hasClass(r.activeClass);(!a||angular.isDefined(n.uncheckable))&&e.$apply(function(){i.$setViewValue(a?null:e.$eval(n.btnRadio)),i.$render()})})}}}).directive("btnCheckbox",function(){return{require:["btnCheckbox","ngModel"],controller:"ButtonsController",link:function(e,t,n,a){function r(){return o(n.btnCheckboxTrue,!0)}function i(){return o(n.btnCheckboxFalse,!1)}function o(t,n){var a=e.$eval(t);return angular.isDefined(a)?a:n}var l=a[0],s=a[1];s.$render=function(){t.toggleClass(l.activeClass,angular.equals(s.$modelValue,r()))},t.bind(l.toggleEvent,function(){e.$apply(function(){s.$setViewValue(t.hasClass(l.activeClass)?i():r()),s.$render()})})}}}),angular.module("ui.bootstrap.carousel",["ui.bootstrap.transition"]).controller("CarouselController",["$scope","$timeout","$transition",function(e,t,n){function a(){r();var n=+e.interval;!isNaN(n)&&n>=0&&(o=t(i,n))}function r(){o&&(t.cancel(o),o=null)}function i(){l?(e.next(),a()):e.pause()}var o,l,s=this,c=s.slides=e.slides=[],u=-1;s.currentSlide=null;var d=!1;s.select=e.select=function(r,i){function o(){if(!d){if(s.currentSlide&&angular.isString(i)&&!e.noTransition&&r.$element){r.$element.addClass(i);{r.$element[0].offsetWidth}angular.forEach(c,function(e){angular.extend(e,{direction:"",entering:!1,leaving:!1,active:!1})}),angular.extend(r,{direction:i,active:!0,entering:!0}),angular.extend(s.currentSlide||{},{direction:i,leaving:!0}),e.$currentTransition=n(r.$element,{}),function(t,n){e.$currentTransition.then(function(){l(t,n)},function(){l(t,n)})}(r,s.currentSlide)}else l(r,s.currentSlide);s.currentSlide=r,u=p,a()}}function l(t,n){angular.extend(t,{direction:"",active:!0,leaving:!1,entering:!1}),angular.extend(n||{},{direction:"",active:!1,leaving:!1,entering:!1}),e.$currentTransition=null}var p=c.indexOf(r);void 0===i&&(i=p>u?"next":"prev"),r&&r!==s.currentSlide&&(e.$currentTransition?(e.$currentTransition.cancel(),t(o)):o())},e.$on("$destroy",function(){d=!0}),s.indexOfSlide=function(e){return c.indexOf(e)},e.next=function(){var t=(u+1)%c.length;return e.$currentTransition?void 0:s.select(c[t],"next")},e.prev=function(){var t=0>u-1?c.length-1:u-1;return e.$currentTransition?void 0:s.select(c[t],"prev")},e.isActive=function(e){return s.currentSlide===e},e.$watch("interval",a),e.$on("$destroy",r),e.play=function(){l||(l=!0,a())},e.pause=function(){e.noPause||(l=!1,r())},s.addSlide=function(t,n){t.$element=n,c.push(t),1===c.length||t.active?(s.select(c[c.length-1]),1==c.length&&e.play()):t.active=!1},s.removeSlide=function(e){var t=c.indexOf(e);c.splice(t,1),c.length>0&&e.active?t>=c.length?s.select(c[t-1]):s.select(c[t]):u>t&&u--}}]).directive("carousel",[function(){return{restrict:"EA",transclude:!0,replace:!0,controller:"CarouselController",require:"carousel",templateUrl:"template/carousel/carousel.html",scope:{interval:"=",noTransition:"=",noPause:"="}}}]).directive("slide",function(){return{require:"^carousel",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/carousel/slide.html",scope:{active:"=?"},link:function(e,t,n,a){a.addSlide(e,t),e.$on("$destroy",function(){a.removeSlide(e)}),e.$watch("active",function(t){t&&a.select(e)})}}}),angular.module("ui.bootstrap.dateparser",[]).service("dateParser",["$locale","orderByFilter",function(e,t){function n(e){var n=[],a=e.split("");return angular.forEach(r,function(t,r){var i=e.indexOf(r);if(i>-1){e=e.split(""),a[i]="("+t.regex+")",e[i]="$";for(var o=i+1,l=i+r.length;l>o;o++)a[o]="",e[o]="$";e=e.join(""),n.push({index:i,apply:t.apply})}}),{regex:new RegExp("^"+a.join("")+"$"),map:t(n,"index")}}function a(e,t,n){return 1===t&&n>28?29===n&&(e%4===0&&e%100!==0||e%400===0):3===t||5===t||8===t||10===t?31>n:!0}this.parsers={};var r={yyyy:{regex:"\\d{4}",apply:function(e){this.year=+e}},yy:{regex:"\\d{2}",apply:function(e){this.year=+e+2e3}},y:{regex:"\\d{1,4}",apply:function(e){this.year=+e}},MMMM:{regex:e.DATETIME_FORMATS.MONTH.join("|"),apply:function(t){this.month=e.DATETIME_FORMATS.MONTH.indexOf(t)}},MMM:{regex:e.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(t){this.month=e.DATETIME_FORMATS.SHORTMONTH.indexOf(t)}},MM:{regex:"0[1-9]|1[0-2]",apply:function(e){this.month=e-1}},M:{regex:"[1-9]|1[0-2]",apply:function(e){this.month=e-1}},dd:{regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e}},d:{regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e}},EEEE:{regex:e.DATETIME_FORMATS.DAY.join("|")},EEE:{regex:e.DATETIME_FORMATS.SHORTDAY.join("|")}};this.parse=function(t,r){if(!angular.isString(t)||!r)return t;r=e.DATETIME_FORMATS[r]||r,this.parsers[r]||(this.parsers[r]=n(r));var i=this.parsers[r],o=i.regex,l=i.map,s=t.match(o);if(s&&s.length){for(var c,u={year:1900,month:0,date:1,hours:0},d=1,p=s.length;p>d;d++){var f=l[d-1];f.apply&&f.apply.call(u,s[d])}return a(u.year,u.month,u.date)&&(c=new Date(u.year,u.month,u.date,u.hours)),c}}}]),angular.module("ui.bootstrap.position",[]).factory("$position",["$document","$window",function(e,t){function n(e,n){return e.currentStyle?e.currentStyle[n]:t.getComputedStyle?t.getComputedStyle(e)[n]:e.style[n]}function a(e){return"static"===(n(e,"position")||"static")}var r=function(t){for(var n=e[0],r=t.offsetParent||n;r&&r!==n&&a(r);)r=r.offsetParent;return r||n};return{position:function(t){var n=this.offset(t),a={top:0,left:0},i=r(t[0]);i!=e[0]&&(a=this.offset(angular.element(i)),a.top+=i.clientTop-i.scrollTop,a.left+=i.clientLeft-i.scrollLeft);var o=t[0].getBoundingClientRect();return{width:o.width||t.prop("offsetWidth"),height:o.height||t.prop("offsetHeight"),top:n.top-a.top,left:n.left-a.left}},offset:function(n){var a=n[0].getBoundingClientRect();return{width:a.width||n.prop("offsetWidth"),height:a.height||n.prop("offsetHeight"),top:a.top+(t.pageYOffset||e[0].documentElement.scrollTop),left:a.left+(t.pageXOffset||e[0].documentElement.scrollLeft)}},positionElements:function(e,t,n,a){var r,i,o,l,s=n.split("-"),c=s[0],u=s[1]||"center";r=a?this.offset(e):this.position(e),i=t.prop("offsetWidth"),o=t.prop("offsetHeight");var d={center:function(){return r.left+r.width/2-i/2},left:function(){return r.left},right:function(){return r.left+r.width}},p={center:function(){return r.top+r.height/2-o/2},top:function(){return r.top},bottom:function(){return r.top+r.height}};switch(c){case"right":l={top:p[u](),left:d[c]()};break;case"left":l={top:p[u](),left:r.left-i};break;case"bottom":l={top:p[c](),left:d[u]()};break;default:l={top:r.top-o,left:d[u]()}}return l}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.position"]).constant("datepickerConfig",{formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",datepickerMode:"day",minMode:"day",maxMode:"year",showWeeks:!0,startingDay:0,yearRange:20,minDate:null,maxDate:null}).controller("DatepickerController",["$scope","$attrs","$parse","$interpolate","$timeout","$log","dateFilter","datepickerConfig",function(e,t,n,a,r,i,o,l){var s=this,c={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","minMode","maxMode","showWeeks","startingDay","yearRange"],function(n,r){s[n]=angular.isDefined(t[n])?8>r?a(t[n])(e.$parent):e.$parent.$eval(t[n]):l[n]}),angular.forEach(["minDate","maxDate"],function(a){t[a]?e.$parent.$watch(n(t[a]),function(e){s[a]=e?new Date(e):null,s.refreshView()}):s[a]=l[a]?new Date(l[a]):null}),e.datepickerMode=e.datepickerMode||l.datepickerMode,e.uniqueId="datepicker-"+e.$id+"-"+Math.floor(1e4*Math.random()),this.activeDate=angular.isDefined(t.initDate)?e.$parent.$eval(t.initDate):new Date,e.isActive=function(t){return 0===s.compare(t.date,s.activeDate)?(e.activeDateId=t.uid,!0):!1},this.init=function(e){c=e,c.$render=function(){s.render()}},this.render=function(){if(c.$modelValue){var e=new Date(c.$modelValue),t=!isNaN(e);t?this.activeDate=e:i.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.'),c.$setValidity("date",t)}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var e=c.$modelValue?new Date(c.$modelValue):null;c.$setValidity("date-disabled",!e||this.element&&!this.isDisabled(e))}},this.createDateObject=function(e,t){var n=c.$modelValue?new Date(c.$modelValue):null;return{date:e,label:o(e,t),selected:n&&0===this.compare(e,n),disabled:this.isDisabled(e),current:0===this.compare(e,new Date)}},this.isDisabled=function(n){return this.minDate&&this.compare(n,this.minDate)<0||this.maxDate&&this.compare(n,this.maxDate)>0||t.dateDisabled&&e.dateDisabled({date:n,mode:e.datepickerMode})},this.split=function(e,t){for(var n=[];e.length>0;)n.push(e.splice(0,t));return n},e.select=function(t){if(e.datepickerMode===s.minMode){var n=c.$modelValue?new Date(c.$modelValue):new Date(0,0,0,0,0,0,0);n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),c.$setViewValue(n),c.$render()}else s.activeDate=t,e.datepickerMode=s.modes[s.modes.indexOf(e.datepickerMode)-1]},e.move=function(e){var t=s.activeDate.getFullYear()+e*(s.step.years||0),n=s.activeDate.getMonth()+e*(s.step.months||0);s.activeDate.setFullYear(t,n,1),s.refreshView()},e.toggleMode=function(t){t=t||1,e.datepickerMode===s.maxMode&&1===t||e.datepickerMode===s.minMode&&-1===t||(e.datepickerMode=s.modes[s.modes.indexOf(e.datepickerMode)+t])},e.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var u=function(){r(function(){s.element[0].focus()},0,!1)};e.$on("datepicker.focus",u),e.keydown=function(t){var n=e.keys[t.which];if(n&&!t.shiftKey&&!t.altKey)if(t.preventDefault(),t.stopPropagation(),"enter"===n||"space"===n){if(s.isDisabled(s.activeDate))return;e.select(s.activeDate),u()}else!t.ctrlKey||"up"!==n&&"down"!==n?(s.handleKeyDown(n,t),s.refreshView()):(e.toggleMode("up"===n?1:-1),u())}}]).directive("datepicker",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/datepicker.html",scope:{datepickerMode:"=?",dateDisabled:"&"},require:["datepicker","?^ngModel"],controller:"DatepickerController",link:function(e,t,n,a){var r=a[0],i=a[1];i&&r.init(i)}}}).directive("daypicker",["dateFilter",function(e){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/day.html",require:"^datepicker",link:function(t,n,a,r){function i(e,t){return 1!==t||e%4!==0||e%100===0&&e%400!==0?s[t]:29}function o(e,t){var n=new Array(t),a=new Date(e),r=0;for(a.setHours(12);t>r;)n[r++]=new Date(a),a.setDate(a.getDate()+1);return n}function l(e){var t=new Date(e);t.setDate(t.getDate()+4-(t.getDay()||7));var n=t.getTime();return t.setMonth(0),t.setDate(1),Math.floor(Math.round((n-t)/864e5)/7)+1}t.showWeeks=r.showWeeks,r.step={months:1},r.element=n;var s=[31,28,31,30,31,30,31,31,30,31,30,31];r._refreshView=function(){var n=r.activeDate.getFullYear(),a=r.activeDate.getMonth(),i=new Date(n,a,1),s=r.startingDay-i.getDay(),c=s>0?7-s:-s,u=new Date(i);c>0&&u.setDate(-c+1);for(var d=o(u,42),p=0;42>p;p++)d[p]=angular.extend(r.createDateObject(d[p],r.formatDay),{secondary:d[p].getMonth()!==a,uid:t.uniqueId+"-"+p});
t.labels=new Array(7);for(var f=0;7>f;f++)t.labels[f]={abbr:e(d[f].date,r.formatDayHeader),full:e(d[f].date,"EEEE")};if(t.title=e(r.activeDate,r.formatDayTitle),t.rows=r.split(d,7),t.showWeeks){t.weekNumbers=[];for(var g=l(t.rows[0][0].date),h=t.rows.length;t.weekNumbers.push(g++)<h;);}},r.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate())-new Date(t.getFullYear(),t.getMonth(),t.getDate())},r.handleKeyDown=function(e){var t=r.activeDate.getDate();if("left"===e)t-=1;else if("up"===e)t-=7;else if("right"===e)t+=1;else if("down"===e)t+=7;else if("pageup"===e||"pagedown"===e){var n=r.activeDate.getMonth()+("pageup"===e?-1:1);r.activeDate.setMonth(n,1),t=Math.min(i(r.activeDate.getFullYear(),r.activeDate.getMonth()),t)}else"home"===e?t=1:"end"===e&&(t=i(r.activeDate.getFullYear(),r.activeDate.getMonth()));r.activeDate.setDate(t)},r.refreshView()}}}]).directive("monthpicker",["dateFilter",function(e){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/month.html",require:"^datepicker",link:function(t,n,a,r){r.step={years:1},r.element=n,r._refreshView=function(){for(var n=new Array(12),a=r.activeDate.getFullYear(),i=0;12>i;i++)n[i]=angular.extend(r.createDateObject(new Date(a,i,1),r.formatMonth),{uid:t.uniqueId+"-"+i});t.title=e(r.activeDate,r.formatMonthTitle),t.rows=r.split(n,3)},r.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth())-new Date(t.getFullYear(),t.getMonth())},r.handleKeyDown=function(e){var t=r.activeDate.getMonth();if("left"===e)t-=1;else if("up"===e)t-=3;else if("right"===e)t+=1;else if("down"===e)t+=3;else if("pageup"===e||"pagedown"===e){var n=r.activeDate.getFullYear()+("pageup"===e?-1:1);r.activeDate.setFullYear(n)}else"home"===e?t=0:"end"===e&&(t=11);r.activeDate.setMonth(t)},r.refreshView()}}}]).directive("yearpicker",["dateFilter",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/year.html",require:"^datepicker",link:function(e,t,n,a){function r(e){return parseInt((e-1)/i,10)*i+1}var i=a.yearRange;a.step={years:i},a.element=t,a._refreshView=function(){for(var t=new Array(i),n=0,o=r(a.activeDate.getFullYear());i>n;n++)t[n]=angular.extend(a.createDateObject(new Date(o+n,0,1),a.formatYear),{uid:e.uniqueId+"-"+n});e.title=[t[0].label,t[i-1].label].join(" - "),e.rows=a.split(t,5)},a.compare=function(e,t){return e.getFullYear()-t.getFullYear()},a.handleKeyDown=function(e){var t=a.activeDate.getFullYear();"left"===e?t-=1:"up"===e?t-=5:"right"===e?t+=1:"down"===e?t+=5:"pageup"===e||"pagedown"===e?t+=("pageup"===e?-1:1)*a.step.years:"home"===e?t=r(a.activeDate.getFullYear()):"end"===e&&(t=r(a.activeDate.getFullYear())+i-1),a.activeDate.setFullYear(t)},a.refreshView()}}}]).constant("datepickerPopupConfig",{datepickerPopup:"yyyy-MM-dd",currentText:"Today",clearText:"Clear",closeText:"Done",closeOnDateSelection:!0,appendToBody:!1,showButtonBar:!0}).directive("datepickerPopup",["$compile","$parse","$document","$position","dateFilter","dateParser","datepickerPopupConfig",function(e,t,n,a,r,i,o){return{restrict:"EA",require:"ngModel",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&"},link:function(l,s,c,u){function d(e){return e.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()})}function p(e){if(e){if(angular.isDate(e)&&!isNaN(e))return u.$setValidity("date",!0),e;if(angular.isString(e)){var t=i.parse(e,f)||new Date(e);return isNaN(t)?(u.$setValidity("date",!1),void 0):(u.$setValidity("date",!0),t)}return u.$setValidity("date",!1),void 0}return u.$setValidity("date",!0),null}var f,g=angular.isDefined(c.closeOnDateSelection)?l.$parent.$eval(c.closeOnDateSelection):o.closeOnDateSelection,h=angular.isDefined(c.datepickerAppendToBody)?l.$parent.$eval(c.datepickerAppendToBody):o.appendToBody;l.showButtonBar=angular.isDefined(c.showButtonBar)?l.$parent.$eval(c.showButtonBar):o.showButtonBar,l.getText=function(e){return l[e+"Text"]||o[e+"Text"]},c.$observe("datepickerPopup",function(e){f=e||o.datepickerPopup,u.$render()});var m=angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");m.attr({"ng-model":"date","ng-change":"dateSelection()"});var v=angular.element(m.children()[0]);c.datepickerOptions&&angular.forEach(l.$parent.$eval(c.datepickerOptions),function(e,t){v.attr(d(t),e)}),l.watchData={},angular.forEach(["minDate","maxDate","datepickerMode"],function(e){if(c[e]){var n=t(c[e]);if(l.$parent.$watch(n,function(t){l.watchData[e]=t}),v.attr(d(e),"watchData."+e),"datepickerMode"===e){var a=n.assign;l.$watch("watchData."+e,function(e,t){e!==t&&a(l.$parent,e)})}}}),c.dateDisabled&&v.attr("date-disabled","dateDisabled({ date: date, mode: mode })"),u.$parsers.unshift(p),l.dateSelection=function(e){angular.isDefined(e)&&(l.date=e),u.$setViewValue(l.date),u.$render(),g&&(l.isOpen=!1,s[0].focus())},s.bind("input change keyup",function(){l.$apply(function(){l.date=u.$modelValue})}),u.$render=function(){var e=u.$viewValue?r(u.$viewValue,f):"";s.val(e),l.date=p(u.$modelValue)};var b=function(e){l.isOpen&&e.target!==s[0]&&l.$apply(function(){l.isOpen=!1})},y=function(e){l.keydown(e)};s.bind("keydown",y),l.keydown=function(e){27===e.which?(e.preventDefault(),e.stopPropagation(),l.close()):40!==e.which||l.isOpen||(l.isOpen=!0)},l.$watch("isOpen",function(e){e?(l.$broadcast("datepicker.focus"),l.position=h?a.offset(s):a.position(s),l.position.top=l.position.top+s.prop("offsetHeight"),n.bind("click",b)):n.unbind("click",b)}),l.select=function(e){if("today"===e){var t=new Date;angular.isDate(u.$modelValue)?(e=new Date(u.$modelValue),e.setFullYear(t.getFullYear(),t.getMonth(),t.getDate())):e=new Date(t.setHours(0,0,0,0))}l.dateSelection(e)},l.close=function(){l.isOpen=!1,s[0].focus()};var w=e(m)(l);m.remove(),h?n.find("body").append(w):s.after(w),l.$on("$destroy",function(){w.remove(),s.unbind("keydown",y),n.unbind("click",b)})}}}]).directive("datepickerPopupWrap",function(){return{restrict:"EA",replace:!0,transclude:!0,templateUrl:"template/datepicker/popup.html",link:function(e,t){t.bind("click",function(e){e.preventDefault(),e.stopPropagation()})}}}),angular.module("ui.bootstrap.dropdown",[]).constant("dropdownConfig",{openClass:"open"}).service("dropdownService",["$document",function(e){var t=null;this.open=function(r){t||(e.bind("click",n),e.bind("keydown",a)),t&&t!==r&&(t.isOpen=!1),t=r},this.close=function(r){t===r&&(t=null,e.unbind("click",n),e.unbind("keydown",a))};var n=function(e){var n=t.getToggleElement();e&&n&&n[0].contains(e.target)||t.$apply(function(){t.isOpen=!1})},a=function(e){27===e.which&&(t.focusToggleElement(),n())}}]).controller("DropdownController",["$scope","$attrs","$parse","dropdownConfig","dropdownService","$animate",function(e,t,n,a,r,i){var o,l=this,s=e.$new(),c=a.openClass,u=angular.noop,d=t.onToggle?n(t.onToggle):angular.noop;this.init=function(a){l.$element=a,t.isOpen&&(o=n(t.isOpen),u=o.assign,e.$watch(o,function(e){s.isOpen=!!e}))},this.toggle=function(e){return s.isOpen=arguments.length?!!e:!s.isOpen},this.isOpen=function(){return s.isOpen},s.getToggleElement=function(){return l.toggleElement},s.focusToggleElement=function(){l.toggleElement&&l.toggleElement[0].focus()},s.$watch("isOpen",function(t,n){i[t?"addClass":"removeClass"](l.$element,c),t?(s.focusToggleElement(),r.open(s)):r.close(s),u(e,t),angular.isDefined(t)&&t!==n&&d(e,{open:!!t})}),e.$on("$locationChangeSuccess",function(){s.isOpen=!1}),e.$on("$destroy",function(){s.$destroy()})}]).directive("dropdown",function(){return{restrict:"CA",controller:"DropdownController",link:function(e,t,n,a){a.init(t)}}}).directive("dropdownToggle",function(){return{restrict:"CA",require:"?^dropdown",link:function(e,t,n,a){if(a){a.toggleElement=t;var r=function(r){r.preventDefault(),t.hasClass("disabled")||n.disabled||e.$apply(function(){a.toggle()})};t.bind("click",r),t.attr({"aria-haspopup":!0,"aria-expanded":!1}),e.$watch(a.isOpen,function(e){t.attr("aria-expanded",!!e)}),e.$on("$destroy",function(){t.unbind("click",r)})}}}}),angular.module("ui.bootstrap.modal",["ui.bootstrap.transition"]).factory("$$stackedMap",function(){return{createNew:function(){var e=[];return{add:function(t,n){e.push({key:t,value:n})},get:function(t){for(var n=0;n<e.length;n++)if(t==e[n].key)return e[n]},keys:function(){for(var t=[],n=0;n<e.length;n++)t.push(e[n].key);return t},top:function(){return e[e.length-1]},remove:function(t){for(var n=-1,a=0;a<e.length;a++)if(t==e[a].key){n=a;break}return e.splice(n,1)[0]},removeTop:function(){return e.splice(e.length-1,1)[0]},length:function(){return e.length}}}}}).directive("modalBackdrop",["$timeout",function(e){return{restrict:"EA",replace:!0,templateUrl:"template/modal/backdrop.html",link:function(t,n,a){t.backdropClass=a.backdropClass||"",t.animate=!1,e(function(){t.animate=!0})}}}]).directive("modalWindow",["$modalStack","$timeout",function(e,t){return{restrict:"EA",scope:{index:"@",animate:"="},replace:!0,transclude:!0,templateUrl:function(e,t){return t.templateUrl||"template/modal/window.html"},link:function(n,a,r){a.addClass(r.windowClass||""),n.size=r.size,t(function(){n.animate=!0,a[0].querySelectorAll("[autofocus]").length||a[0].focus()}),n.close=function(t){var n=e.getTop();n&&n.value.backdrop&&"static"!=n.value.backdrop&&t.target===t.currentTarget&&(t.preventDefault(),t.stopPropagation(),e.dismiss(n.key,"backdrop click"))}}}}]).directive("modalTransclude",function(){return{link:function(e,t,n,a,r){r(e.$parent,function(e){t.empty(),t.append(e)})}}}).factory("$modalStack",["$transition","$timeout","$document","$compile","$rootScope","$$stackedMap",function(e,t,n,a,r,i){function o(){for(var e=-1,t=f.keys(),n=0;n<t.length;n++)f.get(t[n]).value.backdrop&&(e=n);return e}function l(e){var t=n.find("body").eq(0),a=f.get(e).value;f.remove(e),c(a.modalDomEl,a.modalScope,300,function(){a.modalScope.$destroy(),t.toggleClass(p,f.length()>0),s()})}function s(){if(u&&-1==o()){var e=d;c(u,d,150,function(){e.$destroy(),e=null}),u=void 0,d=void 0}}function c(n,a,r,i){function o(){o.done||(o.done=!0,n.remove(),i&&i())}a.animate=!1;var l=e.transitionEndEventName;if(l){var s=t(o,r);n.bind(l,function(){t.cancel(s),o(),a.$apply()})}else t(o)}var u,d,p="modal-open",f=i.createNew(),g={};return r.$watch(o,function(e){d&&(d.index=e)}),n.bind("keydown",function(e){var t;27===e.which&&(t=f.top(),t&&t.value.keyboard&&(e.preventDefault(),r.$apply(function(){g.dismiss(t.key,"escape key press")})))}),g.open=function(e,t){f.add(e,{deferred:t.deferred,modalScope:t.scope,backdrop:t.backdrop,keyboard:t.keyboard});var i=n.find("body").eq(0),l=o();if(l>=0&&!u){d=r.$new(!0),d.index=l;var s=angular.element("<div modal-backdrop></div>");s.attr("backdrop-class",t.backdropClass),u=a(s)(d),i.append(u)}var c=angular.element("<div modal-window></div>");c.attr({"template-url":t.windowTemplateUrl,"window-class":t.windowClass,size:t.size,index:f.length()-1,animate:"animate"}).html(t.content);var g=a(c)(t.scope);f.top().value.modalDomEl=g,i.append(g),i.addClass(p)},g.close=function(e,t){var n=f.get(e);n&&(n.value.deferred.resolve(t),l(e))},g.dismiss=function(e,t){var n=f.get(e);n&&(n.value.deferred.reject(t),l(e))},g.dismissAll=function(e){for(var t=this.getTop();t;)this.dismiss(t.key,e),t=this.getTop()},g.getTop=function(){return f.top()},g}]).provider("$modal",function(){var e={options:{backdrop:!0,keyboard:!0},$get:["$injector","$rootScope","$q","$http","$templateCache","$controller","$modalStack",function(t,n,a,r,i,o,l){function s(e){return e.template?a.when(e.template):r.get(angular.isFunction(e.templateUrl)?e.templateUrl():e.templateUrl,{cache:i}).then(function(e){return e.data})}function c(e){var n=[];return angular.forEach(e,function(e){(angular.isFunction(e)||angular.isArray(e))&&n.push(a.when(t.invoke(e)))}),n}var u={};return u.open=function(t){var r=a.defer(),i=a.defer(),u={result:r.promise,opened:i.promise,close:function(e){l.close(u,e)},dismiss:function(e){l.dismiss(u,e)}};if(t=angular.extend({},e.options,t),t.resolve=t.resolve||{},!t.template&&!t.templateUrl)throw new Error("One of template or templateUrl options is required.");var d=a.all([s(t)].concat(c(t.resolve)));return d.then(function(e){var a=(t.scope||n).$new();a.$close=u.close,a.$dismiss=u.dismiss;var i,s={},c=1;t.controller&&(s.$scope=a,s.$modalInstance=u,angular.forEach(t.resolve,function(t,n){s[n]=e[c++]}),i=o(t.controller,s),t.controllerAs&&(a[t.controllerAs]=i)),l.open(u,{scope:a,deferred:r,content:e[0],backdrop:t.backdrop,keyboard:t.keyboard,backdropClass:t.backdropClass,windowClass:t.windowClass,windowTemplateUrl:t.windowTemplateUrl,size:t.size})},function(e){r.reject(e)}),d.then(function(){i.resolve(!0)},function(){i.reject(!1)}),u},u}]};return e}),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(e,t,n){var a=this,r={$setViewValue:angular.noop},i=t.numPages?n(t.numPages).assign:angular.noop;this.init=function(i,o){r=i,this.config=o,r.$render=function(){a.render()},t.itemsPerPage?e.$parent.$watch(n(t.itemsPerPage),function(t){a.itemsPerPage=parseInt(t,10),e.totalPages=a.calculateTotalPages()}):this.itemsPerPage=o.itemsPerPage},this.calculateTotalPages=function(){var t=this.itemsPerPage<1?1:Math.ceil(e.totalItems/this.itemsPerPage);return Math.max(t||0,1)},this.render=function(){e.page=parseInt(r.$viewValue,10)||1},e.selectPage=function(t){e.page!==t&&t>0&&t<=e.totalPages&&(r.$setViewValue(t),r.$render())},e.getText=function(t){return e[t+"Text"]||a.config[t+"Text"]},e.noPrevious=function(){return 1===e.page},e.noNext=function(){return e.page===e.totalPages},e.$watch("totalItems",function(){e.totalPages=a.calculateTotalPages()}),e.$watch("totalPages",function(t){i(e.$parent,t),e.page>t?e.selectPage(t):r.$render()})}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(e,t){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@"},require:["pagination","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pagination.html",replace:!0,link:function(n,a,r,i){function o(e,t,n){return{number:e,text:t,active:n}}function l(e,t){var n=[],a=1,r=t,i=angular.isDefined(u)&&t>u;i&&(d?(a=Math.max(e-Math.floor(u/2),1),r=a+u-1,r>t&&(r=t,a=r-u+1)):(a=(Math.ceil(e/u)-1)*u+1,r=Math.min(a+u-1,t)));for(var l=a;r>=l;l++){var s=o(l,l,l===e);n.push(s)}if(i&&!d){if(a>1){var c=o(a-1,"...",!1);n.unshift(c)}if(t>r){var p=o(r+1,"...",!1);n.push(p)}}return n}var s=i[0],c=i[1];if(c){var u=angular.isDefined(r.maxSize)?n.$parent.$eval(r.maxSize):t.maxSize,d=angular.isDefined(r.rotate)?n.$parent.$eval(r.rotate):t.rotate;n.boundaryLinks=angular.isDefined(r.boundaryLinks)?n.$parent.$eval(r.boundaryLinks):t.boundaryLinks,n.directionLinks=angular.isDefined(r.directionLinks)?n.$parent.$eval(r.directionLinks):t.directionLinks,s.init(c,t),r.maxSize&&n.$parent.$watch(e(r.maxSize),function(e){u=parseInt(e,10),s.render()});var p=s.render;s.render=function(){p(),n.page>0&&n.page<=n.totalPages&&(n.pages=l(n.page,n.totalPages))}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("pager",["pagerConfig",function(e){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@"},require:["pager","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pager.html",replace:!0,link:function(t,n,a,r){var i=r[0],o=r[1];o&&(t.align=angular.isDefined(a.align)?t.$parent.$eval(a.align):e.align,i.init(o,e))}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).provider("$tooltip",function(){function e(e){var t=/[A-Z]/g,n="-";return e.replace(t,function(e,t){return(t?n:"")+e.toLowerCase()})}var t={placement:"top",animation:!0,popupDelay:0},n={mouseenter:"mouseleave",click:"click",focus:"blur"},a={};this.options=function(e){angular.extend(a,e)},this.setTriggers=function(e){angular.extend(n,e)},this.$get=["$window","$compile","$timeout","$parse","$document","$position","$interpolate",function(r,i,o,l,s,c,u){return function(r,d,p){function f(e){var t=e||g.trigger||p,a=n[t]||t;return{show:t,hide:a}}var g=angular.extend({},t,a),h=e(r),m=u.startSymbol(),v=u.endSymbol(),b="<div "+h+'-popup title="'+m+"tt_title"+v+'" content="'+m+"tt_content"+v+'" placement="'+m+"tt_placement"+v+'" animation="tt_animation" is-open="tt_isOpen"></div>';return{restrict:"EA",scope:!0,compile:function(){var e=i(b);return function(t,n,a){function i(){t.tt_isOpen?p():u()}function u(){(!S||t.$eval(a[d+"Enable"]))&&(t.tt_popupDelay?$||($=o(h,t.tt_popupDelay,!1),$.then(function(e){e()})):h()())}function p(){t.$apply(function(){m()})}function h(){return $=null,w&&(o.cancel(w),w=null),t.tt_content?(v(),y.css({top:0,left:0,display:"block"}),k?s.find("body").append(y):n.after(y),C(),t.tt_isOpen=!0,t.$digest(),C):angular.noop}function m(){t.tt_isOpen=!1,o.cancel($),$=null,t.tt_animation?w||(w=o(b,500)):b()}function v(){y&&b(),y=e(t,function(){}),t.$digest()}function b(){w=null,y&&(y.remove(),y=null)}var y,w,$,k=angular.isDefined(g.appendToBody)?g.appendToBody:!1,x=f(void 0),S=angular.isDefined(a[d+"Enable"]),C=function(){var e=c.positionElements(n,y,t.tt_placement,k);e.top+="px",e.left+="px",y.css(e)};t.tt_isOpen=!1,a.$observe(r,function(e){t.tt_content=e,!e&&t.tt_isOpen&&m()}),a.$observe(d+"Title",function(e){t.tt_title=e}),a.$observe(d+"Placement",function(e){t.tt_placement=angular.isDefined(e)?e:g.placement}),a.$observe(d+"PopupDelay",function(e){var n=parseInt(e,10);t.tt_popupDelay=isNaN(n)?g.popupDelay:n});var D=function(){n.unbind(x.show,u),n.unbind(x.hide,p)};a.$observe(d+"Trigger",function(e){D(),x=f(e),x.show===x.hide?n.bind(x.show,i):(n.bind(x.show,u),n.bind(x.hide,p))});var T=t.$eval(a[d+"Animation"]);t.tt_animation=angular.isDefined(T)?!!T:g.animation,a.$observe(d+"AppendToBody",function(e){k=angular.isDefined(e)?l(e)(t):k}),k&&t.$on("$locationChangeSuccess",function(){t.tt_isOpen&&m()}),t.$on("$destroy",function(){o.cancel(w),o.cancel($),D(),b()})}}}}}]}).directive("tooltipPopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html"}}).directive("tooltip",["$tooltip",function(e){return e("tooltip","tooltip","mouseenter")}]).directive("tooltipHtmlUnsafePopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-unsafe-popup.html"}}).directive("tooltipHtmlUnsafe",["$tooltip",function(e){return e("tooltipHtmlUnsafe","tooltip","mouseenter")}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("popoverPopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html"}}).directive("popover",["$tooltip",function(e){return e("popover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).controller("ProgressController",["$scope","$attrs","progressConfig",function(e,t,n){var a=this,r=angular.isDefined(t.animate)?e.$parent.$eval(t.animate):n.animate;this.bars=[],e.max=angular.isDefined(t.max)?e.$parent.$eval(t.max):n.max,this.addBar=function(t,n){r||n.css({transition:"none"}),this.bars.push(t),t.$watch("value",function(n){t.percent=+(100*n/e.max).toFixed(2)}),t.$on("$destroy",function(){n=null,a.removeBar(t)})},this.removeBar=function(e){this.bars.splice(this.bars.indexOf(e),1)}}]).directive("progress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{},templateUrl:"template/progressbar/progress.html"}}).directive("bar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(e,t,n,a){a.addBar(e,t)}}}).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(e,t,n,a){a.addBar(e,angular.element(t.children()[0]))}}}),angular.module("ui.bootstrap.rating",[]).constant("ratingConfig",{max:5,stateOn:null,stateOff:null}).controller("RatingController",["$scope","$attrs","ratingConfig",function(e,t,n){var a={$setViewValue:angular.noop};this.init=function(r){a=r,a.$render=this.render,this.stateOn=angular.isDefined(t.stateOn)?e.$parent.$eval(t.stateOn):n.stateOn,this.stateOff=angular.isDefined(t.stateOff)?e.$parent.$eval(t.stateOff):n.stateOff;var i=angular.isDefined(t.ratingStates)?e.$parent.$eval(t.ratingStates):new Array(angular.isDefined(t.max)?e.$parent.$eval(t.max):n.max);e.range=this.buildTemplateObjects(i)},this.buildTemplateObjects=function(e){for(var t=0,n=e.length;n>t;t++)e[t]=angular.extend({index:t},{stateOn:this.stateOn,stateOff:this.stateOff},e[t]);return e},e.rate=function(t){!e.readonly&&t>=0&&t<=e.range.length&&(a.$setViewValue(t),a.$render())},e.enter=function(t){e.readonly||(e.value=t),e.onHover({value:t})},e.reset=function(){e.value=a.$viewValue,e.onLeave()},e.onKeydown=function(t){/(37|38|39|40)/.test(t.which)&&(t.preventDefault(),t.stopPropagation(),e.rate(e.value+(38===t.which||39===t.which?1:-1)))},this.render=function(){e.value=a.$viewValue}}]).directive("rating",function(){return{restrict:"EA",require:["rating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"RatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(e,t,n,a){var r=a[0],i=a[1];i&&r.init(i)}}}),angular.module("ui.bootstrap.tabs",[]).controller("TabsetController",["$scope",function(e){var t=this,n=t.tabs=e.tabs=[];t.select=function(e){angular.forEach(n,function(t){t.active&&t!==e&&(t.active=!1,t.onDeselect())}),e.active=!0,e.onSelect()},t.addTab=function(e){n.push(e),1===n.length?e.active=!0:e.active&&t.select(e)},t.removeTab=function(e){var a=n.indexOf(e);if(e.active&&n.length>1){var r=a==n.length-1?a-1:a+1;t.select(n[r])}n.splice(a,1)}}]).directive("tabset",function(){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"TabsetController",templateUrl:"template/tabs/tabset.html",link:function(e,t,n){e.vertical=angular.isDefined(n.vertical)?e.$parent.$eval(n.vertical):!1,e.justified=angular.isDefined(n.justified)?e.$parent.$eval(n.justified):!1}}}).directive("tab",["$parse",function(e){return{require:"^tabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},compile:function(t,n,a){return function(t,n,r,i){t.$watch("active",function(e){e&&i.select(t)}),t.disabled=!1,r.disabled&&t.$parent.$watch(e(r.disabled),function(e){t.disabled=!!e}),t.select=function(){t.disabled||(t.active=!0)},i.addTab(t),t.$on("$destroy",function(){i.removeTab(t)}),t.$transcludeFn=a}}}}]).directive("tabHeadingTransclude",[function(){return{restrict:"A",require:"^tab",link:function(e,t){e.$watch("headingElement",function(e){e&&(t.html(""),t.append(e))})}}}]).directive("tabContentTransclude",function(){function e(e){return e.tagName&&(e.hasAttribute("tab-heading")||e.hasAttribute("data-tab-heading")||"tab-heading"===e.tagName.toLowerCase()||"data-tab-heading"===e.tagName.toLowerCase())}return{restrict:"A",require:"^tabset",link:function(t,n,a){var r=t.$eval(a.tabContentTransclude);r.$transcludeFn(r.$parent,function(t){angular.forEach(t,function(t){e(t)?r.headingElement=t:n.append(t)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("timepickerConfig",{hourStep:1,minuteStep:1,showMeridian:!0,meridians:null,readonlyInput:!1,mousewheel:!0}).controller("TimepickerController",["$scope","$attrs","$parse","$log","$locale","timepickerConfig",function(e,t,n,a,r,i){function o(){var t=parseInt(e.hours,10),n=e.showMeridian?t>0&&13>t:t>=0&&24>t;return n?(e.showMeridian&&(12===t&&(t=0),e.meridian===h[1]&&(t+=12)),t):void 0}function l(){var t=parseInt(e.minutes,10);return t>=0&&60>t?t:void 0}function s(e){return angular.isDefined(e)&&e.toString().length<2?"0"+e:e}function c(e){u(),g.$setViewValue(new Date(f)),d(e)}function u(){g.$setValidity("time",!0),e.invalidHours=!1,e.invalidMinutes=!1}function d(t){var n=f.getHours(),a=f.getMinutes();e.showMeridian&&(n=0===n||12===n?12:n%12),e.hours="h"===t?n:s(n),e.minutes="m"===t?a:s(a),e.meridian=f.getHours()<12?h[0]:h[1]}function p(e){var t=new Date(f.getTime()+6e4*e);f.setHours(t.getHours(),t.getMinutes()),c()}var f=new Date,g={$setViewValue:angular.noop},h=angular.isDefined(t.meridians)?e.$parent.$eval(t.meridians):i.meridians||r.DATETIME_FORMATS.AMPMS;this.init=function(n,a){g=n,g.$render=this.render;var r=a.eq(0),o=a.eq(1),l=angular.isDefined(t.mousewheel)?e.$parent.$eval(t.mousewheel):i.mousewheel;l&&this.setupMousewheelEvents(r,o),e.readonlyInput=angular.isDefined(t.readonlyInput)?e.$parent.$eval(t.readonlyInput):i.readonlyInput,this.setupInputEvents(r,o)};var m=i.hourStep;t.hourStep&&e.$parent.$watch(n(t.hourStep),function(e){m=parseInt(e,10)});var v=i.minuteStep;t.minuteStep&&e.$parent.$watch(n(t.minuteStep),function(e){v=parseInt(e,10)}),e.showMeridian=i.showMeridian,t.showMeridian&&e.$parent.$watch(n(t.showMeridian),function(t){if(e.showMeridian=!!t,g.$error.time){var n=o(),a=l();angular.isDefined(n)&&angular.isDefined(a)&&(f.setHours(n),c())}else d()}),this.setupMousewheelEvents=function(t,n){var a=function(e){e.originalEvent&&(e=e.originalEvent);var t=e.wheelDelta?e.wheelDelta:-e.deltaY;return e.detail||t>0};t.bind("mousewheel wheel",function(t){e.$apply(a(t)?e.incrementHours():e.decrementHours()),t.preventDefault()}),n.bind("mousewheel wheel",function(t){e.$apply(a(t)?e.incrementMinutes():e.decrementMinutes()),t.preventDefault()})},this.setupInputEvents=function(t,n){if(e.readonlyInput)return e.updateHours=angular.noop,e.updateMinutes=angular.noop,void 0;var a=function(t,n){g.$setViewValue(null),g.$setValidity("time",!1),angular.isDefined(t)&&(e.invalidHours=t),angular.isDefined(n)&&(e.invalidMinutes=n)};e.updateHours=function(){var e=o();angular.isDefined(e)?(f.setHours(e),c("h")):a(!0)},t.bind("blur",function(){!e.invalidHours&&e.hours<10&&e.$apply(function(){e.hours=s(e.hours)})}),e.updateMinutes=function(){var e=l();angular.isDefined(e)?(f.setMinutes(e),c("m")):a(void 0,!0)},n.bind("blur",function(){!e.invalidMinutes&&e.minutes<10&&e.$apply(function(){e.minutes=s(e.minutes)})})},this.render=function(){var e=g.$modelValue?new Date(g.$modelValue):null;isNaN(e)?(g.$setValidity("time",!1),a.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(e&&(f=e),u(),d())},e.incrementHours=function(){p(60*m)},e.decrementHours=function(){p(60*-m)},e.incrementMinutes=function(){p(v)},e.decrementMinutes=function(){p(-v)},e.toggleMeridian=function(){p(720*(f.getHours()<12?1:-1))}}]).directive("timepicker",function(){return{restrict:"EA",require:["timepicker","?^ngModel"],controller:"TimepickerController",replace:!0,scope:{},templateUrl:"template/timepicker/timepicker.html",link:function(e,t,n,a){var r=a[0],i=a[1];i&&r.init(i,t.find("input"))}}}),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).factory("typeaheadParser",["$parse",function(e){var t=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(n){var a=n.match(t);if(!a)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+n+'".');return{itemName:a[3],source:e(a[4]),viewMapper:e(a[2]||a[1]),modelMapper:e(a[1])}}}}]).directive("typeahead",["$compile","$parse","$q","$timeout","$document","$position","typeaheadParser",function(e,t,n,a,r,i,o){var l=[9,13,27,38,40];return{require:"ngModel",link:function(s,c,u,d){var p,f=s.$eval(u.typeaheadMinLength)||1,g=s.$eval(u.typeaheadWaitMs)||0,h=s.$eval(u.typeaheadEditable)!==!1,m=t(u.typeaheadLoading).assign||angular.noop,v=t(u.typeaheadOnSelect),b=u.typeaheadInputFormatter?t(u.typeaheadInputFormatter):void 0,y=u.typeaheadAppendToBody?s.$eval(u.typeaheadAppendToBody):!1,w=t(u.ngModel).assign,$=o.parse(u.typeahead),k=s.$new();s.$on("$destroy",function(){k.$destroy()});var x="typeahead-"+k.$id+"-"+Math.floor(1e4*Math.random());c.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":x});var S=angular.element("<div typeahead-popup></div>");S.attr({id:x,matches:"matches",active:"activeIdx",select:"select(activeIdx)",query:"query",position:"position"}),angular.isDefined(u.typeaheadTemplateUrl)&&S.attr("template-url",u.typeaheadTemplateUrl);var C=function(){k.matches=[],k.activeIdx=-1,c.attr("aria-expanded",!1)},D=function(e){return x+"-option-"+e};k.$watch("activeIdx",function(e){0>e?c.removeAttr("aria-activedescendant"):c.attr("aria-activedescendant",D(e))});var T=function(e){var t={$viewValue:e};m(s,!0),n.when($.source(s,t)).then(function(n){var a=e===d.$viewValue;if(a&&p)if(n.length>0){k.activeIdx=0,k.matches.length=0;for(var r=0;r<n.length;r++)t[$.itemName]=n[r],k.matches.push({id:D(r),label:$.viewMapper(k,t),model:n[r]});k.query=e,k.position=y?i.offset(c):i.position(c),k.position.top=k.position.top+c.prop("offsetHeight"),c.attr("aria-expanded",!0)}else C();a&&m(s,!1)},function(){C(),m(s,!1)})};C(),k.query=void 0;var M,E=function(e){M=a(function(){T(e)},g)},O=function(){M&&a.cancel(M)};d.$parsers.unshift(function(e){return p=!0,e&&e.length>=f?g>0?(O(),E(e)):T(e):(m(s,!1),O(),C()),h?e:e?(d.$setValidity("editable",!1),void 0):(d.$setValidity("editable",!0),e)}),d.$formatters.push(function(e){var t,n,a={};return b?(a.$model=e,b(s,a)):(a[$.itemName]=e,t=$.viewMapper(s,a),a[$.itemName]=void 0,n=$.viewMapper(s,a),t!==n?t:e)}),k.select=function(e){var t,n,r={};r[$.itemName]=n=k.matches[e].model,t=$.modelMapper(s,r),w(s,t),d.$setValidity("editable",!0),v(s,{$item:n,$model:t,$label:$.viewMapper(s,r)}),C(),a(function(){c[0].focus()},0,!1)},c.bind("keydown",function(e){0!==k.matches.length&&-1!==l.indexOf(e.which)&&(e.preventDefault(),40===e.which?(k.activeIdx=(k.activeIdx+1)%k.matches.length,k.$digest()):38===e.which?(k.activeIdx=(k.activeIdx?k.activeIdx:k.matches.length)-1,k.$digest()):13===e.which||9===e.which?k.$apply(function(){k.select(k.activeIdx)}):27===e.which&&(e.stopPropagation(),C(),k.$digest()))}),c.bind("blur",function(){p=!1});var A=function(e){c[0]!==e.target&&(C(),k.$digest())};r.bind("click",A),s.$on("$destroy",function(){r.unbind("click",A)});var _=e(S)(k);y?r.find("body").append(_):c.after(_)}}}]).directive("typeaheadPopup",function(){return{restrict:"EA",scope:{matches:"=",query:"=",active:"=",position:"=",select:"&"},replace:!0,templateUrl:"template/typeahead/typeahead-popup.html",link:function(e,t,n){e.templateUrl=n.templateUrl,e.isOpen=function(){return e.matches.length>0},e.isActive=function(t){return e.active==t},e.selectActive=function(t){e.active=t},e.selectMatch=function(t){e.select({activeIdx:t})}}}}).directive("typeaheadMatch",["$http","$templateCache","$compile","$parse",function(e,t,n,a){return{restrict:"EA",scope:{index:"=",match:"=",query:"="},link:function(r,i,o){var l=a(o.templateUrl)(r.$parent)||"template/typeahead/typeahead-match.html";e.get(l,{cache:t}).success(function(e){i.replaceWith(n(e.trim())(r))})}}}]).filter("typeaheadHighlight",function(){function e(e){return e.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}return function(t,n){return n?(""+t).replace(new RegExp(e(n),"gi"),"<strong>$&</strong>"):t}}),angular.module("template/accordion/accordion-group.html",[]).run(["$templateCache",function(e){e.put("template/accordion/accordion-group.html",'<div class="panel panel-default">\n  <div class="panel-heading">\n    <h4 class="panel-title">\n      <a class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse" collapse="!isOpen">\n	  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>')
}]),angular.module("template/accordion/accordion.html",[]).run(["$templateCache",function(e){e.put("template/accordion/accordion.html",'<div class="panel-group" ng-transclude></div>')}]),angular.module("template/alert/alert.html",[]).run(["$templateCache",function(e){e.put("template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissable\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close()">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("template/carousel/carousel.html",[]).run(["$templateCache",function(e){e.put("template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n</div>\n')}]),angular.module("template/carousel/slide.html",[]).run(["$templateCache",function(e){e.put("template/carousel/slide.html","<div ng-class=\"{\n    'active': leaving || (active && !entering),\n    'prev': (next || active) && direction=='prev',\n    'next': (next || active) && direction=='next',\n    'right': direction=='prev',\n    'left': direction=='next'\n  }\" class=\"item text-center\" ng-transclude></div>\n")}]),angular.module("template/datepicker/datepicker.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/datepicker.html",'<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n</div>')}]),angular.module("template/datepicker/day.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/day.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{5 + showWeeks}}"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-show="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in labels track by $index" class="text-center"><small aria-label="{{label.full}}">{{label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-show="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/month.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/month.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/popup.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/popup.html",'<ul class="dropdown-menu" ng-style="{display: (isOpen && \'block\') || \'none\', top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)">\n	<li ng-transclude></li>\n	<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n		<span class="btn-group">\n			<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')">{{ getText(\'current\') }}</button>\n			<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n		</span>\n		<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n	</li>\n</ul>\n')}]),angular.module("template/datepicker/year.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/year.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/modal/backdrop.html",[]).run(["$templateCache",function(e){e.put("template/modal/backdrop.html",'<div class="modal-backdrop fade {{ backdropClass }}"\n     ng-class="{in: animate}"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("template/modal/window.html",[]).run(["$templateCache",function(e){e.put("template/modal/window.html",'<div tabindex="-1" role="dialog" class="modal fade" ng-class="{in: animate}" ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" ng-click="close($event)">\n    <div class="modal-dialog" ng-class="{\'modal-sm\': size == \'sm\', \'modal-lg\': size == \'lg\'}"><div class="modal-content" modal-transclude></div></div>\n</div>')}]),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function(e){e.put("template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious(), previous: align}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext(), next: align}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n</ul>')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function(e){e.put("template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="boundaryLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(1)">{{getText(\'first\')}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active}"><a href ng-click="selectPage(page.number)">{{page.text}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n  <li ng-if="boundaryLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(totalPages)">{{getText(\'last\')}}</a></li>\n</ul>')}]),angular.module("template/tooltip/tooltip-html-unsafe-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-html-unsafe-popup.html",'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-popup.html",'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("template/popover/popover.html",[]).run(["$templateCache",function(e){e.put("template/popover/popover.html",'<div class="popover {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-show="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/progress.html",'<div class="progress" ng-transclude></div>')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>\n</div>')}]),angular.module("template/rating/rating.html",[]).run(["$templateCache",function(e){e.put("template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <i ng-repeat="r in range track by $index" ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')">\n        <span class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    </i>\n</span>')}]),angular.module("template/tabs/tab.html",[]).run(["$templateCache",function(e){e.put("template/tabs/tab.html",'<li ng-class="{active: active, disabled: disabled}">\n  <a ng-click="select()" tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("template/tabs/tabset.html",[]).run(["$templateCache",function(e){e.put("template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("template/timepicker/timepicker.html",[]).run(["$templateCache",function(e){e.put("template/timepicker/timepicker.html",'<table>\n	<tbody>\n		<tr class="text-center">\n			<td><a ng-click="incrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="incrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n		<tr>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidHours}">\n				<input type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-mousewheel="incrementHours()" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td>:</td>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n				<input type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td ng-show="showMeridian"><button type="button" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n		</tr>\n		<tr class="text-center">\n			<td><a ng-click="decrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="decrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n	</tbody>\n</table>\n')}]),angular.module("template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(e){e.put("template/typeahead/typeahead-match.html",'<a tabindex="-1" bind-html-unsafe="match.label | typeaheadHighlight:query"></a>')}]),angular.module("template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(e){e.put("template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen()" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{match.id}}">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),"undefined"!=typeof angular&&angular.module("risevision.widget.common.storage-selector.config",[]).value("STORAGE_MODAL","https://storage.risevision.com/files/"),function(){"use strict";angular.module("risevision.widget.common.storage-selector",["ui.bootstrap","risevision.widget.common.storage-selector.config"]).directive("storageSelector",["$templateCache","$modal","$sce","$log","STORAGE_MODAL",function(e,t,n,a,r){return{restrict:"EA",scope:{companyId:"@",type:"@"},template:e.get("storage-selector.html"),link:function(e){function i(){e.storageUrl="undefined"!=typeof e.type&&""!==e.type?r+e.companyId+"?selector-type="+e.type:r+e.companyId}e.storageUrl="",e.open=function(){e.modalInstance=t.open({templateUrl:"storage.html",controller:"StorageCtrl",size:"lg",backdrop:!0,resolve:{storageUrl:function(){return{url:n.trustAsResourceUrl(e.storageUrl)}}}}),e.modalInstance.result.then(function(t){e.files=t,e.$emit("picked",t)},function(){e.canceled=!0,a.info("Modal dismissed at: "+new Date)})},e.$watch("companyId",function(e){e&&i()}),e.$watch("type",function(e){e&&i()})}}}])}(),angular.module("risevision.widget.common.storage-selector").controller("StorageCtrl",["$scope","$modalInstance","storageUrl","$window","$log","STORAGE_MODAL",function(e,t,n,a,r,i){e.storageUrl=n,e.isSameOrigin=function(e){var t=document.createElement("a");return t.href=i,-1!==e.indexOf(t.host)},e.messageHandler=function(n){e.isSameOrigin(n.origin)&&(Array.isArray(n.data)?t.close(n.data):"string"==typeof n.data&&"close"===n.data&&t.dismiss("cancel"))},a.addEventListener("message",e.messageHandler)}]),function(){try{app=angular.module("risevision.widget.common.storage-selector")}catch(e){app=angular.module("risevision.widget.common.storage-selector",[])}app.run(["$templateCache",function(e){"use strict";e.put("storage-selector.html",'<button class="btn btn-widget-icon-storage" ng-click="open()" type="button" />\n<script type="text/ng-template" id="storage.html">\n        <iframe class="modal-dialog" scrolling="no" marginwidth="0" src="{{ storageUrl.url }}"></iframe>\n</script>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.tooltip",["ui.bootstrap"]).directive("rvTooltip",[function(){return{restrict:"A",link:function(e,t){t.addClass("fa"),t.addClass("fa-question-circle"),t.addClass("fa-lg")}}}])}(),function(){"use strict";angular.module("risevision.widget.common.url-field",["risevision.common.i18n","risevision.widget.common.tooltip","risevision.widget.common.storage-selector"]).directive("urlField",["$templateCache","$log",function(e,t){return{restrict:"E",require:"?ngModel",scope:{url:"=",hideLabel:"@",hideStorage:"@",companyId:"@",fileType:"@",storageType:"@"},template:e.get("_angular/url-field/url-field.html"),link:function(e,n,a,r){function i(e,t){var n,a=e.toLowerCase();switch(t){case"image":n=[".jpg",".jpeg",".png",".bmp",".svg",".gif"];break;case"video":n=[".webm",".mp4",".ogv",".ogg"];break;default:n=[]}for(var r=0,i=n.length;i>r;r++)if(-1!==a.indexOf(n[r]))return!0;return!1}function o(t){var n,a;return n=/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/i,-1===t.indexOf("://")&&(t="http://"+t),a=n.test(t),a&&"undefined"!=typeof e.fileType?(a=i(t,e.fileType),a||(e.invalidType=e.fileType)):e.invalidType="url",a}e.doValidation=!0,e.forcedValid=!1,e.valid=!0,e.invalidType="url",e.allowInitEmpty="undefined"!=typeof a.initEmpty,e.hideStorage||e.$on("picked",function(t,n){e.url=n[0]}),e.blur=function(){e.$emit("urlFieldBlur")},e.$watch("url",function(t){"undefined"!=typeof t&&null!==t&&(""!==t&&e.allowInitEmpty&&(e.allowInitEmpty=!1),e.doValidation&&!e.allowInitEmpty&&(e.valid=o(e.url)))}),e.$watch("valid",function(e){r&&(t.info("Calling $setValidity() on parent controller"),r.$setValidity("valid",e))}),e.$watch("doValidation",function(t){"undefined"!=typeof e.url&&(t?(e.forcedValid=!1,e.allowInitEmpty||(e.valid=o(e.url))):(e.forcedValid=!0,e.valid=!0))})}}}])}(),function(){try{app=angular.module("risevision.widget.common.url-field")}catch(e){app=angular.module("risevision.widget.common.url-field",[])}app.run(["$templateCache",function(e){"use strict";e.put("_angular/url-field/url-field.html",'<div class="form-group" >\n  <label ng-if="!hideLabel">{{ "url.label" | translate }}</label>\n  <div ng-class="{\'input-group\':!hideStorage}">\n    <input name="url" type="text" ng-model="url" ng-blur="blur()" class="form-control" placeholder="http://">\n    <span class="input-url-addon" ng-if="!hideStorage"><storage-selector company-id="{{companyId}}" type="{{storageType}}"></storage-selector></span>\n  </div>\n  <p ng-if="!valid && invalidType === \'url\'" class="text-danger">{{ "url.errors.url" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'image\'" class="text-danger">{{ "url.errors.image" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'video\'" class="text-danger">{{ "url.errors.video" | translate }}</p>\n  <div class="checkbox" ng-show="forcedValid || !valid">\n    <label>\n      <input name="validate-url" ng-click="doValidation = !doValidation" type="checkbox"\n             value="validate-url" checked="checked"> {{"url.validate.label" | translate}}\n    </label>\n    <span popover="{{\'url.validate.tooltip\' | translate}}" popover-trigger="click"\n          popover-placement="top" rv-tooltip></span>\n  </div>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.position-setting",["risevision.common.i18n"]).directive("positionSetting",["$templateCache","$log",function(e){return{restrict:"E",scope:{position:"=",hideLabel:"@"},template:e.get("_angular/position-setting/position-setting.html"),link:function(e){e.$watch("position",function(t){"undefined"==typeof t&&(e.position="top-left")})}}}])}(),function(){try{app=angular.module("risevision.widget.common.position-setting")}catch(e){app=angular.module("risevision.widget.common.position-setting",[])}app.run(["$templateCache",function(e){"use strict";e.put("_angular/position-setting/position-setting.html",'<div class="row">\n  <div class="col-md-3">\n    <label ng-if="!hideLabel"> {{\'widgets.alignment\' | translate}}</label>\n    <select name="position" ng-model="position" class="form-control">\n      <option value="top-left">{{\'position.top.left\' | translate}}</option>\n      <option value="top-center">{{\'position.top.center\' | translate}}</option>\n      <option value="top-right">{{\'position.top.right\' | translate}}</option>\n      <option value="middle-left">{{\'position.middle.left\' | translate}}</option>\n      <option value="middle-center">{{\'position.middle.center\' | translate}}</option>\n      <option value="middle-right">{{\'position.middle.right\' | translate}}</option>\n      <option value="bottom-left">{{\'position.bottom.left\' | translate}}</option>\n      <option value="bottom-center">{{\'position.bottom.center\' | translate}}</option>\n      <option value="bottom-right">{{\'position.bottom.right\' | translate}}</option>\n    </select>\n  </div>\n</div>\n')}])}(),function(e,t,n){"use strict";function a(e,n,a,r){for(var i=[],o=0;o<e.length;o++){var l=e[o];if(l){var s=tinycolor(l),c=s.toHsl().l<.5?"sp-thumb-el sp-thumb-dark":"sp-thumb-el sp-thumb-light";c+=tinycolor.equals(n,l)?" sp-thumb-active":"";var u=s.toString(r.preferredFormat||"rgb"),d=v?"background-color:"+s.toRgbString():"filter:"+s.toFilter();i.push('<span title="'+u+'" data-color="'+s.toRgbString()+'" class="'+c+'"><span class="sp-thumb-inner" style="'+d+';" /></span>')}else{var p="sp-clear-display";i.push(t("<div />").append(t('<span data-color="" style="background-color:transparent;" class="'+p+'"></span>').attr("title",r.noColorSelectedText)).html())}}return"<div class='sp-cf "+a+"'>"+i.join("")+"</div>"}function r(){for(var e=0;e<h.length;e++)h[e]&&h[e].hide()}function i(e,n){var a=t.extend({},g,e);return a.callbacks={move:u(a.move,n),change:u(a.change,n),show:u(a.show,n),hide:u(a.hide,n),beforeShow:u(a.beforeShow,n)},"text"===a.type?f=["<div class='sp-replacer text-color-picker'>","<div class='sp-preview'>","<div class='sp-preview-inner'>","<div class='sp-preview-char'>A</div>","</div>","</div>","<b class='caret'></b>","</div>"].join(""):"highlight"===a.type?f=["<div class='sp-replacer highlight-color-picker'>","<div class='sp-preview'>","<div class='sp-preview-inner'>","<img src='http://s3.amazonaws.com/rise-common-test/scripts/spectrum/images/text-highlight.png'>","</div>","</div>","<b class='caret'></b>","</div>"].join(""):"background"===a.type&&(f=["<div class='sp-replacer background-color-picker'>","<div class='sp-preview'>","<div class='sp-preview-inner'></div>","</div>","<b class='caret'></b>","</div>"].join("")),a}function o(o,s){function u(){if(z.showPaletteOnly&&(z.showPalette=!0),z.palette){ut=z.palette.slice(0),dt=t.isArray(ut[0])?ut:[ut],pt={};for(var e=0;e<dt.length;e++)for(var n=0;n<dt[e].length;n++){var a=tinycolor(dt[e][n]).toRgbString();pt[a]=!0}}wt.toggleClass("sp-flat",B),wt.toggleClass("sp-input-disabled",!z.showInput),wt.toggleClass("sp-alpha-enabled",z.showAlpha),wt.toggleClass("sp-clear-enabled",Yt),wt.toggleClass("sp-buttons-disabled",!z.showButtons),wt.toggleClass("sp-palette-disabled",!z.showPalette),wt.toggleClass("sp-palette-only",z.showPaletteOnly),wt.toggleClass("sp-initial-disabled",!z.showInitial),wt.addClass(z.className).addClass(z.containerClassName),R()}function g(){function e(e){return e.data&&e.data.ignore?(_(t(e.target).closest(".sp-thumb-el").data("color")),L()):(_(t(e.target).closest(".sp-thumb-el").data("color")),L(),H(!0),O()),!1}if(m&&wt.find("*:not(input)").attr("unselectable","on"),u(),Ft&&bt.after(Vt).hide(),Yt||_t.hide(),B)bt.after(wt).hide();else{var n="parent"===z.appendTo?bt.parent():t(z.appendTo);1!==n.length&&(n=t("body")),n.append(wt)}w(),Ht.bind("click.spectrum touchstart.spectrum",function(e){yt||M(),e.stopPropagation(),t(e.target).is("input")||e.preventDefault()}),(bt.is(":disabled")||z.disabled===!0)&&U(),wt.click(c),Mt.change(T),Mt.bind("paste",function(){setTimeout(T,1)}),Mt.keydown(function(e){13==e.keyCode&&T()}),At[0].innerHTML=z.cancelText+" "+At[0].innerHTML,At.bind("click.spectrum",function(e){e.stopPropagation(),e.preventDefault(),O("cancel")}),_t.attr("title",z.clearText),_t.bind("click.spectrum",function(e){e.stopPropagation(),e.preventDefault(),Bt=!0,L(),B&&H(!0)}),Pt[0].innerHTML=z.chooseText+" "+Pt[0].innerHTML,Pt.bind("click.spectrum",function(e){e.stopPropagation(),e.preventDefault(),I()&&(H(!0),O())}),d(Dt,function(e,t,n){ct=e/at,Bt=!1,n.shiftKey&&(ct=Math.round(10*ct)/10),L()},C,D),d(xt,function(e,t){ot=parseFloat(t/tt),Bt=!1,z.showAlpha||(ct=1),L()},C,D),d($t,function(e,t,n){if(n.shiftKey){if(!mt){var a=lt*Z,r=Q-st*Q,i=Math.abs(e-a)>Math.abs(t-r);mt=i?"x":"y"}}else mt=null;var o=!mt||"x"===mt,l=!mt||"y"===mt;o&&(lt=parseFloat(e/Z)),l&&(st=parseFloat((Q-t)/Q)),Bt=!1,z.showAlpha||(ct=1),L()},C,D),qt?(_(qt),F(),Ut=Nt||tinycolor(qt).format,$(qt)):F(),B&&E();var a=m?"mousedown.spectrum":"click.spectrum touchstart.spectrum";Et.delegate(".sp-thumb-el",a,e),Ot.delegate(".sp-thumb-el:nth-child(1)",a,{ignore:!0},e)}function w(){if(G&&e.localStorage){try{var n=e.localStorage[G].split(",#");n.length>1&&(delete e.localStorage[G],t.each(n,function(e,t){$(t)}))}catch(a){}try{ft=e.localStorage[G].split(";")}catch(a){}}}function $(n){if(Y){var a=tinycolor(n).toRgbString();if(!pt[a]&&-1===t.inArray(a,ft))for(ft.push(a);ft.length>gt;)ft.shift();if(G&&e.localStorage)try{e.localStorage[G]=ft.join(";")}catch(r){}}}function k(){var e=[];if(z.showPalette)for(var t=0;t<ft.length;t++){var n=tinycolor(ft[t]).toRgbString();pt[n]||e.push(ft[t])}return e.reverse().slice(0,z.maxSelectionSize)}function x(){var e=P(),n=t.map(dt,function(t,n){return a(t,e,"sp-palette-row sp-palette-row-"+n,z)});w(),ft&&n.push(a(k(),e,"sp-palette-row sp-palette-row-selection",z)),Et.html(n.join(""))}function S(){if(z.showInitial){var e=jt,t=P();Ot.html(a([e,t],t,"sp-palette-row-initial",z))}}function C(){(0>=Q||0>=Z||0>=tt)&&R(),wt.addClass(ht),mt=null,bt.trigger("dragstart.spectrum",[P()])}function D(){wt.removeClass(ht),bt.trigger("dragstop.spectrum",[P()])}function T(){var e=Mt.val();if(null!==e&&""!==e||!Yt){var t=tinycolor(e);t.isValid()?(_(t),H(!0)):Mt.addClass("sp-validation-error")}else _(null),H(!0)}function M(){J?O():E()}function E(){var n=t.Event("beforeShow.spectrum");return J?(R(),void 0):(bt.trigger(n,[P()]),W.beforeShow(P())===!1||n.isDefaultPrevented()||(r(),J=!0,t(vt).bind("click.spectrum",O),t(e).bind("resize.spectrum",X),Vt.addClass("sp-active"),wt.removeClass("sp-hidden"),R(),F(),jt=P(),S(),W.show(jt),bt.trigger("show.spectrum",[jt])),void 0)}function O(n){if((!n||"click"!=n.type||2!=n.button)&&J&&!B){J=!1,t(vt).unbind("click.spectrum",O),t(e).unbind("resize.spectrum",X),Vt.removeClass("sp-active"),wt.addClass("sp-hidden");var a=!tinycolor.equals(P(),jt);a&&(zt&&"cancel"!==n?H(!0):A()),W.hide(P()),bt.trigger("hide.spectrum",[P()])}}function A(){_(jt,!0)}function _(e,t){if(tinycolor.equals(e,P()))return F(),void 0;var n,a;!e&&Yt?Bt=!0:(Bt=!1,n=tinycolor(e),a=n.toHsv(),ot=a.h%360/360,lt=a.s,st=a.v,ct=a.a),F(),n&&n.isValid()&&!t&&(Ut=Nt||n.getFormat())}function P(e){return e=e||{},Yt&&Bt?null:tinycolor.fromRatio({h:ot,s:lt,v:st,a:Math.round(100*ct)/100},{format:e.format||Ut})}function I(){return!Mt.hasClass("sp-validation-error")}function L(){F(),W.move(P()),bt.trigger("move.spectrum",[P()])}function F(){Mt.removeClass("sp-validation-error"),V();var e=tinycolor.fromRatio({h:ot,s:1,v:1});$t.css("background-color",e.toHexString());var t=Ut;1>ct&&(0!==ct||"name"!==t)&&("hex"===t||"hex3"===t||"hex6"===t||"name"===t)&&(t="rgb");var n=P({format:t}),a="";if(Rt.removeClass("sp-clear-display"),"text"===z.type?Rt.css("border-color","transparent"):Rt.css("background-color","transparent"),!n&&Yt)Rt.addClass("sp-clear-display");else{var r=n.toHexString(),i=n.toRgbString();if(v||1===n.alpha?"text"===z.type?Rt.css("border-color",i):Rt.css("background-color",i):("text"===z.type?Rt.css("border-color","transparent"):Rt.css("background-color","transparent"),Rt.css("filter",n.toFilter())),z.showAlpha){var o=n.toRgb();o.a=0;var l=tinycolor(o).toRgbString(),s="linear-gradient(left, "+l+", "+r+")";m?Ct.css("filter",tinycolor(l).toFilter({gradientType:1},r)):(Ct.css("background","-webkit-"+s),Ct.css("background","-moz-"+s),Ct.css("background","-ms-"+s),Ct.css("background","linear-gradient(to right, "+l+", "+r+")"))}a=n.toString(t)}z.showInput&&Mt.val(a),z.showPalette&&x(),S()}function V(){var e=lt,t=st;if(Yt&&Bt)Tt.hide(),St.hide(),kt.hide();else{Tt.show(),St.show(),kt.show();var n=e*Z,a=Q-t*Q;n=Math.max(-et,Math.min(Z-et,n-et)),a=Math.max(-et,Math.min(Q-et,a-et)),kt.css({top:a+"px",left:n+"px"});var r=ct*at;Tt.css({left:r-rt/2+"px"});var i=ot*tt;St.css({top:i-it+"px"})}}function H(e){var t=P(),n="",a=!tinycolor.equals(t,jt);t&&(n=t.toString(Ut),$(t)),It&&bt.val(n),jt=t,e&&a&&(W.change(t),bt.trigger("change",[t]))}function R(){Z=$t.width(),Q=$t.height(),et=kt.height(),nt=xt.width(),tt=xt.height(),it=St.height(),at=Dt.width(),rt=Tt.width(),B||(wt.css("position","absolute"),wt.offset(l(wt,Ht))),V(),z.showPalette&&x(),bt.trigger("reflow.spectrum")}function q(){bt.show(),Ht.unbind("click.spectrum touchstart.spectrum"),wt.remove(),Vt.remove(),h[Gt.id]=null}function j(e,a){return e===n?t.extend({},z):a===n?z[e]:(z[e]=a,u(),void 0)}function N(){yt=!1,bt.attr("disabled",!1),Ht.removeClass("sp-disabled")}function U(){O(),yt=!0,bt.attr("disabled",!0),Ht.addClass("sp-disabled")}var z=i(s,o),B=z.flat,Y=z.showSelectionPalette,G=z.localStorageKey,K=z.theme,W=z.callbacks,X=p(R,10),J=!1,Z=0,Q=0,et=0,tt=0,nt=0,at=0,rt=0,it=0,ot=0,lt=0,st=0,ct=1,ut=[],dt=[],pt={},ft=z.selectionPalette.slice(0),gt=z.maxSelectionSize,ht="sp-dragging",mt=null,vt=o.ownerDocument,bt=(vt.body,t(o)),yt=!1,wt=t(y,vt).addClass(K),$t=wt.find(".sp-color"),kt=wt.find(".sp-dragger"),xt=wt.find(".sp-hue"),St=wt.find(".sp-slider"),Ct=wt.find(".sp-alpha-inner"),Dt=wt.find(".sp-alpha"),Tt=wt.find(".sp-alpha-handle"),Mt=wt.find(".sp-input"),Et=wt.find(".sp-palette"),Ot=wt.find(".sp-initial"),At=wt.find(".sp-cancel"),_t=wt.find(".sp-clear"),Pt=wt.find(".sp-choose"),It=bt.is("input"),Lt=It&&b&&"color"===bt.attr("type"),Ft=It&&!B,Vt=Ft?t(f).addClass(K).addClass(z.className).addClass(z.replacerClassName):t([]),Ht=Ft?Vt:bt,Rt="text"===z.type?Vt.find(".sp-preview"):Vt.find(".sp-preview-inner"),qt=z.color||It&&bt.val(),jt=!1,Nt=z.preferredFormat,Ut=Nt,zt=!z.showButtons||z.clickoutFiresChange,Bt=!qt,Yt=z.allowEmpty&&!Lt;
g();var Gt={show:E,hide:O,toggle:M,reflow:R,option:j,enable:N,disable:U,set:function(e){_(e),H()},get:P,destroy:q,container:wt};return Gt.id=h.push(Gt)-1,Gt}function l(e,n){var a=0,r=e.outerWidth(),i=e.outerHeight(),o=n.outerHeight(),l=e[0].ownerDocument,s=l.documentElement,c=s.clientWidth+t(l).scrollLeft(),u=s.clientHeight+t(l).scrollTop(),d=n.offset();return d.top+=o,d.left-=Math.min(d.left,d.left+r>c&&c>r?Math.abs(d.left+r-c):0),d.top-=Math.min(d.top,d.top+i>u&&u>i?Math.abs(i+o-a):a),d}function s(){}function c(e){e.stopPropagation()}function u(e,t){var n=Array.prototype.slice,a=n.call(arguments,2);return function(){return e.apply(t,a.concat(n.call(arguments)))}}function d(n,a,r,i){function o(e){e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault(),e.returnValue=!1}function l(e){if(d){if(m&&document.documentMode<9&&!e.button)return c();var t=e.originalEvent.touches,r=t?t[0].pageX:e.pageX,i=t?t[0].pageY:e.pageY,l=Math.max(0,Math.min(r-p.left,g)),s=Math.max(0,Math.min(i-p.top,f));h&&o(e),a.apply(n,[l,s,e])}}function s(e){{var a=e.which?3==e.which:2==e.button;e.originalEvent.touches}a||d||r.apply(n,arguments)!==!1&&(d=!0,f=t(n).height(),g=t(n).width(),p=t(n).offset(),t(u).bind(v),t(u.body).addClass("sp-dragging"),h||l(e),o(e))}function c(){d&&(t(u).unbind(v),t(u.body).removeClass("sp-dragging"),i.apply(n,arguments)),d=!1}a=a||function(){},r=r||function(){},i=i||function(){};var u=n.ownerDocument||document,d=!1,p={},f=0,g=0,h="ontouchstart"in e,v={};v.selectstart=o,v.dragstart=o,v["touchmove mousemove"]=l,v["touchend mouseup"]=c,t(n).bind("touchstart mousedown",s)}function p(e,t,n){var a;return function(){var r=this,i=arguments,o=function(){a=null,e.apply(r,i)};n&&clearTimeout(a),(n||!a)&&(a=setTimeout(o,t))}}var f,g={beforeShow:s,move:s,change:s,show:s,hide:s,color:!1,flat:!1,showInput:!1,allowEmpty:!1,showButtons:!0,clickoutFiresChange:!1,showInitial:!1,showPalette:!1,showPaletteOnly:!1,showSelectionPalette:!0,localStorageKey:!1,appendTo:"body",maxSelectionSize:7,cancelText:"cancel",chooseText:"choose",clearText:"Clear Color Selection",noColorSelectedText:"No Color Selected",preferredFormat:!1,className:"",containerClassName:"",replacerClassName:"",type:"text",showAlpha:!1,theme:"sp-light",palette:[["#ffffff","#000000","#ff0000","#ff8000","#ffff00","#008000","#0000ff","#4b0082","#9400d3"]],selectionPalette:[],disabled:!1},h=[],m=!!/msie/i.exec(e.navigator.userAgent),v=function(){function e(e,t){return!!~(""+e).indexOf(t)}var t=document.createElement("div"),n=t.style;return n.cssText="background-color:rgba(0,0,0,.5)",e(n.backgroundColor,"rgba")||e(n.backgroundColor,"hsla")}(),b=function(){var e=t("<input type='color' value='!' />")[0];return"color"===e.type&&"!"!==e.value}(),y=function(){var e="";if(m)for(var t=1;6>=t;t++)e+="<div class='sp-"+t+"'></div>";return["<div class='sp-container sp-hidden'>","<div class='sp-palette-container'>","<div class='sp-palette sp-thumb sp-cf'></div>","</div>","<div class='sp-picker-container'>","<div class='sp-top sp-cf'>","<div class='sp-fill'></div>","<div class='sp-top-inner'>","<div class='sp-color'>","<div class='sp-sat'>","<div class='sp-val'>","<div class='sp-dragger'></div>","</div>","</div>","</div>","<div class='sp-clear sp-clear-display'>","</div>","<div class='sp-hue'>","<div class='sp-slider'></div>",e,"</div>","</div>","<div class='sp-alpha'><div class='sp-alpha-inner'><div class='sp-alpha-handle'></div></div></div>","</div>","<div class='sp-input-container sp-cf'>","<input class='sp-input' type='text' spellcheck='false'  />","</div>","<div class='sp-initial sp-thumb sp-cf'></div>","<div class='sp-button-container sp-cf'>","<button type='button' class='sp-choose'><i class='fa fa-check fa-white '></i></button>","<span class='sp-btn-spacer'/>","<button type='button' class='sp-cancel'><i class='fa fa-times fa-white '></i></button>","</div>","</div>","</div>"].join("")}(),w="spectrum.id";t.fn.spectrum=function(e){if("string"==typeof e){var n=this,a=Array.prototype.slice.call(arguments,1);return this.each(function(){var r=h[t(this).data(w)];if(r){var i=r[e];if(!i)throw new Error("Spectrum: no such method: '"+e+"'");"get"==e?n=r.get():"container"==e?n=r.container:"option"==e?n=r.option.apply(r,a):"destroy"==e?(r.destroy(),t(this).removeData(w)):i.apply(r,a)}}),n}return this.spectrum("destroy").each(function(){var n=t.extend({},e,t(this).data()),a=o(this,n);t(this).data(w,a.id)})},t.fn.spectrum.load=!0,t.fn.spectrum.loadOpts={},t.fn.spectrum.draggable=d,t.fn.spectrum.defaults=g,t.spectrum={},t.spectrum.localization={},t.spectrum.palettes={},t.fn.spectrum.processNativeColorInputs=function(){b||t("input[type=color]").spectrum({preferredFormat:"hex6"})},function(){function t(e){var t={r:0,g:0,b:0},a=1,i=!1,l=!1;return"string"==typeof e&&(e=w(e)),"object"==typeof e&&(e.hasOwnProperty("r")&&e.hasOwnProperty("g")&&e.hasOwnProperty("b")?(t=n(e.r,e.g,e.b),i=!0,l="%"===String(e.r).substr(-1)?"prgb":"rgb"):e.hasOwnProperty("h")&&e.hasOwnProperty("s")&&e.hasOwnProperty("v")?(e.s=v(e.s),e.v=v(e.v),t=o(e.h,e.s,e.v),i=!0,l="hsv"):e.hasOwnProperty("h")&&e.hasOwnProperty("s")&&e.hasOwnProperty("l")&&(e.s=v(e.s),e.l=v(e.l),t=r(e.h,e.s,e.l),i=!0,l="hsl"),e.hasOwnProperty("a")&&(a=e.a)),a=u(a),{ok:i,format:e.format||l,r:D(255,T(t.r,0)),g:D(255,T(t.g,0)),b:D(255,T(t.b,0)),a:a}}function n(e,t,n){return{r:255*d(e,255),g:255*d(t,255),b:255*d(n,255)}}function a(e,t,n){e=d(e,255),t=d(t,255),n=d(n,255);var a,r,i=T(e,t,n),o=D(e,t,n),l=(i+o)/2;if(i==o)a=r=0;else{var s=i-o;switch(r=l>.5?s/(2-i-o):s/(i+o),i){case e:a=(t-n)/s+(n>t?6:0);break;case t:a=(n-e)/s+2;break;case n:a=(e-t)/s+4}a/=6}return{h:a,s:r,l:l}}function r(e,t,n){function a(e,t,n){return 0>n&&(n+=1),n>1&&(n-=1),1/6>n?e+6*(t-e)*n:.5>n?t:2/3>n?e+(t-e)*(2/3-n)*6:e}var r,i,o;if(e=d(e,360),t=d(t,100),n=d(n,100),0===t)r=i=o=n;else{var l=.5>n?n*(1+t):n+t-n*t,s=2*n-l;r=a(s,l,e+1/3),i=a(s,l,e),o=a(s,l,e-1/3)}return{r:255*r,g:255*i,b:255*o}}function i(e,t,n){e=d(e,255),t=d(t,255),n=d(n,255);var a,r,i=T(e,t,n),o=D(e,t,n),l=i,s=i-o;if(r=0===i?0:s/i,i==o)a=0;else{switch(i){case e:a=(t-n)/s+(n>t?6:0);break;case t:a=(n-e)/s+2;break;case n:a=(e-t)/s+4}a/=6}return{h:a,s:r,v:l}}function o(e,t,n){e=6*d(e,360),t=d(t,100),n=d(n,100);var a=S.floor(e),r=e-a,i=n*(1-t),o=n*(1-r*t),l=n*(1-(1-r)*t),s=a%6,c=[n,o,i,i,l,n][s],u=[l,n,n,o,i,i][s],p=[i,i,l,n,n,o][s];return{r:255*c,g:255*u,b:255*p}}function l(e,t,n,a){var r=[m(C(e).toString(16)),m(C(t).toString(16)),m(C(n).toString(16))];return a&&r[0].charAt(0)==r[0].charAt(1)&&r[1].charAt(0)==r[1].charAt(1)&&r[2].charAt(0)==r[2].charAt(1)?r[0].charAt(0)+r[1].charAt(0)+r[2].charAt(0):r.join("")}function s(e,t,n,a){var r=[m(b(a)),m(C(e).toString(16)),m(C(t).toString(16)),m(C(n).toString(16))];return r.join("")}function c(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[e[n]]=n);return t}function u(e){return e=parseFloat(e),(isNaN(e)||0>e||e>1)&&(e=1),e}function d(e,t){g(e)&&(e="100%");var n=h(e);return e=D(t,T(0,parseFloat(e))),n&&(e=parseInt(e*t,10)/100),S.abs(e-t)<1e-6?1:e%t/parseFloat(t)}function p(e){return D(1,T(0,e))}function f(e){return parseInt(e,16)}function g(e){return"string"==typeof e&&-1!=e.indexOf(".")&&1===parseFloat(e)}function h(e){return"string"==typeof e&&-1!=e.indexOf("%")}function m(e){return 1==e.length?"0"+e:""+e}function v(e){return 1>=e&&(e=100*e+"%"),e}function b(e){return Math.round(255*parseFloat(e)).toString(16)}function y(e){return f(e)/255}function w(e){e=e.replace($,"").replace(k,"").toLowerCase();var t=!1;if(O[e])e=O[e],t=!0;else if("transparent"==e)return{r:0,g:0,b:0,a:0,format:"name"};var n;return(n=_.rgb.exec(e))?{r:n[1],g:n[2],b:n[3]}:(n=_.rgba.exec(e))?{r:n[1],g:n[2],b:n[3],a:n[4]}:(n=_.hsl.exec(e))?{h:n[1],s:n[2],l:n[3]}:(n=_.hsla.exec(e))?{h:n[1],s:n[2],l:n[3],a:n[4]}:(n=_.hsv.exec(e))?{h:n[1],s:n[2],v:n[3]}:(n=_.hex8.exec(e))?{a:y(n[1]),r:f(n[2]),g:f(n[3]),b:f(n[4]),format:t?"name":"hex8"}:(n=_.hex6.exec(e))?{r:f(n[1]),g:f(n[2]),b:f(n[3]),format:t?"name":"hex"}:(n=_.hex3.exec(e))?{r:f(n[1]+""+n[1]),g:f(n[2]+""+n[2]),b:f(n[3]+""+n[3]),format:t?"name":"hex"}:!1}var $=/^[\s,#]+/,k=/\s+$/,x=0,S=Math,C=S.round,D=S.min,T=S.max,M=S.random,E=function P(e,n){if(e=e?e:"",n=n||{},e instanceof P)return e;if(!(this instanceof P))return new P(e,n);var a=t(e);this._r=a.r,this._g=a.g,this._b=a.b,this._a=a.a,this._roundA=C(100*this._a)/100,this._format=n.format||a.format,this._gradientType=n.gradientType,this._r<1&&(this._r=C(this._r)),this._g<1&&(this._g=C(this._g)),this._b<1&&(this._b=C(this._b)),this._ok=a.ok,this._tc_id=x++};E.prototype={isValid:function(){return this._ok},getFormat:function(){return this._format},getAlpha:function(){return this._a},setAlpha:function(e){this._a=u(e),this._roundA=C(100*this._a)/100},toHsv:function(){var e=i(this._r,this._g,this._b);return{h:360*e.h,s:e.s,v:e.v,a:this._a}},toHsvString:function(){var e=i(this._r,this._g,this._b),t=C(360*e.h),n=C(100*e.s),a=C(100*e.v);return 1==this._a?"hsv("+t+", "+n+"%, "+a+"%)":"hsva("+t+", "+n+"%, "+a+"%, "+this._roundA+")"},toHsl:function(){var e=a(this._r,this._g,this._b);return{h:360*e.h,s:e.s,l:e.l,a:this._a}},toHslString:function(){var e=a(this._r,this._g,this._b),t=C(360*e.h),n=C(100*e.s),r=C(100*e.l);return 1==this._a?"hsl("+t+", "+n+"%, "+r+"%)":"hsla("+t+", "+n+"%, "+r+"%, "+this._roundA+")"},toHex:function(e){return l(this._r,this._g,this._b,e)},toHexString:function(e){return"#"+this.toHex(e)},toHex8:function(){return s(this._r,this._g,this._b,this._a)},toHex8String:function(){return"#"+this.toHex8()},toRgb:function(){return{r:C(this._r),g:C(this._g),b:C(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+C(this._r)+", "+C(this._g)+", "+C(this._b)+")":"rgba("+C(this._r)+", "+C(this._g)+", "+C(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:C(100*d(this._r,255))+"%",g:C(100*d(this._g,255))+"%",b:C(100*d(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+C(100*d(this._r,255))+"%, "+C(100*d(this._g,255))+"%, "+C(100*d(this._b,255))+"%)":"rgba("+C(100*d(this._r,255))+"%, "+C(100*d(this._g,255))+"%, "+C(100*d(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":this._a<1?!1:A[l(this._r,this._g,this._b,!0)]||!1},toFilter:function(e){var t="#"+s(this._r,this._g,this._b,this._a),n=t,a=this._gradientType?"GradientType = 1, ":"";if(e){var r=E(e);n=r.toHex8String()}return"progid:DXImageTransform.Microsoft.gradient("+a+"startColorstr="+t+",endColorstr="+n+")"},toString:function(e){var t=!!e;e=e||this._format;var n=!1,a=this._a<1&&this._a>=0,r=!t&&a&&("hex"===e||"hex6"===e||"hex3"===e||"name"===e);return r?"name"===e&&0===this._a?this.toName():this.toRgbString():("rgb"===e&&(n=this.toRgbString()),"prgb"===e&&(n=this.toPercentageRgbString()),("hex"===e||"hex6"===e)&&(n=this.toHexString()),"hex3"===e&&(n=this.toHexString(!0)),"hex8"===e&&(n=this.toHex8String()),"name"===e&&(n=this.toName()),"hsl"===e&&(n=this.toHslString()),"hsv"===e&&(n=this.toHsvString()),n||this.toHexString())}},E.fromRatio=function(e,t){if("object"==typeof e){var n={};for(var a in e)e.hasOwnProperty(a)&&(n[a]="a"===a?e[a]:v(e[a]));e=n}return E(e,t)},E.equals=function(e,t){return e&&t?E(e).toRgbString()==E(t).toRgbString():!1},E.random=function(){return E.fromRatio({r:M(),g:M(),b:M()})},E.desaturate=function(e,t){t=0===t?0:t||10;var n=E(e).toHsl();return n.s-=t/100,n.s=p(n.s),E(n)},E.saturate=function(e,t){t=0===t?0:t||10;var n=E(e).toHsl();return n.s+=t/100,n.s=p(n.s),E(n)},E.greyscale=function(e){return E.desaturate(e,100)},E.lighten=function(e,t){t=0===t?0:t||10;var n=E(e).toHsl();return n.l+=t/100,n.l=p(n.l),E(n)},E.brighten=function(e,t){t=0===t?0:t||10;var n=E(e).toRgb();return n.r=T(0,D(255,n.r-C(255*-(t/100)))),n.g=T(0,D(255,n.g-C(255*-(t/100)))),n.b=T(0,D(255,n.b-C(255*-(t/100)))),E(n)},E.darken=function(e,t){t=0===t?0:t||10;var n=E(e).toHsl();return n.l-=t/100,n.l=p(n.l),E(n)},E.complement=function(e){var t=E(e).toHsl();return t.h=(t.h+180)%360,E(t)},E.triad=function(e){var t=E(e).toHsl(),n=t.h;return[E(e),E({h:(n+120)%360,s:t.s,l:t.l}),E({h:(n+240)%360,s:t.s,l:t.l})]},E.tetrad=function(e){var t=E(e).toHsl(),n=t.h;return[E(e),E({h:(n+90)%360,s:t.s,l:t.l}),E({h:(n+180)%360,s:t.s,l:t.l}),E({h:(n+270)%360,s:t.s,l:t.l})]},E.splitcomplement=function(e){var t=E(e).toHsl(),n=t.h;return[E(e),E({h:(n+72)%360,s:t.s,l:t.l}),E({h:(n+216)%360,s:t.s,l:t.l})]},E.analogous=function(e,t,n){t=t||6,n=n||30;var a=E(e).toHsl(),r=360/n,i=[E(e)];for(a.h=(a.h-(r*t>>1)+720)%360;--t;)a.h=(a.h+r)%360,i.push(E(a));return i},E.monochromatic=function(e,t){t=t||6;for(var n=E(e).toHsv(),a=n.h,r=n.s,i=n.v,o=[],l=1/t;t--;)o.push(E({h:a,s:r,v:i})),i=(i+l)%1;return o},E.readability=function(e,t){var n=E(e).toRgb(),a=E(t).toRgb(),r=(299*n.r+587*n.g+114*n.b)/1e3,i=(299*a.r+587*a.g+114*a.b)/1e3,o=Math.max(n.r,a.r)-Math.min(n.r,a.r)+Math.max(n.g,a.g)-Math.min(n.g,a.g)+Math.max(n.b,a.b)-Math.min(n.b,a.b);return{brightness:Math.abs(r-i),color:o}},E.readable=function(e,t){var n=E.readability(e,t);return n.brightness>125&&n.color>500},E.mostReadable=function(e,t){for(var n=null,a=0,r=!1,i=0;i<t.length;i++){var o=E.readability(e,t[i]),l=o.brightness>125&&o.color>500,s=3*(o.brightness/125)+o.color/500;(l&&!r||l&&r&&s>a||!l&&!r&&s>a)&&(r=l,a=s,n=E(t[i]))}return n};var O=E.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},A=E.hexNames=c(O),_=function(){var e="[-\\+]?\\d+%?",t="[-\\+]?\\d*\\.\\d+%?",n="(?:"+t+")|(?:"+e+")",a="[\\s|\\(]+("+n+")[,|\\s]+("+n+")[,|\\s]+("+n+")\\s*\\)?",r="[\\s|\\(]+("+n+")[,|\\s]+("+n+")[,|\\s]+("+n+")[,|\\s]+("+n+")\\s*\\)?";return{rgb:new RegExp("rgb"+a),rgba:new RegExp("rgba"+r),hsl:new RegExp("hsl"+a),hsla:new RegExp("hsla"+r),hsv:new RegExp("hsv"+a),hex3:/^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex8:/^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/}}();e.tinycolor=E}(),t(function(){t.fn.spectrum.load&&t.fn.spectrum.processNativeColorInputs()})}(window,jQuery),function(){"use strict";angular.module("risevision.widget.common.color-picker",["risevision.widget.common"]).directive("colorPicker",["i18nLoader",function(e){return{restrict:"A",scope:{color:"=",type:"@"},transclude:!1,link:function(t,n){function a(e){t.$apply(function(){t.color=e.toRgbString()})}var r=$(n);t.type=t.type?t.type:"background",t.$watch("color",function(n){n&&(r.next().hasClass(".sp-replacer.sp-light")?r.spectrum("set",n):e.get().then(function(){var e={cancelText:"Cancel",chooseText:"Apply",color:n,preferredFormat:"rgb",showAlpha:!0,showInput:!0,type:t.type,change:a,showPalette:!0,palette:[["#000","#444","#666","#999","#ccc","#eee","#f3f3f3","#fff"],["#f00","#f90","#ff0","#0f0","#0ff","#00f","#90f","#f0f"],["#f4cccc","#fce5cd","#fff2cc","#d9ead3","#d0e0e3","#cfe2f3","#d9d2e9","#ead1dc"],["#ea9999","#f9cb9c","#ffe599","#b6d7a8","#a2c4c9","#9fc5e8","#b4a7d6","#d5a6bd"],["#e06666","#f6b26b","#ffd966","#93c47d","#76a5af","#6fa8dc","#8e7cc3","#c27ba0"],["#c00","#e69138","#f1c232","#6aa84f","#45818e","#3d85c6","#674ea7","#a64d79"],["#900","#b45f06","#bf9000","#38761d","#134f5c","#0b5394","#351c75","#741b47"],["#600","#783f04","#7f6000","#274e13","#0c343d","#073763","#20124d","#4c1130"]]};r.spectrum(e)}))})}}}])}(),function(){"use strict";angular.module("risevision.widget.common.background-setting",["risevision.common.i18n","risevision.widget.common.color-picker"]).directive("backgroundSetting",["$templateCache",function(e){return{restrict:"E",scope:{background:"="},template:e.get("_angular/background-setting/background-setting.html"),link:function(e){e.defaultSetting={color:"transparent"},e.defaults=function(e){if(e)for(var t=1,n=arguments.length;n>t;t++){var a=arguments[t];for(var r in a)void 0===e[r]&&(e[r]=a[r])}return e},e.$watch("background",function(t){e.defaults(t,e.defaultSetting)})}}}])}(),function(){try{app=angular.module("risevision.widget.common.background-setting")}catch(e){app=angular.module("risevision.widget.common.background-setting",[])}app.run(["$templateCache",function(e){"use strict";e.put("_angular/background-setting/background-setting.html",'<div class="section">\n  <h5>{{"background.heading" | translate}}</h5>\n  <div class="form-group">\n    <label>{{"background.color.label" | translate}}  &nbsp;</label>\n    <div>\n      <input color-picker color="background.color" type="background">\n    </div>\n  </div>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.widget-button-toolbar",["risevision.common.i18n"]).directive("widgetButtonToolbar",["$templateCache",function(e){return{restrict:"E",scope:{help:"@",contribute:"@",save:"&",cancel:"&",disableSave:"&"},template:e.get("_angular/widget-button-toolbar/widget-button-toolbar.html"),link:function(e,t,n){e.helpRef="",e.contributeRef="","undefined"!=typeof n.help&&""!==n.help&&(e.helpRef=n.help),"undefined"!=typeof n.contribute&&""!==n.contribute&&(e.contributeRef=n.contribute)}}}])}(),function(){try{app=angular.module("risevision.widget.common.widget-button-toolbar")}catch(e){app=angular.module("risevision.widget.common.widget-button-toolbar",[])}app.run(["$templateCache",function(e){"use strict";e.put("_angular/widget-button-toolbar/widget-button-toolbar.html",'<div class="btn-toolbar sticky-buttons">\n  <button id="save" class="btn btn-primary btn-fixed-width" type="button" ng-click="save()" ng-disabled="disableSave()">\n    <span>{{"common.save" | translate}}</span>\n    <i class="fa fa-white fa-check fa-lg icon-right"></i>\n  </button>\n  <button id="cancel" class="btn btn-default btn-fixed-width" type="button" ng-click="cancel()">\n    <span>{{"common.cancel" | translate}}</span>\n    <i class="fa fa-white fa-times fa-lg icon-right"></i>\n  </button>\n  <a type="button" class="btn btn-rv-help btn-fixed-width" target="_blank" href={{helpRef}} ng-if="helpRef !== \'\'">\n    <span>{{"common.help" | translate}}</span>\n    <i class="fa fa-question-circle fa-lg icon-right"></i>\n  </a>\n  <a type="button" class="btn btn-rv-help btn-fixed-width" target="_blank" href={{contributeRef}} ng-if="contributeRef !== \'\'">\n    <span>{{"common.contribute" | translate}}</span>\n    <i class="fa fa-github fa-lg icon-right"></i>\n  </a>\n</div>\n')}])}(),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json"),"undefined"==typeof config)var config={STORAGE_ENV:"prod"};angular.module("risevision.widget.image.settings",["risevision.common.i18n","risevision.widget.common.widget-button-toolbar","risevision.widget.common.url-field","risevision.widget.common.position-setting","risevision.widget.common.background-setting"]),angular.module("risevision.widget.image.settings").controller("imageSettingsController",["$scope","$q","$log","commonSettings","imageValidator",function(e,t,n,a,r){var i="";e.isValidImage=!0,e.validateImage=function(){e.settingsForm.urlField.$valid&&""!==i&&r.isImage(i).then(function(t){e.isValidImage=t,t?(e.settings.additionalParams.storage=a.getStorageUrlData(i),e.$parent.saveSettings()):e.settings.additionalParams.storage={}})},e.$watch("settings.additionalParams.url",function(e){void 0!==e&&""!==e&&(i=e)})}]).value("defaultSettings",{params:{},additionalParams:{url:"",storage:{},scaleToFit:!0,position:"top-left",background:{}}}),angular.module("risevision.widget.common",[]),angular.module("risevision.widget.common").controller("settingsController",["$scope","settingsSaver","settingsGetter","settingsCloser",function(e,t,n,a){e.settings={params:{},additionalParams:{}},e.alerts=[],e.getAdditionalParam=function(t,n){var a=e.settings.additionalParams[t];return angular.isUndefined(a)?n:a},e.setAdditionalParam=function(t,n){e.settings.additionalParams[t]=n},e.loadAdditionalParams=function(){n.getAdditionalParams().then(function(t){e.settings.additionalParams=t,e.$broadcast("loadAdditionalParams",t)},function(e){alert(e)})},e.setAdditionalParams=function(t,n){e.settings.additionalParams[t]=n},e.saveSettings=function(){e.alerts=[],e.$broadcast("collectAdditionalParams"),t.saveSettings(e.settings).then(function(){},function(t){e.alerts=t.alerts})},e.closeSettings=function(){a.closeSettings().then(function(){},function(t){e.alerts=t.alerts})},e.settings.params=n.getParams(),e.loadAdditionalParams()}]).directive("scrollOnAlerts",function(){return{restrict:"A",scope:!1,link:function(e,t){e.$watchCollection("alerts",function(e,n){e.length>0&&0===n.length&&$("body").animate({scrollTop:t.offset().top},"fast")})}}}),angular.module("risevision.widget.common").constant("STORAGE_FILE_URL_BASE","storage.googleapis.com/risemedialibrary-").constant("STORAGE_FOLDER_URL_BASE","googleapis.com/storage/").factory("commonSettings",["$log","STORAGE_FILE_URL_BASE","STORAGE_FOLDER_URL_BASE",function(e,t,n){var a={getStorageUrlData:function(e){function a(e){return-1!==e.indexOf(t)?"file":-1!==e.indexOf(n)?"folder":null}function r(e){var t=e.split("risemedialibrary-");return t[1].slice(0,t[1].indexOf("/"))}var i,o,l,s,c={};if("file"===a(e))i=e.split(t)[1],i=decodeURIComponent(i.slice(i.indexOf("/")+1)),o=i.split("/"),c.companyId=r(e),c.fileName=o.pop(),c.folder=o.length>0?o.join("/"):"",""!==c.folder&&(c.folder+="/");else if("folder"===a(e)){l=e.split("?");for(var u=0;u<l.length;u++)if(s=l[u].split("="),"prefix"===s[0]&&"undefined"!=typeof s[1]&&""!==s[1]){c.companyId=r(e),c.folder=decodeURIComponent(s[1]),c.fileName="";break}}return c}};return a}]),angular.module("risevision.widget.common").factory("gadgetsApi",["$window",function(e){return e.gadgets}]),angular.module("risevision.widget.common").service("i18nLoader",["$window","$q",function(e,t){var n=t.defer();e.i18n.init({fallbackLng:"en",resGetPath:"locales/__ns_____lng__.json"},function(){n.resolve(e.i18n)}),this.get=function(){return n.promise}}]),angular.module("risevision.widget.common").factory("imageValidator",["$q",function(e){var t={isImage:function(t){var n=e.defer(),a=new Image;return a.onload=function(){n.resolve(!0)},a.onerror=function(){n.resolve(!1)},a.src=t,n.promise}};return t}]),angular.module("risevision.widget.common").service("settingsSaver",["$q","$log","gadgetsApi","settingsParser",function(e,t,n,a){function r(e){var t=angular.copy(e);return delete t.params.id,delete t.params.companyId,delete t.params.rsW,delete t.params.rsH,t}this.saveSettings=function(i,o){var l=e.defer(),s=[],c="";i=r(i),o&&(s=o(i)),s.length>0&&(t.debug("Validation failed.",s),l.reject({alerts:s})),i.params.hasOwnProperty("layoutURL")&&(c+=i.params.layoutURL+"?",delete i.params.layoutURL),c+=a.encodeParams(i.params);var u=a.encodeAdditionalParams(i.additionalParams);return n.rpc.call("","rscmd_saveSettings",function(e){t.debug("encoded settings",JSON.stringify(e)),t.debug("Settings saved. ",i),l.resolve(e)},{params:c,additionalParams:u}),l.promise}}]).service("settingsGetter",["$q","gadgetsApi","$log","settingsParser","$window","defaultSettings",function(e,t,n,a,r,i){this.getAdditionalParams=function(){var r=e.defer(),o=i.additionalParams||{};return t.rpc.call("","rscmd_getAdditionalParams",function(e){e=e?a.parseAdditionalParams(e):{},n.debug("getAdditionalParams returns ",e),r.resolve(angular.extend(o,e))}),r.promise},this.getParams=function(){var e=i.params||{};return angular.extend(e,a.parseParams(r.location.search))}}]).service("settingsParser",[function(){function e(e){return 0===e.indexOf("up_")?e.slice(3):null}this.parseAdditionalParams=function(e){return e?JSON.parse(e):{}},this.encodeAdditionalParams=function(e){return JSON.stringify(e)},this.encodeParams=function(e){var t=[];for(var n in e)if(e.hasOwnProperty(n)){var a;a="object"==typeof e[n]?JSON.stringify(e[n]):e[n],t.push("up_"+encodeURIComponent(n)+"="+encodeURIComponent(a))}return t.join("&")},this.parseParams=function(t){"?"===t[0]&&(t=t.slice(1));for(var n={},a=t.split("&"),r=0;r<a.length;r++){var i=a[r].split("="),o=e(decodeURIComponent(i[0]));if(o)try{n[o]=JSON.parse(decodeURIComponent(i[1]))}catch(l){n[o]=decodeURIComponent(i[1])}}return n}}]).service("settingsCloser",["$q","$log","gadgetsApi",function(e,t,n){this.closeSettings=function(){var t=e.defer();return n.rpc.call("","rscmd_closeSettings",function(){t.resolve(!0)}),t.promise}}]).value("defaultSettings",{}),function(e){"use strict";e.module("risevision.widget.common.visualization",[]).factory("visualizationApi",["$q","$window",function(e,t){var n,a=e.defer(),r={get:function(){return n||(n=a.promise,t.google.visualization?a.resolve(t.google.visualization):t.google.setOnLoadCallback(function(){a.resolve(t.google.visualization)})),n}};return r}])}(angular);
//# sourceMappingURL=data:application/json;base64,