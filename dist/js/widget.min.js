var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,t){var i=null;e.event?(i=e,i.file_url&&(i.file_format=n(i.file_url)),i.company_id=a,i.display_id=s,t(i)):t(i)}function t(){var e=new Date,t=e.getUTCFullYear(),n=e.getUTCMonth()+1,i=e.getUTCDate();return 10>n&&(n="0"+n),10>i&&(i="0"+i),t+n+i}function n(e){var t,n=/[?#&]/;return e&&"string"==typeof e?(t=e.substr(e.lastIndexOf(".")+1),n.test(t)&&(t=t.substr(0,-1!==t.indexOf("?")?t.indexOf("?"):t.length),t=t.substr(0,-1!==t.indexOf("#")?t.indexOf("#"):t.length),t=t.substr(0,-1!==t.indexOf("&")?t.indexOf("&"):t.length)),t.toLowerCase()):null}function i(e){var n={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:t(),rows:[{insertId:""}]},i=JSON.parse(JSON.stringify(n));return i.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),i.rows[0].json=JSON.parse(JSON.stringify(e)),i.rows[0].json.ts=(new Date).toISOString(),i}function o(t,n){e(n,function(e){null!==e&&RiseVision.Common.Logger.log(t,e)})}function r(e,t){a=e,s=t}var s="",a="";return{getInsertData:i,getFileFormat:n,logEvent:o,setIds:r}}(),RiseVision.Common.Logger=function(e){"use strict";function t(e){var t=new XMLHttpRequest;return new Date-u<358e4?e({}):(t.open("POST",o,!0),t.onloadend=function(){var n=JSON.parse(t.response);e({token:n.access_token,refreshedAt:new Date})},t.send(),void 0)}function n(e){return s&&l===e}function i(i,o){function c(t){var n,s,a=new XMLHttpRequest;s=r.replace("TABLE_ID",i),u=t.refreshedAt||u,d=t.token||d,n=e.getInsertData(o),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+d),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!i||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&n(o.event)))return s=!0,l=o.event,setTimeout(function(){s=!1},a),t(c)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",u=0,d="";return{log:i}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var t=new XMLHttpRequest;e&&"function"==typeof e&&(t.open("GET",n+"ping?callback=_",!0),t.onreadystatechange=function(){try{4===t.readyState&&(i=!0,200===t.status?(o=!0,e(!0,t.responseText)):(console.debug("Rise Cache is not running"),o=!1,e(!1,null)))}catch(n){console.debug("Caught exception: ",n.description)}},t.send())}function t(e,t,r){function s(t){var i,o,s;t?i=r?n+"?url="+encodeURIComponent(e):n+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):r?i=e:(o=e.split("?"),s=1===o.length?"?":"&",i=e+s+"cb="+(new Date).getTime()),a("HEAD",i)}function a(e,n){var i=new XMLHttpRequest,r={xhr:i,url:n};i.open(e,n,!0),i.addEventListener("loadend",function(){var s=i.status||0;s>=200&&300>s?t(r):"HEAD"===e?a("GET",n):o?t(r,new Error("The request failed with status code: "+s)):t(r)}),i.send()}if(e&&t&&"function"==typeof t)return i?s(o):this.ping(s)}var n="http://localhost:9494/",i=!1,o=!1;return{getFile:t,ping:e}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,t){var n="font-family:"+t.font.family+"; ",i="color: "+t.color+"; ",o="font-size: "+t.size+"px; ",r="font-weight: "+(t.bold?"bold":"normal")+"; ",s="font-style: "+(t.italic?"italic":"normal")+"; ",a="text-decoration: "+(t.underline?"underline":"none")+"; ",l="background-color: "+t.highlightColor+"; ";return"."+e+" {"+n+i+o+r+s+a+l+"}"}function t(e){for(var t=document.createElement("style"),n=0,i=e.length;i>n;n++)t.appendChild(document.createTextNode(e[n]));document.head.appendChild(t)}function n(n,r){n.forEach(function(n){n.class&&n.fontSetting&&t([e(n.class,n.fontSetting)]),n.fontSetting.font.type&&("custom"===n.fontSetting.font.type&&n.fontSetting.font.family&&n.fontSetting.font.url?i(n.fontSetting.font.family,n.fontSetting.font.url,r):"google"===n.fontSetting.font.type&&n.fontSetting.font.family&&o(n.fontSetting.font.family,r))})}function i(e,t,n){var i=null,o="font-family: "+e+"; src: url('"+t+"');";n=n||document,i=n.styleSheets[0],null!==i&&i.addRule("@font-face",o)}function o(e,t){var n=document.createElement("link");t=t||document,n.setAttribute("rel","stylesheet"),n.setAttribute("type","text/css"),n.setAttribute("href","https://fonts.googleapis.com/css?family="+e),null!==n&&t.getElementsByTagName("head")[0].appendChild(n)}function r(e){for(var t=e.length,n=[],i=0;t>i;i++)n[i]=new Image,n[i].src=e[i]}function s(e){for(var t,n=window.location.search.substring(1),i=n.split("&"),o=0;o<i.length;o++)if(t=i[o].split("="),t[0]==e)return decodeURIComponent(t[1]);return""}return{getQueryParameter:s,getFontCssStyle:e,addCSSRules:t,loadFonts:n,loadCustomFont:i,loadGoogleFont:o,preloadImages:r}}(),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={STORAGE_ENV:"prod"},RiseVision=RiseVision||{};RiseVision.Image={},RiseVision.Image=function(e){"use strict";function t(){e.rpc.call("","rsevent_ready",null,E.getString("id"),!0,!0,!0,!0,!0)}function n(){e.rpc.call("","rsevent_done",null,E.getString("id")),null!==O&&u(O,!0),u({event:"done",file_url:r()},!1)}function i(){clearTimeout(L),L=null}function o(){i(),L=setTimeout(function(){n()},5e3)}function r(){var e=-1;if(S&&S.length>0){if("file"===I)return S[0];if("folder"===I&&T&&T.isReady()&&(e=T.getCurrentSlide(),-1!==e))return S[e]}return null}function s(){var e,n=document.getElementById("container"),i=document.createDocumentFragment(),o=document.createElement("div");b=new RiseVision.Common.Message(document.getElementById("container"),document.getElementById("messageContainer")),b.show("Please wait while your image is downloaded."),V.background&&Object.keys(V.background).length>0&&(document.body.style.background=V.background.color),"file"===I?(o.setAttribute("id","image"),o.className=V.position,o.className=V.scaleToFit?o.className+" scale-to-fit":o.className,i.appendChild(o),n.appendChild(i),e=0!==Object.keys(V.storage).length,e?(A="storage file",w=new RiseVision.Image.StorageFile(V),w.init()):(A="custom",C=new RiseVision.Image.NonStorage(V),C.init())):"folder"===I&&(o.className="tp-banner-container",i.appendChild(o),n.appendChild(i),A="storage folder",w=new RiseVision.Image.StorageFolder(V),w.init()),t()}function a(e){var t=document.querySelector("#container #image");t.style.backgroundImage="url("+e+")"}function l(){return k}function u(e,t){t&&(O=e),RiseVision.Common.LoggerUtils.logEvent(v(),e)}function d(e){"file"===I?(S[0]=e,b.hide(),a(S[0])):"folder"===I&&(S=e,T=new RiseVision.Image.Slider(V),T.init(e))}function c(e){"file"===I?(S[0]=e,a(S[0])):"folder"===I&&(S=e,T.refresh(S)),N=!1,k=!1,O=null}function g(e,t){V=_.clone(e),I=t,V.width=E.getInt("rsW"),V.height=E.getInt("rsH"),document.getElementById("container").style.height=E.getInt("rsH")+"px",s()}function f(){b.hide(),q||T.play()}function m(){n()}function h(){q=!0,i(),"folder"===I&&T&&T.isReady()&&T.pause()}function p(){return q=!1,F||(u({event:"configuration",event_details:A},!1),F=!0),u({event:"play",file_url:r()},!1),N?(o(),void 0):("folder"===I&&T&&T.isReady()&&T.play(),void 0)}function v(){return"image_events"}function R(e,t){N=!0,k="undefined"!=typeof t,b.show(e),"folder"===I&&T&&T.isReady()&&T.destroy(),q||o()}function y(){h()}var I,E=new e.Prefs,b=null,V=null,w=null,C=null,T=null,S=[],O=null,A=null,L=null,N=!1,k=!1,F=!1,q=!0;return{hasStorageError:l,logEvent:u,onFileInit:d,onFileRefresh:c,onSliderComplete:m,onSliderReady:f,pause:h,play:p,setAdditionalParams:g,getTableName:v,showError:R,stop:y}}(gadgets);var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.Slider=function(e){"use strict";function t(){var t=document.querySelector(".tp-banner ul"),n=document.createDocumentFragment(),i=[],o=null,r=null,s="";f=h.length,h.forEach(function(t){switch(o=document.createElement("li"),r=document.createElement("img"),o.setAttribute("data-transition","fade"),o.setAttribute("data-masterspeed",500),o.setAttribute("data-delay",1e3*e.duration),r.src=t.url,e.position){case"top-left":s="left top";break;case"top-center":s="center top";break;case"top-right":s="right top";break;case"middle-left":s="left center";break;case"middle-center":s="center center";break;case"middle-right":s="right center";break;case"bottom-left":s="left bottom";break;case"bottom-center":s="center bottom";break;case"bottom-right":s="right bottom";break;default:s="left top"}r.setAttribute("data-bgposition",s),e.scaleToFit?r.setAttribute("data-bgfit","contain"):r.setAttribute("data-bgfit","normal"),o.appendChild(r),i.push(o)}),i.forEach(function(e){n.appendChild(e)}),t.appendChild(n)}function n(e){V?c():y&&(y=!1,c(),RiseVision.Image.onSliderComplete(),I&&(m&&(i(),l(p)),I=!1)),e.slideIndex===f&&(y=!0)}function i(){$("body").off("touchend"),m.off("revolution.slide.onloaded"),m.off("revolution.slide.onchange"),m.revkill(),m=null}function o(){V=!0,clearTimeout(R),R=setTimeout(function(){m.revnext(),m.revresume(),V=!1,b=!0},1e3*e.pause),r()}function r(){e.autoHide&&(clearTimeout(v),v=setTimeout(function(){$(".tp-leftarrow, .tp-rightarrow").addClass("hidearrows")},w))}function s(){m&&(y=!1,c(),i())}function a(){return m&&h&&h.length>0?m.revcurrentslide():-1}function l(i){var s=document.querySelector(".tp-banner-container"),a=document.createDocumentFragment(),l=document.createElement("div"),u=document.createElement("ul");l.setAttribute("class","tp-banner"),l.appendChild(u),a.appendChild(l),s.appendChild(a),h=_.clone(i),t(),E=!0,m=$(".tp-banner").revolution({hideThumbs:0,hideTimerBar:"on",navigationType:"none",onHoverStop:"off",startwidth:e.width,startheight:e.height}),m.on("revolution.slide.onloaded",function(){c(),E=!1,RiseVision.Image.onSliderReady()}),m.on("revolution.slide.onchange",function(e,t){n(t)}),$("body").on("touchend",".tp-banner",function(){o(),$(".tp-leftarrow, .tp-rightarrow").removeClass("hidearrows")}),$("body").on("touchend",".tp-leftarrow, .tp-rightarrow",function(){o()}),r()}function u(){return!E}function d(){m&&(e.hasOwnProperty("resume")&&!e.resume&&m.revshowslide(0),b||(m.revresume(),b=!0))}function c(){m&&b&&(m.revpause(),b=!1)}function g(e){RiseVision.Common.Utilities.preloadImages(e),p=_.clone(e),I=!0}var f=0,m=null,h=null,p=null,v=null,R=null,y=!1,I=!1,E=!0,b=!1,V=!1,w=3e3;return{getCurrentSlide:a,destroy:s,init:l,isReady:u,play:d,pause:c,refresh:g}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.StorageFile=function(e){"use strict";function t(){var t=document.querySelector("rise-storage");t.addEventListener("rise-storage-response",function(e){var t;e.detail&&e.detail.url&&(t=e.detail.url.replace("'","\\'"),n?(n=!1,RiseVision.Image.onFileInit(t)):e.detail.hasOwnProperty("changed")&&(e.detail.changed?RiseVision.Image.onFileRefresh(t):RiseVision.Image.hasStorageError()&&RiseVision.Image.onFileRefresh(e.detail.url)))}),t.addEventListener("rise-storage-no-file",function(e){var t={event:"error",event_details:"storage file not found",file_url:e.detail},n=document.getElementById("image");n.style.background="",RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected image does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-file-throttled",function(e){var t={event:"error",event_details:"storage file throttled",file_url:e.detail};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected image is temporarily unavailable.")}),t.addEventListener("rise-storage-error",function(e){var t=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,n={event:"error",event_details:"rise storage error",error_details:"The request failed with status code: "+e.detail.error.currentTarget.status,file_url:t};RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var t=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,n={event:"error",event_details:"rise cache error",error_details:"The request failed with status code: "+e.detail.error.currentTarget.status,file_url:t};RiseVision.Image.logEvent(n,!0);var i=e.detail.error.currentTarget.status,o="There was a problem retrieving the file from Rise Cache.";404===i&&(o="The image does not exist or cannot be accessed."),RiseVision.Image.showError(o)}),t.setAttribute("folder",e.storage.folder),t.setAttribute("fileName",e.storage.fileName),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("env",config.STORAGE_ENV),t.go()}var n=!0;return{init:t}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.StorageFolder=function(e){"use strict";function t(e){var t;e.detail&&(e.detail.added&&r.push({name:e.detail.name,url:e.detail.url}),e.detail.changed&&(t=_.find(r,function(t){return t.name===e.detail.name}),t.url=e.detail.url),e.detail.deleted&&(r=_.reject(r,function(t){return t.name===e.detail.name}))),r=_.sortBy(r,function(e){return e.name.toLowerCase()})}function n(e){return t(e),e.detail.added&&o?(r.length>1?(o=!1,clearTimeout(s),RiseVision.Image.onFileInit(r)):s=setTimeout(function(){o=!1,RiseVision.Image.onFileInit(r)},5e3),void 0):((!e.detail.hasOwnProperty("changed")||e.detail.changed||RiseVision.Image.hasStorageError())&&RiseVision.Image.onFileRefresh(r),void 0)}function i(){var t=document.querySelector("rise-storage");t.addEventListener("rise-storage-response",n),t.addEventListener("rise-storage-empty-folder",function(){var e={event:"error",event_details:"storage folder empty"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("The selected folder does not contain any images.")}),t.addEventListener("rise-storage-no-folder",function(e){var t={event:"error",event_details:"storage folder doesn't exist",error_details:e.detail};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected folder does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-folder-invalid",function(){var e={event:"error",event_details:"storage folder format(s) invalid"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("The selected folder does not contain any supported image formats.")}),t.addEventListener("rise-storage-error",function(e){var t={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var t={event:"rise cache error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Image.logEvent(t,!0);var n=e.detail.error.currentTarget.status,i="There was a problem retrieving the file from Rise Cache.";404===n&&(i="The image does not exist or cannot be accessed."),RiseVision.Image.showError(i)}),t.setAttribute("fileType","image"),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("folder",e.storage.folder),t.setAttribute("env",config.STORAGE_ENV),t.go()}var o=!0,r=[],s=null;return{init:i}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.NonStorage=function(e){"use strict";function t(e){var t;o.getFile(l,function(e,i){if(i){t={event:"error",event_details:"non-storage error",error_details:i.message,file_url:e.url},RiseVision.Image.logEvent(t,!0);var o=i.message.substring(i.message.indexOf(":")+2),r="There was a problem retrieving the file from Rise Cache.";"404"===o&&(r="The image does not exist or cannot be accessed."),RiseVision.Image.showError(r)}else a?(a=!1,RiseVision.Image.onFileInit(e.url),n()):RiseVision.Image.onFileRefresh(e.url)},e)}function n(){null===s&&(s=setInterval(function(){t(!1)},r))}function i(){l=e.url&&""!==e.url?e.url:e.selector.url,t(!0)}var o=RiseVision.Common.RiseCache,r=3e5,s=null,a=!0,l="";return{init:i}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,t){"use strict";function n(){try{t.style.height=e.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function i(){if(r){for(;t.firstChild;)t.removeChild(t.firstChild);t.style.display="none",e.style.visibility="visible",r=!1}}function o(n){var i,o=document.createDocumentFragment();r?(i=t.querySelector(".message"),i.innerHTML=n):(e.style.visibility="hidden",t.style.display="block",i=document.createElement("p"),i.innerHTML=n,i.setAttribute("class","message"),o.appendChild(i),t.appendChild(o),r=!0)}var r=!1;return n(),{hide:i,show:o}},function(e,t,n){"use strict";function i(e,t){var n,i,o="",r="";Array.isArray(e)&&e.length>0&&Array.isArray(t)&&t.length>0&&("companyId"===e[0]&&(o=t[0]),"displayId"===e[1]&&(r=t[1]?t[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(o,r),"additionalParams"===e[2]&&(n=JSON.parse(t[2]),i=0!==Object.keys(n.storage).length?n.storage.fileName?"file":"folder":"file",RiseVision.Image.setAdditionalParams(n,i)))}function o(){RiseVision.Image.pause()}function r(){RiseVision.Image.play()}function s(){RiseVision.Image.stop()}function a(){e.removeEventListener("WebComponentsReady",a),l&&""!==l&&(n.rpc.register("rscmd_play_"+l,r),n.rpc.register("rscmd_pause_"+l,o),n.rpc.register("rscmd_stop_"+l,s),n.rpc.register("rsparam_set_"+l,i),n.rpc.call("","rsparam_get",null,l,["companyId","displayId","additionalParams"]))}var l=(new n.Prefs).getString("id");e.oncontextmenu=function(){return!1},t.body.onmousedown=function(){return!1},e.addEventListener("WebComponentsReady",a)}(window,document,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-3"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL3dpZGdldC5taW4uanMiXSwibmFtZXMiOlsiV0lER0VUX0NPTU1PTl9DT05GSUciLCJBVVRIX1BBVEhfVVJMIiwiTE9HR0VSX0NMSUVOVF9JRCIsIkxPR0dFUl9DTElFTlRfU0VDUkVUIiwiTE9HR0VSX1JFRlJFU0hfVE9LRU4iLCJTVE9SQUdFX0VOViIsIlNUT1JFX1VSTCIsIlJpc2VWaXNpb24iLCJDb21tb24iLCJMb2dnZXJVdGlscyIsImdldEV2ZW50UGFyYW1zIiwicGFyYW1zIiwiY2IiLCJqc29uIiwiZXZlbnQiLCJmaWxlX3VybCIsImZpbGVfZm9ybWF0IiwiZ2V0RmlsZUZvcm1hdCIsImNvbXBhbnlfaWQiLCJjb21wYW55SWQiLCJkaXNwbGF5X2lkIiwiZGlzcGxheUlkIiwiZ2V0U3VmZml4IiwiZGF0ZSIsIkRhdGUiLCJ5ZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJtb250aCIsImdldFVUQ01vbnRoIiwiZGF5IiwiZ2V0VVRDRGF0ZSIsInVybCIsInN0ciIsImhhc1BhcmFtcyIsInN1YnN0ciIsImxhc3RJbmRleE9mIiwidGVzdCIsImluZGV4T2YiLCJsZW5ndGgiLCJ0b0xvd2VyQ2FzZSIsImdldEluc2VydERhdGEiLCJCQVNFX0lOU0VSVF9TQ0hFTUEiLCJraW5kIiwic2tpcEludmFsaWRSb3dzIiwiaWdub3JlVW5rbm93blZhbHVlcyIsInRlbXBsYXRlU3VmZml4Iiwicm93cyIsImluc2VydElkIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIiwidHMiLCJ0b0lTT1N0cmluZyIsImxvZ0V2ZW50IiwidGFibGUiLCJMb2dnZXIiLCJsb2ciLCJzZXRJZHMiLCJjb21wYW55IiwiZGlzcGxheSIsInV0aWxzIiwicmVmcmVzaFRva2VuIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJyZWZyZXNoRGF0ZSIsIm9wZW4iLCJSRUZSRVNIX1VSTCIsIm9ubG9hZGVuZCIsInJlc3AiLCJyZXNwb25zZSIsInRva2VuIiwiYWNjZXNzX3Rva2VuIiwicmVmcmVzaGVkQXQiLCJzZW5kIiwiaXNUaHJvdHRsZWQiLCJ0aHJvdHRsZSIsImxhc3RFdmVudCIsInRhYmxlTmFtZSIsImluc2VydFdpdGhUb2tlbiIsInJlZnJlc2hEYXRhIiwiaW5zZXJ0RGF0YSIsInNlcnZpY2VVcmwiLCJyZXBsYWNlIiwic2V0UmVxdWVzdEhlYWRlciIsImhhc093blByb3BlcnR5Iiwic2V0VGltZW91dCIsInRocm90dGxlRGVsYXkiLCJSaXNlQ2FjaGUiLCJwaW5nIiwiY2FsbGJhY2siLCJyIiwiQkFTRV9DQUNIRV9VUkwiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiX3BpbmdSZWNlaXZlZCIsInN0YXR1cyIsIl9pc0NhY2hlUnVubmluZyIsInJlc3BvbnNlVGV4dCIsImNvbnNvbGUiLCJkZWJ1ZyIsImUiLCJkZXNjcmlwdGlvbiIsImdldEZpbGUiLCJmaWxlVXJsIiwibm9jYWNoZWJ1c3RlciIsImZpbGVSZXF1ZXN0IiwiaXNDYWNoZVJ1bm5pbmciLCJzZXBhcmF0b3IiLCJlbmNvZGVVUklDb21wb25lbnQiLCJnZXRUaW1lIiwic3BsaXQiLCJtYWtlUmVxdWVzdCIsIm1ldGhvZCIsInJlcXVlc3QiLCJhZGRFdmVudExpc3RlbmVyIiwiRXJyb3IiLCJ0aGlzIiwiVXRpbGl0aWVzIiwiZ2V0Rm9udENzc1N0eWxlIiwiY2xhc3NOYW1lIiwiZm9udE9iaiIsImZhbWlseSIsImZvbnQiLCJjb2xvciIsInNpemUiLCJ3ZWlnaHQiLCJib2xkIiwiaXRhbGljIiwidW5kZXJsaW5lIiwiaGlnaGxpZ2h0IiwiaGlnaGxpZ2h0Q29sb3IiLCJhZGRDU1NSdWxlcyIsInJ1bGVzIiwic3R5bGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImhlYWQiLCJsb2FkRm9udHMiLCJzZXR0aW5ncyIsImNvbnRlbnREb2MiLCJmb3JFYWNoIiwiaXRlbSIsImNsYXNzIiwiZm9udFNldHRpbmciLCJ0eXBlIiwibG9hZEN1c3RvbUZvbnQiLCJsb2FkR29vZ2xlRm9udCIsInNoZWV0IiwicnVsZSIsInN0eWxlU2hlZXRzIiwiYWRkUnVsZSIsInN0eWxlc2hlZXQiLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInByZWxvYWRJbWFnZXMiLCJ1cmxzIiwiaW1hZ2VzIiwiSW1hZ2UiLCJzcmMiLCJnZXRRdWVyeVBhcmFtZXRlciIsInBhcmFtIiwicGFpciIsInF1ZXJ5Iiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJzdWJzdHJpbmciLCJ2YXJzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbnN0YW50IiwiY29uZmlnIiwiZ2FkZ2V0cyIsIl9yZWFkeSIsInJwYyIsImNhbGwiLCJfcHJlZnMiLCJnZXRTdHJpbmciLCJfZG9uZSIsIl9lcnJvckxvZyIsIl9nZXRDdXJyZW50RmlsZSIsIl9jbGVhckVycm9yVGltZXIiLCJjbGVhclRpbWVvdXQiLCJfZXJyb3JUaW1lciIsIl9zdGFydEVycm9yVGltZXIiLCJzbGlkZU51bSIsIl9jdXJyZW50RmlsZXMiLCJfbW9kZSIsIl9zbGlkZXIiLCJpc1JlYWR5IiwiZ2V0Q3VycmVudFNsaWRlIiwiaW5pdCIsImlzU3RvcmFnZUZpbGUiLCJjb250YWluZXIiLCJnZXRFbGVtZW50QnlJZCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImVsIiwiX21lc3NhZ2UiLCJNZXNzYWdlIiwic2hvdyIsIl9wYXJhbXMiLCJiYWNrZ3JvdW5kIiwiT2JqZWN0Iiwia2V5cyIsImJvZHkiLCJwb3NpdGlvbiIsInNjYWxlVG9GaXQiLCJzdG9yYWdlIiwiX2NvbmZpZ3VyYXRpb25UeXBlIiwiX3N0b3JhZ2UiLCJTdG9yYWdlRmlsZSIsIl9ub25TdG9yYWdlIiwiTm9uU3RvcmFnZSIsIlN0b3JhZ2VGb2xkZXIiLCJzZXRTaW5nbGVJbWFnZSIsImltYWdlIiwicXVlcnlTZWxlY3RvciIsImJhY2tncm91bmRJbWFnZSIsImhhc1N0b3JhZ2VFcnJvciIsIl9zdG9yYWdlRXJyb3JGbGFnIiwiaXNFcnJvciIsImdldFRhYmxlTmFtZSIsIm9uRmlsZUluaXQiLCJoaWRlIiwiU2xpZGVyIiwib25GaWxlUmVmcmVzaCIsInJlZnJlc2giLCJfZXJyb3JGbGFnIiwic2V0QWRkaXRpb25hbFBhcmFtcyIsImFkZGl0aW9uYWxQYXJhbXMiLCJtb2RlVHlwZSIsIl8iLCJjbG9uZSIsIndpZHRoIiwiZ2V0SW50IiwiaGVpZ2h0Iiwib25TbGlkZXJSZWFkeSIsIl92aWV3ZXJQYXVzZWQiLCJwbGF5Iiwib25TbGlkZXJDb21wbGV0ZSIsInBhdXNlIiwiX2NvbmZpZ3VyYXRpb25Mb2dnZWQiLCJldmVudF9kZXRhaWxzIiwic2hvd0Vycm9yIiwibWVzc2FnZSIsImlzU3RvcmFnZUVycm9yIiwiZGVzdHJveSIsInN0b3AiLCJQcmVmcyIsImFkZFNsaWRlcyIsImxpc3QiLCJzbGlkZXMiLCJzbGlkZSIsInRvdGFsU2xpZGVzIiwiY3VycmVudEZpbGVzIiwiZmlsZSIsImR1cmF0aW9uIiwicHVzaCIsIm9uU2xpZGVDaGFuZ2VkIiwiaXNJbnRlcmFjdGluZyIsImlzTGFzdFNsaWRlIiwicmVmcmVzaFNsaWRlciIsIiRhcGkiLCJkZXN0cm95U2xpZGVyIiwibmV3RmlsZXMiLCJzbGlkZUluZGV4IiwiJCIsIm9mZiIsInJldmtpbGwiLCJoYW5kbGVVc2VyQWN0aXZpdHkiLCJzbGlkZVRpbWVyIiwicmV2bmV4dCIsInJldnJlc3VtZSIsImlzUGxheWluZyIsImhpZGVOYXYiLCJhdXRvSGlkZSIsIm5hdlRpbWVyIiwiYWRkQ2xhc3MiLCJuYXZUaW1lb3V0IiwicmV2Y3VycmVudHNsaWRlIiwiZmlsZXMiLCJ0cEJhbm5lckNvbnRhaW5lciIsInRwQmFubmVyIiwidWwiLCJpc0xvYWRpbmciLCJyZXZvbHV0aW9uIiwiaGlkZVRodW1icyIsImhpZGVUaW1lckJhciIsIm5hdmlnYXRpb25UeXBlIiwib25Ib3ZlclN0b3AiLCJzdGFydHdpZHRoIiwic3RhcnRoZWlnaHQiLCJvbiIsInJlbW92ZUNsYXNzIiwicmVzdW1lIiwicmV2c2hvd3NsaWRlIiwicmV2cGF1c2UiLCJkZXRhaWwiLCJfaW5pdGlhbExvYWQiLCJjaGFuZ2VkIiwiaW1nIiwiZXJyb3JfZGV0YWlscyIsImVycm9yIiwiY3VycmVudFRhcmdldCIsInN0YXR1c0NvZGUiLCJlcnJvck1lc3NhZ2UiLCJmb2xkZXIiLCJmaWxlTmFtZSIsImdvIiwicHJvY2Vzc1VybCIsImFkZGVkIiwiX2ZpbGVzIiwibmFtZSIsImZpbmQiLCJkZWxldGVkIiwicmVqZWN0Iiwic29ydEJ5IiwiaGFuZGxlUmVzcG9uc2UiLCJfaXNMb2FkaW5nIiwiX3RpbWVyIiwiX2dldEZpbGUiLCJvbWl0Q2FjaGVCdXN0ZXIiLCJyaXNlQ2FjaGUiLCJfdXJsIiwiX3N0YXJ0UmVmcmVzaEludGVydmFsIiwiX3JlZnJlc2hJbnRlcnZhbElkIiwic2V0SW50ZXJ2YWwiLCJfcmVmcmVzaER1cmF0aW9uIiwic2VsZWN0b3IiLCJtYWluQ29udGFpbmVyIiwibWVzc2FnZUNvbnRhaW5lciIsIl9pbml0Iiwid2FybiIsIl9hY3RpdmUiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJ2aXNpYmlsaXR5IiwicCIsImlubmVySFRNTCIsImNvbmZpZ3VyZSIsIm5hbWVzIiwidmFsdWVzIiwibW9kZSIsIkFycmF5IiwiaXNBcnJheSIsInBvbHltZXJSZWFkeSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpZCIsInJlZ2lzdGVyIiwib25jb250ZXh0bWVudSIsIm9ubW91c2Vkb3duIiwiX2dhcSIsImdhIiwiYXN5bmMiLCJwcm90b2NvbCIsInMiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFJQSx1QkFDRkMsY0FBZSxpQkFDZkMsaUJBQWtCLDRFQUNsQkMscUJBQXNCLDJCQUN0QkMscUJBQXNCLHFFQUN0QkMsWUFBYSxPQUNiQyxV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LElBQUssR0FBSWhMLEdBQVE2RSxPQUFReEUsVUFBVSxLQUV2Q2YsR0FBTzRMLGNBQWdCLFdBQ3JCLE9BQU8sR0FHVDVOLEVBQVMyRSxLQUFLa0osWUFBYyxXQUMxQixPQUFPLEdBMEVUN0wsRUFBT3BELGlCQUFpQixxQkFBc0I0TyxJQUU3Q3hMLE9BQVFoQyxTQUFVMEMsUUFHckIsSUFBSW9MLE1BQU9BLFFBRVhBLE1BQUs5RixNQUFNLGNBQWUsa0JBQzFCOEYsS0FBSzlGLE1BQU0sbUJBRVgsV0FDRSxHQUFJK0YsR0FBSy9OLFNBQVNDLGNBQWMsU0FBVzhOLEdBQUdsTixLQUFPLGtCQUFtQmtOLEVBQUdDLE9BQVEsRUFDbkZELEVBQUdwTSxLQUFPLFVBQVkzQixTQUFTaUMsU0FBU2dNLFNBQVcsY0FBZ0IsY0FBZ0IsNkJBQ25GLElBQUlDLEdBQUlsTyxTQUFTc0IscUJBQXFCLFVBQVUsRUFBSTRNLEdBQUVDLFdBQVdDLGFBQWFMLEVBQUlHIiwiZmlsZSI6ImpzL3dpZGdldC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgV0lER0VUX0NPTU1PTl9DT05GSUcgPSB7XG4gIEFVVEhfUEFUSF9VUkw6IFwidjEvd2lkZ2V0L2F1dGhcIixcbiAgTE9HR0VSX0NMSUVOVF9JRDogXCIxMDg4NTI3MTQ3MTA5LTZxMW8ydnRpaG4zNDI5MnBqdDRja2htaGNrMHJrMG83LmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tXCIsXG4gIExPR0dFUl9DTElFTlRfU0VDUkVUOiBcIm5sWnlyY1BMZzZvRXdPOWY5V2ZuMjlXaFwiLFxuICBMT0dHRVJfUkVGUkVTSF9UT0tFTjogXCIxL3h6dDRrd3pFMUg3VzlWbktCOGNBYUN4NnpiNEVzNG5LRW9xYVlIZFREMTVJZ09ySkR0ZHVuNnpLNlhpQVRDS1RcIixcbiAgU1RPUkFHRV9FTlY6IFwicHJvZFwiLFxuICBTVE9SRV9VUkw6IFwiaHR0cHM6Ly9zdG9yZS1kb3QtcnZhc2VydmVyMi5hcHBzcG90LmNvbS9cIlxufTtcbi8qIGdsb2JhbCBnYWRnZXRzICovXG5cbnZhciBSaXNlVmlzaW9uID0gUmlzZVZpc2lvbiB8fCB7fTtcblJpc2VWaXNpb24uQ29tbW9uID0gUmlzZVZpc2lvbi5Db21tb24gfHwge307XG5cblJpc2VWaXNpb24uQ29tbW9uLkxvZ2dlclV0aWxzID0gKGZ1bmN0aW9uKCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICAgdmFyIGRpc3BsYXlJZCA9IFwiXCIsXG4gICAgY29tcGFueUlkID0gXCJcIjtcblxuICAvKlxuICAgKiAgUHJpdmF0ZSBNZXRob2RzXG4gICAqL1xuXG4gIC8qIFJldHJpZXZlIHBhcmFtZXRlcnMgdG8gcGFzcyB0byB0aGUgZXZlbnQgbG9nZ2VyLiAqL1xuICBmdW5jdGlvbiBnZXRFdmVudFBhcmFtcyhwYXJhbXMsIGNiKSB7XG4gICAgdmFyIGpzb24gPSBudWxsO1xuXG4gICAgLy8gZXZlbnQgaXMgcmVxdWlyZWQuXG4gICAgaWYgKHBhcmFtcy5ldmVudCkge1xuICAgICAganNvbiA9IHBhcmFtcztcblxuICAgICAgaWYgKGpzb24uZmlsZV91cmwpIHtcbiAgICAgICAganNvbi5maWxlX2Zvcm1hdCA9IGdldEZpbGVGb3JtYXQoanNvbi5maWxlX3VybCk7XG4gICAgICB9XG5cbiAgICAgIGpzb24uY29tcGFueV9pZCA9IGNvbXBhbnlJZDtcbiAgICAgIGpzb24uZGlzcGxheV9pZCA9IGRpc3BsYXlJZDtcblxuICAgICAgY2IoanNvbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY2IoanNvbik7XG4gICAgfVxuICB9XG5cbiAgLy8gR2V0IHN1ZmZpeCBmb3IgQlEgdGFibGUgbmFtZS5cbiAgZnVuY3Rpb24gZ2V0U3VmZml4KCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoKSxcbiAgICAgIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKSArIDEsXG4gICAgICBkYXkgPSBkYXRlLmdldFVUQ0RhdGUoKTtcblxuICAgIGlmIChtb250aCA8IDEwKSB7XG4gICAgICBtb250aCA9IFwiMFwiICsgbW9udGg7XG4gICAgfVxuXG4gICAgaWYgKGRheSA8IDEwKSB7XG4gICAgICBkYXkgPSBcIjBcIiArIGRheTtcbiAgICB9XG5cbiAgICByZXR1cm4geWVhciArIG1vbnRoICsgZGF5O1xuICB9XG5cbiAgLypcbiAgICogIFB1YmxpYyBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBnZXRGaWxlRm9ybWF0KHVybCkge1xuICAgIHZhciBoYXNQYXJhbXMgPSAvWz8jJl0vLFxuICAgICAgc3RyO1xuXG4gICAgaWYgKCF1cmwgfHwgdHlwZW9mIHVybCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgc3RyID0gdXJsLnN1YnN0cih1cmwubGFzdEluZGV4T2YoXCIuXCIpICsgMSk7XG5cbiAgICAvLyBkb24ndCBpbmNsdWRlIGFueSBwYXJhbXMgYWZ0ZXIgdGhlIGZpbGVuYW1lXG4gICAgaWYgKGhhc1BhcmFtcy50ZXN0KHN0cikpIHtcbiAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMCAsKHN0ci5pbmRleE9mKFwiP1wiKSAhPT0gLTEpID8gc3RyLmluZGV4T2YoXCI/XCIpIDogc3RyLmxlbmd0aCk7XG5cbiAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMCwgKHN0ci5pbmRleE9mKFwiI1wiKSAhPT0gLTEpID8gc3RyLmluZGV4T2YoXCIjXCIpIDogc3RyLmxlbmd0aCk7XG5cbiAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMCwgKHN0ci5pbmRleE9mKFwiJlwiKSAhPT0gLTEpID8gc3RyLmluZGV4T2YoXCImXCIpIDogc3RyLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SW5zZXJ0RGF0YShwYXJhbXMpIHtcbiAgICB2YXIgQkFTRV9JTlNFUlRfU0NIRU1BID0ge1xuICAgICAgXCJraW5kXCI6IFwiYmlncXVlcnkjdGFibGVEYXRhSW5zZXJ0QWxsUmVxdWVzdFwiLFxuICAgICAgXCJza2lwSW52YWxpZFJvd3NcIjogZmFsc2UsXG4gICAgICBcImlnbm9yZVVua25vd25WYWx1ZXNcIjogZmFsc2UsXG4gICAgICBcInRlbXBsYXRlU3VmZml4XCI6IGdldFN1ZmZpeCgpLFxuICAgICAgXCJyb3dzXCI6IFt7XG4gICAgICAgIFwiaW5zZXJ0SWRcIjogXCJcIlxuICAgICAgfV1cbiAgICB9LFxuICAgIGRhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KEJBU0VfSU5TRVJUX1NDSEVNQSkpO1xuXG4gICAgZGF0YS5yb3dzWzBdLmluc2VydElkID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIpLnRvVXBwZXJDYXNlKCk7XG4gICAgZGF0YS5yb3dzWzBdLmpzb24gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHBhcmFtcykpO1xuICAgIGRhdGEucm93c1swXS5qc29uLnRzID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBmdW5jdGlvbiBsb2dFdmVudCh0YWJsZSwgcGFyYW1zKSB7XG4gICAgZ2V0RXZlbnRQYXJhbXMocGFyYW1zLCBmdW5jdGlvbihqc29uKSB7XG4gICAgICBpZiAoanNvbiAhPT0gbnVsbCkge1xuICAgICAgICBSaXNlVmlzaW9uLkNvbW1vbi5Mb2dnZXIubG9nKHRhYmxlLCBqc29uKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qIFNldCB0aGUgQ29tcGFueSBhbmQgRGlzcGxheSBJRHMuICovXG4gIGZ1bmN0aW9uIHNldElkcyhjb21wYW55LCBkaXNwbGF5KSB7XG4gICAgY29tcGFueUlkID0gY29tcGFueTtcbiAgICBkaXNwbGF5SWQgPSBkaXNwbGF5O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBcImdldEluc2VydERhdGFcIjogZ2V0SW5zZXJ0RGF0YSxcbiAgICBcImdldEZpbGVGb3JtYXRcIjogZ2V0RmlsZUZvcm1hdCxcbiAgICBcImxvZ0V2ZW50XCI6IGxvZ0V2ZW50LFxuICAgIFwic2V0SWRzXCI6IHNldElkc1xuICB9O1xufSkoKTtcblxuUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyID0gKGZ1bmN0aW9uKHV0aWxzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBSRUZSRVNIX1VSTCA9IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3Rva2VuP2NsaWVudF9pZD1cIiArIFdJREdFVF9DT01NT05fQ09ORklHLkxPR0dFUl9DTElFTlRfSUQgK1xuICAgICAgXCImY2xpZW50X3NlY3JldD1cIiArIFdJREdFVF9DT01NT05fQ09ORklHLkxPR0dFUl9DTElFTlRfU0VDUkVUICtcbiAgICAgIFwiJnJlZnJlc2hfdG9rZW49XCIgKyBXSURHRVRfQ09NTU9OX0NPTkZJRy5MT0dHRVJfUkVGUkVTSF9UT0tFTiArXG4gICAgICBcIiZncmFudF90eXBlPXJlZnJlc2hfdG9rZW5cIjtcblxuICB2YXIgc2VydmljZVVybCA9IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYmlncXVlcnkvdjIvcHJvamVjdHMvY2xpZW50LXNpZGUtZXZlbnRzL2RhdGFzZXRzL1dpZGdldF9FdmVudHMvdGFibGVzL1RBQkxFX0lEL2luc2VydEFsbFwiLFxuICAgIHRocm90dGxlID0gZmFsc2UsXG4gICAgdGhyb3R0bGVEZWxheSA9IDEwMDAsXG4gICAgbGFzdEV2ZW50ID0gXCJcIixcbiAgICByZWZyZXNoRGF0ZSA9IDAsXG4gICAgdG9rZW4gPSBcIlwiO1xuXG4gIC8qXG4gICAqICBQcml2YXRlIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIHJlZnJlc2hUb2tlbihjYikge1xuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIGlmIChuZXcgRGF0ZSgpIC0gcmVmcmVzaERhdGUgPCAzNTgwMDAwKSB7XG4gICAgICByZXR1cm4gY2Ioe30pO1xuICAgIH1cblxuICAgIHhoci5vcGVuKFwiUE9TVFwiLCBSRUZSRVNIX1VSTCwgdHJ1ZSk7XG4gICAgeGhyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlc3AgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZSk7XG5cbiAgICAgIGNiKHsgdG9rZW46IHJlc3AuYWNjZXNzX3Rva2VuLCByZWZyZXNoZWRBdDogbmV3IERhdGUoKSB9KTtcbiAgICB9O1xuXG4gICAgeGhyLnNlbmQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVGhyb3R0bGVkKGV2ZW50KSB7XG4gICAgcmV0dXJuIHRocm90dGxlICYmIChsYXN0RXZlbnQgPT09IGV2ZW50KTtcbiAgfVxuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gbG9nKHRhYmxlTmFtZSwgcGFyYW1zKSB7XG4gICAgaWYgKCF0YWJsZU5hbWUgfHwgIXBhcmFtcyB8fCAocGFyYW1zLmhhc093blByb3BlcnR5KFwiZXZlbnRcIikgJiYgIXBhcmFtcy5ldmVudCkgfHxcbiAgICAgIChwYXJhbXMuaGFzT3duUHJvcGVydHkoXCJldmVudFwiKSAmJiBpc1Rocm90dGxlZChwYXJhbXMuZXZlbnQpKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRocm90dGxlID0gdHJ1ZTtcbiAgICBsYXN0RXZlbnQgPSBwYXJhbXMuZXZlbnQ7XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm90dGxlID0gZmFsc2U7XG4gICAgfSwgdGhyb3R0bGVEZWxheSk7XG5cbiAgICBmdW5jdGlvbiBpbnNlcnRXaXRoVG9rZW4ocmVmcmVzaERhdGEpIHtcbiAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgICAgICAgaW5zZXJ0RGF0YSwgdXJsO1xuXG4gICAgICB1cmwgPSBzZXJ2aWNlVXJsLnJlcGxhY2UoXCJUQUJMRV9JRFwiLCB0YWJsZU5hbWUpO1xuICAgICAgcmVmcmVzaERhdGUgPSByZWZyZXNoRGF0YS5yZWZyZXNoZWRBdCB8fCByZWZyZXNoRGF0ZTtcbiAgICAgIHRva2VuID0gcmVmcmVzaERhdGEudG9rZW4gfHwgdG9rZW47XG4gICAgICBpbnNlcnREYXRhID0gdXRpbHMuZ2V0SW5zZXJ0RGF0YShwYXJhbXMpO1xuXG4gICAgICAvLyBJbnNlcnQgdGhlIGRhdGEuXG4gICAgICB4aHIub3BlbihcIlBPU1RcIiwgdXJsLCB0cnVlKTtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQXV0aG9yaXphdGlvblwiLCBcIkJlYXJlciBcIiArIHRva2VuKTtcblxuICAgICAgaWYgKHBhcmFtcy5jYiAmJiB0eXBlb2YgcGFyYW1zLmNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgeGhyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHBhcmFtcy5jYih4aHIucmVzcG9uc2UpO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB4aHIuc2VuZChKU09OLnN0cmluZ2lmeShpbnNlcnREYXRhKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlZnJlc2hUb2tlbihpbnNlcnRXaXRoVG9rZW4pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBcImxvZ1wiOiBsb2dcbiAgfTtcbn0pKFJpc2VWaXNpb24uQ29tbW9uLkxvZ2dlclV0aWxzKTtcbnZhciBSaXNlVmlzaW9uID0gUmlzZVZpc2lvbiB8fCB7fTtcblJpc2VWaXNpb24uQ29tbW9uID0gUmlzZVZpc2lvbi5Db21tb24gfHwge307XG5cblJpc2VWaXNpb24uQ29tbW9uLlJpc2VDYWNoZSA9IChmdW5jdGlvbiAoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBCQVNFX0NBQ0hFX1VSTCA9IFwiaHR0cDovL2xvY2FsaG9zdDo5NDk0L1wiO1xuXG4gIHZhciBfcGluZ1JlY2VpdmVkID0gZmFsc2UsXG4gICAgX2lzQ2FjaGVSdW5uaW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gcGluZyhjYWxsYmFjaykge1xuICAgIHZhciByID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICBpZiAoIWNhbGxiYWNrIHx8IHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgci5vcGVuKFwiR0VUXCIsIEJBU0VfQ0FDSEVfVVJMICsgXCJwaW5nP2NhbGxiYWNrPV9cIiwgdHJ1ZSk7XG4gICAgci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoci5yZWFkeVN0YXRlID09PSA0ICkge1xuICAgICAgICAgIC8vIHNhdmUgdGhpcyByZXN1bHQgZm9yIHVzZSBpbiBnZXRGaWxlKClcbiAgICAgICAgICBfcGluZ1JlY2VpdmVkID0gdHJ1ZTtcblxuICAgICAgICAgIGlmKHIuc3RhdHVzID09PSAyMDApe1xuICAgICAgICAgICAgX2lzQ2FjaGVSdW5uaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSwgci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiUmlzZSBDYWNoZSBpcyBub3QgcnVubmluZ1wiKTtcbiAgICAgICAgICAgIF9pc0NhY2hlUnVubmluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBjYWxsYmFjayhmYWxzZSwgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmRlYnVnKFwiQ2F1Z2h0IGV4Y2VwdGlvbjogXCIsIGUuZGVzY3JpcHRpb24pO1xuICAgICAgfVxuXG4gICAgfTtcbiAgICByLnNlbmQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEZpbGUoZmlsZVVybCwgY2FsbGJhY2ssIG5vY2FjaGVidXN0ZXIpIHtcbiAgICBpZiAoIWZpbGVVcmwgfHwgIWNhbGxiYWNrIHx8IHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlsZVJlcXVlc3QoaXNDYWNoZVJ1bm5pbmcpIHtcbiAgICAgIHZhciB1cmwsIHN0ciwgc2VwYXJhdG9yO1xuXG4gICAgICBpZiAoaXNDYWNoZVJ1bm5pbmcpIHtcbiAgICAgICAgLy8gY29uZmlndXJlIHVybCB3aXRoIGNhY2hlYnVzdGVyIG9yIG5vdFxuICAgICAgICB1cmwgPSAobm9jYWNoZWJ1c3RlcikgPyBCQVNFX0NBQ0hFX1VSTCArIFwiP3VybD1cIiArIGVuY29kZVVSSUNvbXBvbmVudChmaWxlVXJsKSA6XG4gICAgICAgIEJBU0VfQ0FDSEVfVVJMICsgXCJjYj1cIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgXCI/dXJsPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGZpbGVVcmwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG5vY2FjaGVidXN0ZXIpIHtcbiAgICAgICAgICB1cmwgPSBmaWxlVXJsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9IGZpbGVVcmwuc3BsaXQoXCI/XCIpO1xuICAgICAgICAgIHNlcGFyYXRvciA9IChzdHIubGVuZ3RoID09PSAxKSA/IFwiP1wiIDogXCImXCI7XG4gICAgICAgICAgdXJsID0gZmlsZVVybCArIHNlcGFyYXRvciArIFwiY2I9XCIgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtYWtlUmVxdWVzdChcIkhFQURcIiwgdXJsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlUmVxdWVzdChtZXRob2QsIHVybCkge1xuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLFxuICAgICAgICByZXF1ZXN0ID0ge1xuICAgICAgICAgIHhocjogeGhyLFxuICAgICAgICAgIHVybDogdXJsXG4gICAgICAgIH07XG5cbiAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcblxuICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkZW5kXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0YXR1cyA9IHhoci5zdGF0dXMgfHwgMDtcblxuICAgICAgICBpZiAoc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDApIHtcbiAgICAgICAgICBjYWxsYmFjayhyZXF1ZXN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBTZXJ2ZXIgbWF5IG5vdCBzdXBwb3J0IEhFQUQgcmVxdWVzdC4gRmFsbGJhY2sgdG8gYSBHRVQgcmVxdWVzdC5cbiAgICAgICAgICBpZiAobWV0aG9kID09PSBcIkhFQURcIikge1xuICAgICAgICAgICAgbWFrZVJlcXVlc3QoXCJHRVRcIiwgdXJsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKF9pc0NhY2hlUnVubmluZykge1xuICAgICAgICAgICAgICBjYWxsYmFjayhyZXF1ZXN0LCBuZXcgRXJyb3IoXCJUaGUgcmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZTogXCIgKyBzdGF0dXMpKTtcbiAgICAgICAgICAgIH0gZWxzZXtcbiAgICAgICAgICAgICAgLy8gVGhpcyBpcyB0byBhdm9pZCB0aHJvd2luZyBhbiBlcnJvciB3aGVuIHRoZXJlIGlzIGEgY3Jvc3MgZG9tYWluIGlzc3VlXG4gICAgICAgICAgICAgIGNhbGxiYWNrKHJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHhoci5zZW5kKCk7XG4gICAgfVxuXG4gICAgaWYgKCFfcGluZ1JlY2VpdmVkKSB7XG4gICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgICByZXR1cm4gdGhpcy5waW5nKGZpbGVSZXF1ZXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZpbGVSZXF1ZXN0KF9pc0NhY2hlUnVubmluZyk7XG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldEZpbGU6IGdldEZpbGUsXG4gICAgcGluZzogcGluZ1xuICB9O1xuXG59KSgpO1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5cblJpc2VWaXNpb24uQ29tbW9uID0gUmlzZVZpc2lvbi5Db21tb24gfHwge307XG5cblJpc2VWaXNpb24uQ29tbW9uLlV0aWxpdGllcyA9IChmdW5jdGlvbigpIHtcblxuICBmdW5jdGlvbiBnZXRGb250Q3NzU3R5bGUoY2xhc3NOYW1lLCBmb250T2JqKSB7XG4gICAgdmFyIGZhbWlseSA9IFwiZm9udC1mYW1pbHk6XCIgKyBmb250T2JqLmZvbnQuZmFtaWx5ICsgXCI7IFwiO1xuICAgIHZhciBjb2xvciA9IFwiY29sb3I6IFwiICsgZm9udE9iai5jb2xvciArIFwiOyBcIjtcbiAgICB2YXIgc2l6ZSA9IFwiZm9udC1zaXplOiBcIiArIGZvbnRPYmouc2l6ZSArIFwicHg7IFwiO1xuICAgIHZhciB3ZWlnaHQgPSBcImZvbnQtd2VpZ2h0OiBcIiArIChmb250T2JqLmJvbGQgPyBcImJvbGRcIiA6IFwibm9ybWFsXCIpICsgXCI7IFwiO1xuICAgIHZhciBpdGFsaWMgPSBcImZvbnQtc3R5bGU6IFwiICsgKGZvbnRPYmouaXRhbGljID8gXCJpdGFsaWNcIiA6IFwibm9ybWFsXCIpICsgXCI7IFwiO1xuICAgIHZhciB1bmRlcmxpbmUgPSBcInRleHQtZGVjb3JhdGlvbjogXCIgKyAoZm9udE9iai51bmRlcmxpbmUgPyBcInVuZGVybGluZVwiIDogXCJub25lXCIpICsgXCI7IFwiO1xuICAgIHZhciBoaWdobGlnaHQgPSBcImJhY2tncm91bmQtY29sb3I6IFwiICsgZm9udE9iai5oaWdobGlnaHRDb2xvciArIFwiOyBcIjtcblxuICAgIHJldHVybiBcIi5cIiArIGNsYXNzTmFtZSArIFwiIHtcIiArIGZhbWlseSArIGNvbG9yICsgc2l6ZSArIHdlaWdodCArIGl0YWxpYyArIHVuZGVybGluZSArIGhpZ2hsaWdodCArIFwifVwiO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkQ1NTUnVsZXMocnVsZXMpIHtcbiAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gcnVsZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGVzW2ldKSk7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICAvKlxuICAgKiBMb2FkcyBHb29nbGUgb3IgY3VzdG9tIGZvbnRzLCBpZiBhcHBsaWNhYmxlLCBhbmQgaW5qZWN0cyBDU1Mgc3R5bGVzXG4gICAqIGludG8gdGhlIGhlYWQgb2YgdGhlIGRvY3VtZW50LlxuICAgKlxuICAgKiBAcGFyYW0gICAgYXJyYXkgICAgc2V0dGluZ3MgICAgQXJyYXkgb2Ygb2JqZWN0cyB3aXRoIHRoZSBmb2xsb3dpbmcgZm9ybTpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbe1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBcImRhdGVcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZm9udFNldHRpbmdcIjoge1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvbGQ6IHRydWUsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiYmxhY2tcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250OiB7XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYW1pbHk6IFwiQWtyb25pbVwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udDogXCJBa3JvbmltXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlZlcmRhbmFcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZ29vZ2xlXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cDovL2N1c3RvbS1mb250LXVybFwiXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRDb2xvcjogXCJ0cmFuc3BhcmVudFwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0YWxpYzogZmFsc2UsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogXCIyMFwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVybGluZTogZmFsc2VcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XVxuICAgKlxuICAgKiAgICAgICAgICAgb2JqZWN0ICAgY29udGVudERvYyAgICBEb2N1bWVudCBvYmplY3QgaW50byB3aGljaCB0byBpbmplY3Qgc3R5bGVzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBsb2FkIGZvbnRzIChvcHRpb25hbCkuXG4gICAqL1xuICBmdW5jdGlvbiBsb2FkRm9udHMoc2V0dGluZ3MsIGNvbnRlbnREb2MpIHtcbiAgICBzZXR0aW5ncy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGlmIChpdGVtLmNsYXNzICYmIGl0ZW0uZm9udFNldHRpbmcpIHtcbiAgICAgICAgYWRkQ1NTUnVsZXMoWyBnZXRGb250Q3NzU3R5bGUoaXRlbS5jbGFzcywgaXRlbS5mb250U2V0dGluZykgXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtLmZvbnRTZXR0aW5nLmZvbnQudHlwZSkge1xuICAgICAgICBpZiAoaXRlbS5mb250U2V0dGluZy5mb250LnR5cGUgPT09IFwiY3VzdG9tXCIgJiYgaXRlbS5mb250U2V0dGluZy5mb250LmZhbWlseSAmJlxuICAgICAgICAgIGl0ZW0uZm9udFNldHRpbmcuZm9udC51cmwpIHtcbiAgICAgICAgICBsb2FkQ3VzdG9tRm9udChpdGVtLmZvbnRTZXR0aW5nLmZvbnQuZmFtaWx5LCBpdGVtLmZvbnRTZXR0aW5nLmZvbnQudXJsLFxuICAgICAgICAgICAgY29udGVudERvYyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXRlbS5mb250U2V0dGluZy5mb250LnR5cGUgPT09IFwiZ29vZ2xlXCIgJiYgaXRlbS5mb250U2V0dGluZy5mb250LmZhbWlseSkge1xuICAgICAgICAgIGxvYWRHb29nbGVGb250KGl0ZW0uZm9udFNldHRpbmcuZm9udC5mYW1pbHksIGNvbnRlbnREb2MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkQ3VzdG9tRm9udChmYW1pbHksIHVybCwgY29udGVudERvYykge1xuICAgIHZhciBzaGVldCA9IG51bGw7XG4gICAgdmFyIHJ1bGUgPSBcImZvbnQtZmFtaWx5OiBcIiArIGZhbWlseSArIFwiOyBcIiArIFwic3JjOiB1cmwoJ1wiICsgdXJsICsgXCInKTtcIjtcblxuICAgIGNvbnRlbnREb2MgPSBjb250ZW50RG9jIHx8IGRvY3VtZW50O1xuXG4gICAgc2hlZXQgPSBjb250ZW50RG9jLnN0eWxlU2hlZXRzWzBdO1xuXG4gICAgaWYgKHNoZWV0ICE9PSBudWxsKSB7XG4gICAgICBzaGVldC5hZGRSdWxlKFwiQGZvbnQtZmFjZVwiLCBydWxlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkR29vZ2xlRm9udChmYW1pbHksIGNvbnRlbnREb2MpIHtcbiAgICB2YXIgc3R5bGVzaGVldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG4gICAgY29udGVudERvYyA9IGNvbnRlbnREb2MgfHwgZG9jdW1lbnQ7XG5cbiAgICBzdHlsZXNoZWV0LnNldEF0dHJpYnV0ZShcInJlbFwiLCBcInN0eWxlc2hlZXRcIik7XG4gICAgc3R5bGVzaGVldC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dC9jc3NcIik7XG4gICAgc3R5bGVzaGVldC5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIFwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVwiICtcbiAgICAgIGZhbWlseSk7XG5cbiAgICBpZiAoc3R5bGVzaGVldCAhPT0gbnVsbCkge1xuICAgICAgY29udGVudERvYy5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0uYXBwZW5kQ2hpbGQoc3R5bGVzaGVldCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJlbG9hZEltYWdlcyh1cmxzKSB7XG4gICAgdmFyIGxlbmd0aCA9IHVybHMubGVuZ3RoLFxuICAgICAgaW1hZ2VzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpbWFnZXNbaV0gPSBuZXcgSW1hZ2UoKTtcbiAgICAgIGltYWdlc1tpXS5zcmMgPSB1cmxzW2ldO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFF1ZXJ5UGFyYW1ldGVyKHBhcmFtKSB7XG4gICAgdmFyIHF1ZXJ5ID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSksXG4gICAgICB2YXJzID0gcXVlcnkuc3BsaXQoXCImXCIpLFxuICAgICAgcGFpcjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFycy5sZW5ndGg7IGkrKykge1xuICAgICAgcGFpciA9IHZhcnNbaV0uc3BsaXQoXCI9XCIpO1xuXG4gICAgICBpZiAocGFpclswXSA9PSBwYXJhbSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRRdWVyeVBhcmFtZXRlcjogZ2V0UXVlcnlQYXJhbWV0ZXIsXG4gICAgZ2V0Rm9udENzc1N0eWxlOiAgZ2V0Rm9udENzc1N0eWxlLFxuICAgIGFkZENTU1J1bGVzOiAgICAgIGFkZENTU1J1bGVzLFxuICAgIGxvYWRGb250czogICAgICAgIGxvYWRGb250cyxcbiAgICBsb2FkQ3VzdG9tRm9udDogICBsb2FkQ3VzdG9tRm9udCxcbiAgICBsb2FkR29vZ2xlRm9udDogICBsb2FkR29vZ2xlRm9udCxcbiAgICBwcmVsb2FkSW1hZ2VzOiAgICBwcmVsb2FkSW1hZ2VzXG4gIH07XG59KSgpO1xuXG4vKiBleHBvcnRlZCBjb25maWcgKi9cbmlmICh0eXBlb2YgYW5ndWxhciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBhbmd1bGFyLm1vZHVsZShcInJpc2V2aXNpb24uY29tbW9uLmkxOG4uY29uZmlnXCIsIFtdKVxuICAgIC5jb25zdGFudChcIkxPQ0FMRVNfUFJFRklYXCIsIFwibG9jYWxlcy90cmFuc2xhdGlvbl9cIilcbiAgICAuY29uc3RhbnQoXCJMT0NBTEVTX1NVRklYXCIsIFwiLmpzb25cIik7XG59XG5cbnZhciBjb25maWcgPSB7XG4gIFNUT1JBR0VfRU5WOiBcInByb2RcIlxufTtcblxuLyogZ2xvYmFsIGdhZGdldHMsIF8gKi9cblxudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5JbWFnZSA9IHt9O1xuXG5SaXNlVmlzaW9uLkltYWdlID0gKGZ1bmN0aW9uIChnYWRnZXRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBfbW9kZTtcblxuICB2YXIgX3ByZWZzID0gbmV3IGdhZGdldHMuUHJlZnMoKSxcbiAgICBfbWVzc2FnZSA9IG51bGwsXG4gICAgX3BhcmFtcyA9IG51bGw7XG5cbiAgdmFyIF9zdG9yYWdlID0gbnVsbCxcbiAgICBfbm9uU3RvcmFnZSA9IG51bGwsXG4gICAgX3NsaWRlciA9IG51bGw7XG5cbiAgdmFyIF9jdXJyZW50RmlsZXMgPSBbXTtcblxuICB2YXIgX2Vycm9yTG9nID0gbnVsbCxcbiAgICBfY29uZmlndXJhdGlvblR5cGUgPSBudWxsLFxuICAgIF9lcnJvclRpbWVyID0gbnVsbCxcbiAgICBfZXJyb3JGbGFnID0gZmFsc2UsXG4gICAgX3N0b3JhZ2VFcnJvckZsYWcgPSBmYWxzZSxcbiAgICBfY29uZmlndXJhdGlvbkxvZ2dlZCA9IGZhbHNlO1xuXG4gIHZhciBfdmlld2VyUGF1c2VkID0gdHJ1ZTtcblxuICAvKlxuICAgKiAgUHJpdmF0ZSBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBfcmVhZHkoKSB7XG4gICAgZ2FkZ2V0cy5ycGMuY2FsbChcIlwiLCBcInJzZXZlbnRfcmVhZHlcIiwgbnVsbCwgX3ByZWZzLmdldFN0cmluZyhcImlkXCIpLFxuICAgICAgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBfZG9uZSgpIHtcbiAgICBnYWRnZXRzLnJwYy5jYWxsKFwiXCIsIFwicnNldmVudF9kb25lXCIsIG51bGwsIF9wcmVmcy5nZXRTdHJpbmcoXCJpZFwiKSk7XG5cbiAgICAvLyBBbnkgZXJyb3JzIG5lZWQgdG8gYmUgbG9nZ2VkIGJlZm9yZSB0aGUgZG9uZSBldmVudC5cbiAgICBpZiAoX2Vycm9yTG9nICE9PSBudWxsKSB7XG4gICAgICBsb2dFdmVudChfZXJyb3JMb2csIHRydWUpO1xuICAgIH1cblxuICAgIC8vIGxvZyBcImRvbmVcIiBldmVudFxuICAgIGxvZ0V2ZW50KHsgXCJldmVudFwiOiBcImRvbmVcIiwgXCJmaWxlX3VybFwiOiBfZ2V0Q3VycmVudEZpbGUoKSB9LCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBfY2xlYXJFcnJvclRpbWVyKCkge1xuICAgIGNsZWFyVGltZW91dChfZXJyb3JUaW1lcik7XG4gICAgX2Vycm9yVGltZXIgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gX3N0YXJ0RXJyb3JUaW1lcigpIHtcbiAgICBfY2xlYXJFcnJvclRpbWVyKCk7XG5cbiAgICBfZXJyb3JUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gbm90aWZ5IFZpZXdlciB3aWRnZXQgaXMgZG9uZVxuICAgICAgX2RvbmUoKTtcbiAgICB9LCA1MDAwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9nZXRDdXJyZW50RmlsZSgpIHtcbiAgICB2YXIgc2xpZGVOdW0gPSAtMTtcblxuICAgIGlmIChfY3VycmVudEZpbGVzICYmIF9jdXJyZW50RmlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKF9tb2RlID09PSBcImZpbGVcIikge1xuICAgICAgICByZXR1cm4gX2N1cnJlbnRGaWxlc1swXTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKF9tb2RlID09PSBcImZvbGRlclwiICYmIF9zbGlkZXIgJiYgX3NsaWRlci5pc1JlYWR5KCkpIHtcbiAgICAgICAgLy8gcmV0cmlldmUgdGhlIGN1cnJlbnRseSBwbGF5ZWQgc2xpZGVcbiAgICAgICAgc2xpZGVOdW0gPSBfc2xpZGVyLmdldEN1cnJlbnRTbGlkZSgpO1xuXG4gICAgICAgIGlmIChzbGlkZU51bSAhPT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gX2N1cnJlbnRGaWxlc1tzbGlkZU51bV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGFpbmVyXCIpLFxuICAgICAgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG4gICAgICBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG4gICAgICBpc1N0b3JhZ2VGaWxlO1xuXG4gICAgLy8gY3JlYXRlIGluc3RhbmNlIG9mIG1lc3NhZ2VcbiAgICBfbWVzc2FnZSA9IG5ldyBSaXNlVmlzaW9uLkNvbW1vbi5NZXNzYWdlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGFpbmVyXCIpLFxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtZXNzYWdlQ29udGFpbmVyXCIpKTtcblxuICAgIC8vIHNob3cgd2FpdCBtZXNzYWdlXG4gICAgX21lc3NhZ2Uuc2hvdyhcIlBsZWFzZSB3YWl0IHdoaWxlIHlvdXIgaW1hZ2UgaXMgZG93bmxvYWRlZC5cIik7XG5cbiAgICAvLyBsZWdhY3lcbiAgICBpZiAoX3BhcmFtcy5iYWNrZ3JvdW5kICYmIE9iamVjdC5rZXlzKF9wYXJhbXMuYmFja2dyb3VuZCkubGVuZ3RoID4gMCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kID0gX3BhcmFtcy5iYWNrZ3JvdW5kLmNvbG9yO1xuICAgIH1cblxuICAgIGlmIChfbW9kZSA9PT0gXCJmaWxlXCIpIHtcbiAgICAgIC8vIGNyZWF0ZSB0aGUgaW1hZ2UgPGRpdj4gd2l0aGluIHRoZSBjb250YWluZXIgPGRpdj5cbiAgICAgIGVsLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiaW1hZ2VcIik7XG4gICAgICBlbC5jbGFzc05hbWUgPSBfcGFyYW1zLnBvc2l0aW9uO1xuICAgICAgZWwuY2xhc3NOYW1lID0gX3BhcmFtcy5zY2FsZVRvRml0ID8gZWwuY2xhc3NOYW1lICsgXCIgc2NhbGUtdG8tZml0XCIgOiBlbC5jbGFzc05hbWU7XG5cbiAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGVsKTtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChmcmFnbWVudCk7XG5cbiAgICAgIGlzU3RvcmFnZUZpbGUgPSAoT2JqZWN0LmtleXMoX3BhcmFtcy5zdG9yYWdlKS5sZW5ndGggIT09IDApO1xuXG4gICAgICBpZiAoIWlzU3RvcmFnZUZpbGUpIHtcbiAgICAgICAgX2NvbmZpZ3VyYXRpb25UeXBlID0gXCJjdXN0b21cIjtcblxuICAgICAgICBfbm9uU3RvcmFnZSA9IG5ldyBSaXNlVmlzaW9uLkltYWdlLk5vblN0b3JhZ2UoX3BhcmFtcyk7XG4gICAgICAgIF9ub25TdG9yYWdlLmluaXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9jb25maWd1cmF0aW9uVHlwZSA9IFwic3RvcmFnZSBmaWxlXCI7XG5cbiAgICAgICAgLy8gY3JlYXRlIGFuZCBpbml0aWFsaXplIHRoZSBTdG9yYWdlIGZpbGUgaW5zdGFuY2VcbiAgICAgICAgX3N0b3JhZ2UgPSBuZXcgUmlzZVZpc2lvbi5JbWFnZS5TdG9yYWdlRmlsZShfcGFyYW1zKTtcbiAgICAgICAgX3N0b3JhZ2UuaW5pdCgpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChfbW9kZSA9PT0gXCJmb2xkZXJcIikge1xuICAgICAgLy8gY3JlYXRlIHRoZSBzbGlkZXIgY29udGFpbmVyIDxkaXY+IHdpdGhpbiB0aGUgY29udGFpbmVyIDxkaXY+XG4gICAgICBlbC5jbGFzc05hbWUgPSBcInRwLWJhbm5lci1jb250YWluZXJcIjtcblxuICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGZyYWdtZW50KTtcblxuICAgICAgX2NvbmZpZ3VyYXRpb25UeXBlID0gXCJzdG9yYWdlIGZvbGRlclwiO1xuXG4gICAgICAvLyBjcmVhdGUgYW5kIGluaXRpYWxpemUgdGhlIFN0b3JhZ2UgZm9sZGVyIGluc3RhbmNlXG4gICAgICBfc3RvcmFnZSA9IG5ldyBSaXNlVmlzaW9uLkltYWdlLlN0b3JhZ2VGb2xkZXIoX3BhcmFtcyk7XG4gICAgICBfc3RvcmFnZS5pbml0KCk7XG4gICAgfVxuXG4gICAgX3JlYWR5KCk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRTaW5nbGVJbWFnZSh1cmwpIHtcbiAgICB2YXIgaW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NvbnRhaW5lciAjaW1hZ2VcIik7XG4gICAgaW1hZ2Uuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gXCJ1cmwoXCIgKyB1cmwgKyBcIilcIjtcbiAgfVxuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gaGFzU3RvcmFnZUVycm9yKCkge1xuICAgIHJldHVybiBfc3RvcmFnZUVycm9yRmxhZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvZ0V2ZW50KHBhcmFtcywgaXNFcnJvcikge1xuICAgIGlmIChpc0Vycm9yKSB7XG4gICAgICBfZXJyb3JMb2cgPSBwYXJhbXM7XG4gICAgfVxuXG4gICAgUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyVXRpbHMubG9nRXZlbnQoZ2V0VGFibGVOYW1lKCksIHBhcmFtcyk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkZpbGVJbml0KHVybHMpIHtcbiAgICBpZiAoX21vZGUgPT09IFwiZmlsZVwiKSB7XG4gICAgICAvLyB1cmxzIHZhbHVlIHdpbGwgYmUgYSBzdHJpbmdcbiAgICAgIF9jdXJyZW50RmlsZXNbMF0gPSB1cmxzO1xuXG4gICAgICAvLyByZW1vdmUgYSBtZXNzYWdlIHByZXZpb3VzbHkgc2hvd25cbiAgICAgIF9tZXNzYWdlLmhpZGUoKTtcblxuICAgICAgc2V0U2luZ2xlSW1hZ2UoX2N1cnJlbnRGaWxlc1swXSk7XG5cbiAgICB9IGVsc2UgaWYgKF9tb2RlID09PSBcImZvbGRlclwiKSB7XG4gICAgICAvLyB1cmxzIHZhbHVlIHdpbGwgYmUgYW4gYXJyYXlcbiAgICAgIF9jdXJyZW50RmlsZXMgPSB1cmxzO1xuXG4gICAgICAvLyBjcmVhdGUgc2xpZGVyIGluc3RhbmNlXG4gICAgICBfc2xpZGVyID0gbmV3IFJpc2VWaXNpb24uSW1hZ2UuU2xpZGVyKF9wYXJhbXMpO1xuICAgICAgX3NsaWRlci5pbml0KHVybHMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRmlsZVJlZnJlc2godXJscykge1xuICAgIGlmIChfbW9kZSA9PT0gXCJmaWxlXCIpIHtcbiAgICAgIC8vIHVybHMgdmFsdWUgd2lsbCBiZSBhIHN0cmluZyBvZiBvbmUgdXJsXG4gICAgICBfY3VycmVudEZpbGVzWzBdID0gdXJscztcblxuICAgICAgc2V0U2luZ2xlSW1hZ2UoX2N1cnJlbnRGaWxlc1swXSk7XG5cbiAgICB9IGVsc2UgaWYgKF9tb2RlID09PSBcImZvbGRlclwiKSB7XG4gICAgICAvLyB1cmxzIHZhbHVlIHdpbGwgYmUgYW4gYXJyYXkgb2YgdXJsc1xuICAgICAgX2N1cnJlbnRGaWxlcyA9IHVybHM7XG5cbiAgICAgIF9zbGlkZXIucmVmcmVzaChfY3VycmVudEZpbGVzKTtcbiAgICB9XG5cbiAgICAvLyBpbiBjYXNlIHJlZnJlc2hlZCBmaWxlIGZpeGVzIGFuIGVycm9yIHdpdGggcHJldmlvdXMgZmlsZSwgZW5zdXJlIGZsYWcgaXMgcmVtb3ZlZCBzbyBwbGF5YmFjayBpcyBhdHRlbXB0ZWQgYWdhaW5cbiAgICBfZXJyb3JGbGFnID0gZmFsc2U7XG4gICAgX3N0b3JhZ2VFcnJvckZsYWcgPSBmYWxzZTtcbiAgICBfZXJyb3JMb2cgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0QWRkaXRpb25hbFBhcmFtcyhhZGRpdGlvbmFsUGFyYW1zLCBtb2RlVHlwZSkge1xuICAgIF9wYXJhbXMgPSBfLmNsb25lKGFkZGl0aW9uYWxQYXJhbXMpO1xuICAgIF9tb2RlID0gbW9kZVR5cGU7XG5cbiAgICBfcGFyYW1zLndpZHRoID0gX3ByZWZzLmdldEludChcInJzV1wiKTtcbiAgICBfcGFyYW1zLmhlaWdodCA9IF9wcmVmcy5nZXRJbnQoXCJyc0hcIik7XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRhaW5lclwiKS5zdHlsZS5oZWlnaHQgPSBfcHJlZnMuZ2V0SW50KFwicnNIXCIpICsgXCJweFwiO1xuICAgIGluaXQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uU2xpZGVyUmVhZHkoKSB7XG4gICAgX21lc3NhZ2UuaGlkZSgpO1xuXG4gICAgaWYgKCFfdmlld2VyUGF1c2VkKSB7XG4gICAgICBfc2xpZGVyLnBsYXkoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblNsaWRlckNvbXBsZXRlKCkge1xuICAgIF9kb25lKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICBfdmlld2VyUGF1c2VkID0gdHJ1ZTtcblxuICAgIC8vIGluIGNhc2UgZXJyb3IgdGltZXIgc3RpbGwgcnVubmluZyAobm8gY29uZGl0aW9uYWwgY2hlY2sgb24gZXJyb3JGbGFnLCBpdCBtYXkgaGF2ZSBiZWVuIHJlc2V0IGluIG9uRmlsZVJlZnJlc2gpXG4gICAgX2NsZWFyRXJyb3JUaW1lcigpO1xuXG4gICAgaWYgKF9tb2RlID09PSBcImZvbGRlclwiICYmIF9zbGlkZXIgJiYgX3NsaWRlci5pc1JlYWR5KCkpIHtcbiAgICAgIF9zbGlkZXIucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwbGF5KCkge1xuICAgIF92aWV3ZXJQYXVzZWQgPSBmYWxzZTtcblxuICAgIGlmICghX2NvbmZpZ3VyYXRpb25Mb2dnZWQpIHtcbiAgICAgIGxvZ0V2ZW50KHsgXCJldmVudFwiOiBcImNvbmZpZ3VyYXRpb25cIiwgXCJldmVudF9kZXRhaWxzXCI6IF9jb25maWd1cmF0aW9uVHlwZSB9LCBmYWxzZSk7XG4gICAgICBfY29uZmlndXJhdGlvbkxvZ2dlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgbG9nRXZlbnQoeyBcImV2ZW50XCI6IFwicGxheVwiLCBcImZpbGVfdXJsXCI6IF9nZXRDdXJyZW50RmlsZSgpIH0sIGZhbHNlKTtcblxuICAgIGlmIChfZXJyb3JGbGFnKSB7XG4gICAgICBfc3RhcnRFcnJvclRpbWVyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKF9tb2RlID09PSBcImZvbGRlclwiICYmIF9zbGlkZXIgJiYgX3NsaWRlci5pc1JlYWR5KCkpIHtcbiAgICAgIF9zbGlkZXIucGxheSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRhYmxlTmFtZSgpIHtcbiAgICByZXR1cm4gXCJpbWFnZV9ldmVudHNcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3dFcnJvcihtZXNzYWdlLCBpc1N0b3JhZ2VFcnJvcikge1xuICAgIF9lcnJvckZsYWcgPSB0cnVlO1xuICAgIF9zdG9yYWdlRXJyb3JGbGFnID0gdHlwZW9mIGlzU3RvcmFnZUVycm9yICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgX21lc3NhZ2Uuc2hvdyhtZXNzYWdlKTtcblxuICAgIC8vIGRlc3Ryb3kgc2xpZGVyIGlmIGl0IGV4aXN0cyBhbmQgcHJldmlvdXNseSBub3RpZmllZCByZWFkeVxuICAgIGlmIChfbW9kZSA9PT0gXCJmb2xkZXJcIiAmJiBfc2xpZGVyICYmIF9zbGlkZXIuaXNSZWFkeSgpKSB7XG4gICAgICBfc2xpZGVyLmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICBpZiAoIV92aWV3ZXJQYXVzZWQpIHtcbiAgICAgIF9zdGFydEVycm9yVGltZXIoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIHBhdXNlKCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFwiaGFzU3RvcmFnZUVycm9yXCI6IGhhc1N0b3JhZ2VFcnJvcixcbiAgICBcImxvZ0V2ZW50XCI6IGxvZ0V2ZW50LFxuICAgIFwib25GaWxlSW5pdFwiOiBvbkZpbGVJbml0LFxuICAgIFwib25GaWxlUmVmcmVzaFwiOiBvbkZpbGVSZWZyZXNoLFxuICAgIFwib25TbGlkZXJDb21wbGV0ZVwiOiBvblNsaWRlckNvbXBsZXRlLFxuICAgIFwib25TbGlkZXJSZWFkeVwiOiBvblNsaWRlclJlYWR5LFxuICAgIFwicGF1c2VcIjogcGF1c2UsXG4gICAgXCJwbGF5XCI6IHBsYXksXG4gICAgXCJzZXRBZGRpdGlvbmFsUGFyYW1zXCI6IHNldEFkZGl0aW9uYWxQYXJhbXMsXG4gICAgXCJnZXRUYWJsZU5hbWVcIjogZ2V0VGFibGVOYW1lLFxuICAgIFwic2hvd0Vycm9yXCI6IHNob3dFcnJvcixcbiAgICBcInN0b3BcIjogc3RvcFxuICB9O1xufSkoZ2FkZ2V0cyk7XG5cbi8qIGdsb2JhbCBfICovXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLkltYWdlID0gUmlzZVZpc2lvbi5JbWFnZSB8fCB7fTtcblxuUmlzZVZpc2lvbi5JbWFnZS5TbGlkZXIgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciB0b3RhbFNsaWRlcyA9IDAsXG4gICAgJGFwaSA9IG51bGwsXG4gICAgY3VycmVudEZpbGVzID0gbnVsbCxcbiAgICBuZXdGaWxlcyA9IG51bGwsXG4gICAgbmF2VGltZXIgPSBudWxsLFxuICAgIHNsaWRlVGltZXIgPSBudWxsLFxuICAgIGlzTGFzdFNsaWRlID0gZmFsc2UsXG4gICAgcmVmcmVzaFNsaWRlciA9IGZhbHNlLFxuICAgIGlzTG9hZGluZyA9IHRydWUsXG4gICAgaXNQbGF5aW5nID0gZmFsc2UsXG4gICAgaXNJbnRlcmFjdGluZyA9IGZhbHNlLFxuICAgIG5hdlRpbWVvdXQgPSAzMDAwO1xuXG4gIC8qXG4gICAqICBQcml2YXRlIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGFkZFNsaWRlcygpIHtcbiAgICB2YXIgbGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudHAtYmFubmVyIHVsXCIpLFxuICAgICAgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG4gICAgICBzbGlkZXMgPSBbXSxcbiAgICAgIHNsaWRlID0gbnVsbCxcbiAgICAgIGltYWdlID0gbnVsbCxcbiAgICAgIHBvc2l0aW9uID0gXCJcIjtcblxuICAgIHRvdGFsU2xpZGVzID0gY3VycmVudEZpbGVzLmxlbmd0aDtcblxuICAgIGN1cnJlbnRGaWxlcy5mb3JFYWNoKGZ1bmN0aW9uKGZpbGUpIHtcbiAgICAgIHNsaWRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuXG4gICAgICAvLyBUcmFuc2l0aW9uXG4gICAgICBzbGlkZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXRyYW5zaXRpb25cIiwgXCJmYWRlXCIpO1xuICAgICAgc2xpZGUuc2V0QXR0cmlidXRlKFwiZGF0YS1tYXN0ZXJzcGVlZFwiLCA1MDApO1xuICAgICAgc2xpZGUuc2V0QXR0cmlidXRlKFwiZGF0YS1kZWxheVwiLCBwYXJhbXMuZHVyYXRpb24gKiAxMDAwKTtcblxuICAgICAgaW1hZ2Uuc3JjID0gZmlsZS51cmw7XG5cbiAgICAgIC8vIEFsaWdubWVudFxuICAgICAgc3dpdGNoIChwYXJhbXMucG9zaXRpb24pIHtcbiAgICAgICAgY2FzZSBcInRvcC1sZWZ0XCI6XG4gICAgICAgICAgcG9zaXRpb24gPSBcImxlZnQgdG9wXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ0b3AtY2VudGVyXCI6XG4gICAgICAgICAgcG9zaXRpb24gPSBcImNlbnRlciB0b3BcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInRvcC1yaWdodFwiOlxuICAgICAgICAgIHBvc2l0aW9uID0gXCJyaWdodCB0b3BcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm1pZGRsZS1sZWZ0XCI6XG4gICAgICAgICAgcG9zaXRpb24gPSBcImxlZnQgY2VudGVyXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtaWRkbGUtY2VudGVyXCI6XG4gICAgICAgICAgcG9zaXRpb24gPSBcImNlbnRlciBjZW50ZXJcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm1pZGRsZS1yaWdodFwiOlxuICAgICAgICAgIHBvc2l0aW9uID0gXCJyaWdodCBjZW50ZXJcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImJvdHRvbS1sZWZ0XCI6XG4gICAgICAgICAgcG9zaXRpb24gPSBcImxlZnQgYm90dG9tXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJib3R0b20tY2VudGVyXCI6XG4gICAgICAgICAgcG9zaXRpb24gPSBcImNlbnRlciBib3R0b21cIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImJvdHRvbS1yaWdodFwiOlxuICAgICAgICAgIHBvc2l0aW9uID0gXCJyaWdodCBib3R0b21cIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBwb3NpdGlvbiA9IFwibGVmdCB0b3BcIjtcbiAgICAgIH1cblxuICAgICAgaW1hZ2Uuc2V0QXR0cmlidXRlKFwiZGF0YS1iZ3Bvc2l0aW9uXCIsIHBvc2l0aW9uKTtcblxuICAgICAgLy8gU2NhbGUgdG8gRml0XG4gICAgICBpZiAocGFyYW1zLnNjYWxlVG9GaXQpIHtcbiAgICAgICAgaW1hZ2Uuc2V0QXR0cmlidXRlKFwiZGF0YS1iZ2ZpdFwiLCBcImNvbnRhaW5cIik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaW1hZ2Uuc2V0QXR0cmlidXRlKFwiZGF0YS1iZ2ZpdFwiLCBcIm5vcm1hbFwiKTtcbiAgICAgIH1cblxuICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQoaW1hZ2UpO1xuICAgICAgc2xpZGVzLnB1c2goc2xpZGUpO1xuICAgIH0pO1xuXG4gICAgc2xpZGVzLmZvckVhY2goZnVuY3Rpb24oc2xpZGUpIHtcbiAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHNsaWRlKTtcbiAgICB9KTtcblxuICAgIGxpc3QuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25TbGlkZUNoYW5nZWQoZGF0YSkge1xuICAgIGlmIChpc0ludGVyYWN0aW5nKSB7XG4gICAgICBwYXVzZSgpO1xuICAgIH1cbiAgICAvLyBEb24ndCBjYWxsIFwiZG9uZVwiIGlmIHVzZXIgaXMgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgc2xpZGVzaG93LlxuICAgIGVsc2Uge1xuICAgICAgaWYgKGlzTGFzdFNsaWRlKSB7XG4gICAgICAgIGlzTGFzdFNsaWRlID0gZmFsc2U7XG4gICAgICAgIHBhdXNlKCk7XG4gICAgICAgIFJpc2VWaXNpb24uSW1hZ2Uub25TbGlkZXJDb21wbGV0ZSgpO1xuXG4gICAgICAgIGlmIChyZWZyZXNoU2xpZGVyKSB7XG4gICAgICAgICAgLy8gRGVzdHJveSBhbmQgcmVjcmVhdGUgdGhlIHNsaWRlciBpZiB0aGUgZmlsZXMgaGF2ZSBjaGFuZ2VkLlxuICAgICAgICAgIGlmICgkYXBpKSB7XG4gICAgICAgICAgICBkZXN0cm95U2xpZGVyKCk7XG4gICAgICAgICAgICBpbml0KG5ld0ZpbGVzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZWZyZXNoU2xpZGVyID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGF0YS5zbGlkZUluZGV4ID09PSB0b3RhbFNsaWRlcykge1xuICAgICAgaXNMYXN0U2xpZGUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3lTbGlkZXIoKSB7XG4gICAgLy8gUmVtb3ZlIGV2ZW50IGhhbmRsZXJzLlxuICAgICQoXCJib2R5XCIpLm9mZihcInRvdWNoZW5kXCIpO1xuICAgICRhcGkub2ZmKFwicmV2b2x1dGlvbi5zbGlkZS5vbmxvYWRlZFwiKTtcbiAgICAkYXBpLm9mZihcInJldm9sdXRpb24uc2xpZGUub25jaGFuZ2VcIik7XG5cbiAgICAvLyBMZXQgdGhlIHNsaWRlciBjbGVhbiB1cCBhZnRlciBpdHNlbGYuXG4gICAgJGFwaS5yZXZraWxsKCk7XG4gICAgJGFwaSA9IG51bGw7XG4gIH1cblxuICAvLyBVc2VyIGhhcyBpbnRlcmFjdGVkIHdpdGggdGhlIHNsaWRlc2hvdy5cbiAgZnVuY3Rpb24gaGFuZGxlVXNlckFjdGl2aXR5KCkge1xuICAgIGlzSW50ZXJhY3RpbmcgPSB0cnVlO1xuICAgIGNsZWFyVGltZW91dChzbGlkZVRpbWVyKTtcblxuICAgIC8vIE1vdmUgdG8gbmV4dCBzbGlkZSBhbmQgcmVzdW1lIHRoZSBzbGlkZXNob3cgYWZ0ZXIgYSBkZWxheS5cbiAgICBzbGlkZVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICRhcGkucmV2bmV4dCgpO1xuICAgICAgJGFwaS5yZXZyZXN1bWUoKTtcblxuICAgICAgaXNJbnRlcmFjdGluZyA9IGZhbHNlO1xuICAgICAgaXNQbGF5aW5nID0gdHJ1ZTtcbiAgICB9LCBwYXJhbXMucGF1c2UgKiAxMDAwKTtcblxuICAgIGhpZGVOYXYoKTtcbiAgfVxuXG4gIC8vIEhpZGUgdGhlIG5hdmlnYXRpb24gYWZ0ZXIgYSBkZWxheS5cbiAgZnVuY3Rpb24gaGlkZU5hdigpIHtcbiAgICBpZiAocGFyYW1zLmF1dG9IaWRlKSB7XG4gICAgICBjbGVhclRpbWVvdXQobmF2VGltZXIpO1xuXG4gICAgICBuYXZUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICQoXCIudHAtbGVmdGFycm93LCAudHAtcmlnaHRhcnJvd1wiKS5hZGRDbGFzcyhcImhpZGVhcnJvd3NcIik7XG4gICAgICB9LCBuYXZUaW1lb3V0KTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICogIFRPRE86IFRlc3Qgd2hhdCBoYXBwZW5zIHdoZW4gZm9sZGVyIGlzbid0IGZvdW5kLlxuICAgKi9cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBpZiAoJGFwaSkge1xuICAgICAgaXNMYXN0U2xpZGUgPSBmYWxzZTtcbiAgICAgIHBhdXNlKCk7XG4gICAgICBkZXN0cm95U2xpZGVyKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0Q3VycmVudFNsaWRlKCkge1xuICAgIGlmICgkYXBpICYmIGN1cnJlbnRGaWxlcyAmJiBjdXJyZW50RmlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuICRhcGkucmV2Y3VycmVudHNsaWRlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdChmaWxlcykge1xuICAgIHZhciB0cEJhbm5lckNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudHAtYmFubmVyLWNvbnRhaW5lclwiKSxcbiAgICAgIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgICAgdHBCYW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuICAgICAgdWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIik7XG5cbiAgICB0cEJhbm5lci5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcInRwLWJhbm5lclwiKTtcbiAgICB0cEJhbm5lci5hcHBlbmRDaGlsZCh1bCk7XG4gICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQodHBCYW5uZXIpO1xuICAgIHRwQmFubmVyQ29udGFpbmVyLmFwcGVuZENoaWxkKGZyYWdtZW50KTtcblxuICAgIGN1cnJlbnRGaWxlcyA9IF8uY2xvbmUoZmlsZXMpO1xuXG4gICAgYWRkU2xpZGVzKCk7XG5cbiAgICBpc0xvYWRpbmcgPSB0cnVlO1xuICAgICRhcGkgPSAkKFwiLnRwLWJhbm5lclwiKS5yZXZvbHV0aW9uKHtcbiAgICAgIFwiaGlkZVRodW1ic1wiOiAwLFxuICAgICAgXCJoaWRlVGltZXJCYXJcIjogXCJvblwiLFxuICAgICAgXCJuYXZpZ2F0aW9uVHlwZVwiOiBcIm5vbmVcIixcbiAgICAgIFwib25Ib3ZlclN0b3BcIjogXCJvZmZcIixcbiAgICAgIFwic3RhcnR3aWR0aFwiOiBwYXJhbXMud2lkdGgsXG4gICAgICBcInN0YXJ0aGVpZ2h0XCI6IHBhcmFtcy5oZWlnaHRcbiAgICB9KTtcblxuICAgICRhcGkub24oXCJyZXZvbHV0aW9uLnNsaWRlLm9ubG9hZGVkXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgLy8gUGF1c2Ugc2xpZGVzaG93IHNpbmNlIGl0IHdpbGwgYXV0b3BsYXkgYW5kIHRoaXMgaXMgbm90IGNvbmZpZ3VyYWJsZS5cbiAgICAgIHBhdXNlKCk7XG4gICAgICBpc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgIFJpc2VWaXNpb24uSW1hZ2Uub25TbGlkZXJSZWFkeSgpO1xuICAgIH0pO1xuXG4gICAgJGFwaS5vbihcInJldm9sdXRpb24uc2xpZGUub25jaGFuZ2VcIiwgZnVuY3Rpb24gKGUsIGRhdGEpIHtcbiAgICAgIG9uU2xpZGVDaGFuZ2VkKGRhdGEpO1xuICAgIH0pO1xuXG4gICAgLy8gU3dpcGUgdGhlIHNsaWRlci5cbiAgICAkKFwiYm9keVwiKS5vbihcInRvdWNoZW5kXCIsIFwiLnRwLWJhbm5lclwiLCBmdW5jdGlvbigpIHtcbiAgICAgIGhhbmRsZVVzZXJBY3Rpdml0eSgpO1xuICAgICAgJChcIi50cC1sZWZ0YXJyb3csIC50cC1yaWdodGFycm93XCIpLnJlbW92ZUNsYXNzKFwiaGlkZWFycm93c1wiKTtcbiAgICB9KTtcblxuICAgIC8vIFRvdWNoIHRoZSBuYXZpZ2F0aW9uIGFycm93cy5cbiAgICAkKFwiYm9keVwiKS5vbihcInRvdWNoZW5kXCIsIFwiLnRwLWxlZnRhcnJvdywgLnRwLXJpZ2h0YXJyb3dcIiwgZnVuY3Rpb24oKSB7XG4gICAgICBoYW5kbGVVc2VyQWN0aXZpdHkoKTtcbiAgICB9KTtcblxuICAgIGhpZGVOYXYoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzUmVhZHkoKSB7XG4gICAgcmV0dXJuICFpc0xvYWRpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBwbGF5KCkge1xuICAgIGlmICgkYXBpKSB7XG4gICAgICAvLyBSZXNldCBzbGlkZXNob3cgdG8gZmlyc3Qgc2xpZGUuXG4gICAgICBpZiAocGFyYW1zLmhhc093blByb3BlcnR5KFwicmVzdW1lXCIpICYmICFwYXJhbXMucmVzdW1lKSB7XG4gICAgICAgICRhcGkucmV2c2hvd3NsaWRlKDApO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzUGxheWluZykge1xuICAgICAgICAkYXBpLnJldnJlc3VtZSgpO1xuICAgICAgICBpc1BsYXlpbmcgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgIGlmICgkYXBpICYmIGlzUGxheWluZykge1xuICAgICAgJGFwaS5yZXZwYXVzZSgpO1xuICAgICAgaXNQbGF5aW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVmcmVzaChmaWxlcykge1xuICAgIC8vIFN0YXJ0IHByZWxvYWRpbmcgaW1hZ2VzIHJpZ2h0IGF3YXkuXG4gICAgUmlzZVZpc2lvbi5Db21tb24uVXRpbGl0aWVzLnByZWxvYWRJbWFnZXMoZmlsZXMpO1xuICAgIG5ld0ZpbGVzID0gXy5jbG9uZShmaWxlcyk7XG4gICAgcmVmcmVzaFNsaWRlciA9IHRydWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFwiZ2V0Q3VycmVudFNsaWRlXCI6IGdldEN1cnJlbnRTbGlkZSxcbiAgICBcImRlc3Ryb3lcIjogZGVzdHJveSxcbiAgICBcImluaXRcIjogaW5pdCxcbiAgICBcImlzUmVhZHlcIjogaXNSZWFkeSxcbiAgICBcInBsYXlcIjogcGxheSxcbiAgICBcInBhdXNlXCI6IHBhdXNlLFxuICAgIFwicmVmcmVzaFwiOiByZWZyZXNoXG4gIH07XG59O1xuXG4vKiBnbG9iYWwgY29uZmlnICovXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLkltYWdlID0gUmlzZVZpc2lvbi5JbWFnZSB8fCB7fTtcblxuUmlzZVZpc2lvbi5JbWFnZS5TdG9yYWdlRmlsZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIF9pbml0aWFsTG9hZCA9IHRydWU7XG5cbiAgLypcbiAgICogIFB1YmxpYyBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzdG9yYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInJpc2Utc3RvcmFnZVwiKTtcblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2Utc3RvcmFnZS1yZXNwb25zZVwiLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgdXJsO1xuXG4gICAgICBpZiAoZS5kZXRhaWwgJiYgZS5kZXRhaWwudXJsKSB7XG5cbiAgICAgICAgdXJsID0gZS5kZXRhaWwudXJsLnJlcGxhY2UoXCInXCIsIFwiXFxcXCdcIik7XG5cbiAgICAgICAgaWYgKF9pbml0aWFsTG9hZCkge1xuICAgICAgICAgIF9pbml0aWFsTG9hZCA9IGZhbHNlO1xuXG4gICAgICAgICAgUmlzZVZpc2lvbi5JbWFnZS5vbkZpbGVJbml0KHVybCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgLy8gY2hlY2sgZm9yIFwiY2hhbmdlZFwiIHByb3BlcnR5XG4gICAgICAgICAgaWYgKGUuZGV0YWlsLmhhc093blByb3BlcnR5KFwiY2hhbmdlZFwiKSkge1xuICAgICAgICAgICAgaWYgKGUuZGV0YWlsLmNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgUmlzZVZpc2lvbi5JbWFnZS5vbkZpbGVSZWZyZXNoKHVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gaW4gdGhlIGV2ZW50IG9mIGEgbmV0d29yayBmYWlsdXJlIGFuZCByZWNvdmVyeSwgY2hlY2sgaWYgdGhlIFdpZGdldCBpcyBpbiBhIHN0YXRlIG9mIHN0b3JhZ2UgZXJyb3JcbiAgICAgICAgICAgICAgaWYgKFJpc2VWaXNpb24uSW1hZ2UuaGFzU3RvcmFnZUVycm9yKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBwcm9jZWVkIHdpdGggcmVmcmVzaCBsb2dpYyBzbyB0aGUgV2lkZ2V0IGNhbiBldmVudHVhbGx5IHBsYXkgdmlkZW8gYWdhaW4gZnJvbSBhIG5ldHdvcmsgcmVjb3ZlcnlcbiAgICAgICAgICAgICAgICBSaXNlVmlzaW9uLkltYWdlLm9uRmlsZVJlZnJlc2goZS5kZXRhaWwudXJsKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1zdG9yYWdlLW5vLWZpbGVcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgXCJldmVudFwiOiBcImVycm9yXCIsXG4gICAgICAgIFwiZXZlbnRfZGV0YWlsc1wiOiBcInN0b3JhZ2UgZmlsZSBub3QgZm91bmRcIixcbiAgICAgICAgXCJmaWxlX3VybFwiOiBlLmRldGFpbFxuICAgICAgfSxcbiAgICAgICAgaW1nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbWFnZVwiKTtcblxuICAgICAgLy8gY2xlYXIgdGhlIGV4aXN0aW5nIGltYWdlXG4gICAgICBpbWcuc3R5bGUuYmFja2dyb3VuZCA9IFwiXCI7XG5cbiAgICAgIFJpc2VWaXNpb24uSW1hZ2UubG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcbiAgICAgIFJpc2VWaXNpb24uSW1hZ2Uuc2hvd0Vycm9yKFwiVGhlIHNlbGVjdGVkIGltYWdlIGRvZXMgbm90IGV4aXN0IG9yIGhhcyBiZWVuIG1vdmVkIHRvIFRyYXNoLlwiKTtcbiAgICB9KTtcblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2Utc3RvcmFnZS1maWxlLXRocm90dGxlZFwiLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBcImV2ZW50XCI6IFwiZXJyb3JcIixcbiAgICAgICAgXCJldmVudF9kZXRhaWxzXCI6IFwic3RvcmFnZSBmaWxlIHRocm90dGxlZFwiLFxuICAgICAgICBcImZpbGVfdXJsXCI6IGUuZGV0YWlsXG4gICAgICB9O1xuXG4gICAgICBSaXNlVmlzaW9uLkltYWdlLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLkltYWdlLnNob3dFcnJvcihcIlRoZSBzZWxlY3RlZCBpbWFnZSBpcyB0ZW1wb3JhcmlseSB1bmF2YWlsYWJsZS5cIik7XG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2UtZXJyb3JcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIGZpbGVVcmwgPSAoZS5kZXRhaWwgJiYgZS5kZXRhaWwucmVxdWVzdCAmJiBlLmRldGFpbC5yZXF1ZXN0LnVybCkgPyBlLmRldGFpbC5yZXF1ZXN0LnVybCA6IG51bGwsXG4gICAgICAgIHBhcmFtcyA9IHtcbiAgICAgICAgICBcImV2ZW50XCI6IFwiZXJyb3JcIixcbiAgICAgICAgICBcImV2ZW50X2RldGFpbHNcIjogXCJyaXNlIHN0b3JhZ2UgZXJyb3JcIixcbiAgICAgICAgICBcImVycm9yX2RldGFpbHNcIjogXCJUaGUgcmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZTogXCIgKyBlLmRldGFpbC5lcnJvci5jdXJyZW50VGFyZ2V0LnN0YXR1cyxcbiAgICAgICAgICBcImZpbGVfdXJsXCI6IGZpbGVVcmxcbiAgICAgICAgfTtcblxuICAgICAgUmlzZVZpc2lvbi5JbWFnZS5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuICAgICAgUmlzZVZpc2lvbi5JbWFnZS5zaG93RXJyb3IoXCJTb3JyeSwgdGhlcmUgd2FzIGEgcHJvYmxlbSBjb21tdW5pY2F0aW5nIHdpdGggUmlzZSBTdG9yYWdlLlwiLCB0cnVlKTtcbiAgICB9KTtcblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2UtY2FjaGUtZXJyb3JcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIGZpbGVVcmwgPSAoZS5kZXRhaWwgJiYgZS5kZXRhaWwucmVxdWVzdCAmJiBlLmRldGFpbC5yZXF1ZXN0LnVybCkgPyBlLmRldGFpbC5yZXF1ZXN0LnVybCA6IG51bGwsXG4gICAgICAgIHBhcmFtcyA9IHtcbiAgICAgICAgICBcImV2ZW50XCI6IFwiZXJyb3JcIixcbiAgICAgICAgICBcImV2ZW50X2RldGFpbHNcIjogXCJyaXNlIGNhY2hlIGVycm9yXCIsXG4gICAgICAgICAgXCJlcnJvcl9kZXRhaWxzXCI6IFwiVGhlIHJlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGU6IFwiICsgZS5kZXRhaWwuZXJyb3IuY3VycmVudFRhcmdldC5zdGF0dXMsXG4gICAgICAgICAgXCJmaWxlX3VybFwiOiBmaWxlVXJsXG4gICAgICAgIH07XG5cbiAgICAgIFJpc2VWaXNpb24uSW1hZ2UubG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcblxuICAgICAgLy8gU2hvdyBhIGRpZmZlcmVudCBtZXNzYWdlIGlmIHRoZXJlIGlzIGEgNDA0IGNvbWluZyBmcm9tIHJpc2UgY2FjaGVcbiAgICAgIHZhciBzdGF0dXNDb2RlID0gZS5kZXRhaWwuZXJyb3IuY3VycmVudFRhcmdldC5zdGF0dXM7XG5cbiAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBcIlRoZXJlIHdhcyBhIHByb2JsZW0gcmV0cmlldmluZyB0aGUgZmlsZSBmcm9tIFJpc2UgQ2FjaGUuXCI7XG4gICAgICBpZihzdGF0dXNDb2RlID09PSA0MDQpe1xuICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIlRoZSBpbWFnZSBkb2VzIG5vdCBleGlzdCBvciBjYW5ub3QgYmUgYWNjZXNzZWQuXCI7XG4gICAgICB9XG4gICAgICBSaXNlVmlzaW9uLkltYWdlLnNob3dFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5zZXRBdHRyaWJ1dGUoXCJmb2xkZXJcIiwgcGFyYW1zLnN0b3JhZ2UuZm9sZGVyKTtcbiAgICBzdG9yYWdlLnNldEF0dHJpYnV0ZShcImZpbGVOYW1lXCIsIHBhcmFtcy5zdG9yYWdlLmZpbGVOYW1lKTtcbiAgICBzdG9yYWdlLnNldEF0dHJpYnV0ZShcImNvbXBhbnlJZFwiLCBwYXJhbXMuc3RvcmFnZS5jb21wYW55SWQpO1xuICAgIHN0b3JhZ2Uuc2V0QXR0cmlidXRlKFwiZW52XCIsIGNvbmZpZy5TVE9SQUdFX0VOVik7XG4gICAgc3RvcmFnZS5nbygpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBcImluaXRcIjogaW5pdFxuICB9O1xufTtcblxuLyogZ2xvYmFsIGNvbmZpZywgXyAqL1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLkltYWdlID0gUmlzZVZpc2lvbi5JbWFnZSB8fCB7fTtcblxuUmlzZVZpc2lvbi5JbWFnZS5TdG9yYWdlRm9sZGVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIF9pc0xvYWRpbmcgPSB0cnVlLFxuICAgIF9maWxlcyA9IFtdLFxuICAgIF90aW1lciA9IG51bGw7XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc1VybChlKSB7XG4gICAgdmFyIGZpbGU7XG5cbiAgICBpZiAoZS5kZXRhaWwpIHtcblxuICAgICAgLy8gSW1hZ2UgaGFzIGJlZW4gYWRkZWQuXG4gICAgICBpZiAoZS5kZXRhaWwuYWRkZWQpIHtcbiAgICAgICAgX2ZpbGVzLnB1c2goe1xuICAgICAgICAgIFwibmFtZVwiOiBlLmRldGFpbC5uYW1lLFxuICAgICAgICAgIFwidXJsXCI6IGUuZGV0YWlsLnVybFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gSW1hZ2UgaGFzIGJlZW4gY2hhbmdlZC5cbiAgICAgIGlmIChlLmRldGFpbC5jaGFuZ2VkKSB7XG4gICAgICAgIGZpbGUgPSBfLmZpbmQoX2ZpbGVzLCBmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICAgIHJldHVybiBmaWxlLm5hbWUgPT09IGUuZGV0YWlsLm5hbWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZpbGUudXJsID0gZS5kZXRhaWwudXJsO1xuICAgICAgfVxuXG4gICAgICAvLyBJbWFnZSBoYXMgYmVlbiBkZWxldGVkLlxuICAgICAgaWYgKGUuZGV0YWlsLmRlbGV0ZWQpIHtcbiAgICAgICAgX2ZpbGVzID0gXy5yZWplY3QoX2ZpbGVzLCBmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgICAgcmV0dXJuIGZpbGUubmFtZSA9PT0gZS5kZXRhaWwubmFtZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2ZpbGVzID0gXy5zb3J0QnkoX2ZpbGVzLCBmdW5jdGlvbihmaWxlKSB7XG4gICAgICByZXR1cm4gZmlsZS5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVSZXNwb25zZShlKSB7XG4gICAgcHJvY2Vzc1VybChlKTtcblxuICAgIC8vIEltYWdlIGhhcyBiZWVuIGFkZGVkLlxuICAgIGlmIChlLmRldGFpbC5hZGRlZCkge1xuICAgICAgaWYgKF9pc0xvYWRpbmcpIHtcbiAgICAgICAgLy8gTmVlZCB0byB3YWl0IGZvciBhdCBsZWFzdCAyIGltYWdlcyB0byBsb2FkIGJlZm9yZSBpbml0aWFsaXppbmcgdGhlIHNsaWRlci5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB0aGUgcmV2b2x1dGlvbi5zbGlkZS5vbmNoYW5nZSBldmVudCB3aWxsIG5ldmVyIGZpcmUsIGFuZCB0aGlzIGV2ZW50IGlzIHVzZWRcbiAgICAgICAgLy8gdG8gY2hlY2sgd2hldGhlciBvciBub3QgdGhlIHNsaWRlciBzaG91bGQgcmVmcmVzaC5cbiAgICAgICAgaWYgKF9maWxlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgX2lzTG9hZGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KF90aW1lcik7XG4gICAgICAgICAgUmlzZVZpc2lvbi5JbWFnZS5vbkZpbGVJbml0KF9maWxlcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IGEgdGltZW91dCBpbiBjYXNlIHRoZXJlIGlzIG9ubHkgb25lIGltYWdlIGluIHRoZSBmb2xkZXIuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIF90aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBfaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBSaXNlVmlzaW9uLkltYWdlLm9uRmlsZUluaXQoX2ZpbGVzKTtcbiAgICAgICAgICB9LCA1MDAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVbmNoYW5nZWRcbiAgICBpZiAoZS5kZXRhaWwuaGFzT3duUHJvcGVydHkoXCJjaGFuZ2VkXCIpICYmICFlLmRldGFpbC5jaGFuZ2VkKSB7XG4gICAgICAvLyBpbiB0aGUgZXZlbnQgb2YgYSBuZXR3b3JrIGZhaWx1cmUgYW5kIHJlY292ZXJ5LCBjaGVjayBpZiB0aGUgV2lkZ2V0IGlzIGluIGEgc3RhdGUgb2Ygc3RvcmFnZSBlcnJvclxuICAgICAgaWYgKCFSaXNlVmlzaW9uLkltYWdlLmhhc1N0b3JhZ2VFcnJvcigpKSB7XG4gICAgICAgIC8vIG9ubHkgcHJvY2VlZCB3aXRoIHJlZnJlc2ggbG9naWMgYmVsb3cgaWYgdGhlcmUncyBiZWVuIGEgc3RvcmFnZSBlcnJvciwgb3RoZXJ3aXNlIGRvIG5vdGhpbmdcbiAgICAgICAgLy8gdGhpcyBpcyBzbyB0aGUgV2lkZ2V0IGNhbiBldmVudHVhbGx5IHBsYXkgc2xpZGVzaG93IGFnYWluIGZyb20gYSBuZXR3b3JrIHJlY292ZXJ5XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBSaXNlVmlzaW9uLkltYWdlLm9uRmlsZVJlZnJlc2goX2ZpbGVzKTtcbiAgfVxuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgc3RvcmFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJyaXNlLXN0b3JhZ2VcIik7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2UtcmVzcG9uc2VcIiwgaGFuZGxlUmVzcG9uc2UpO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1zdG9yYWdlLWVtcHR5LWZvbGRlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBcImV2ZW50XCI6IFwiZXJyb3JcIixcbiAgICAgICAgXCJldmVudF9kZXRhaWxzXCI6IFwic3RvcmFnZSBmb2xkZXIgZW1wdHlcIlxuICAgICAgfTtcblxuICAgICAgUmlzZVZpc2lvbi5JbWFnZS5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuICAgICAgUmlzZVZpc2lvbi5JbWFnZS5zaG93RXJyb3IoXCJUaGUgc2VsZWN0ZWQgZm9sZGVyIGRvZXMgbm90IGNvbnRhaW4gYW55IGltYWdlcy5cIik7XG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2Utbm8tZm9sZGVyXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBcImV2ZW50XCI6IFwiZXJyb3JcIixcbiAgICAgICAgXCJldmVudF9kZXRhaWxzXCI6IFwic3RvcmFnZSBmb2xkZXIgZG9lc24ndCBleGlzdFwiLFxuICAgICAgICBcImVycm9yX2RldGFpbHNcIjogZS5kZXRhaWxcbiAgICAgIH07XG5cbiAgICAgIFJpc2VWaXNpb24uSW1hZ2UubG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcbiAgICAgIFJpc2VWaXNpb24uSW1hZ2Uuc2hvd0Vycm9yKFwiVGhlIHNlbGVjdGVkIGZvbGRlciBkb2VzIG5vdCBleGlzdCBvciBoYXMgYmVlbiBtb3ZlZCB0byBUcmFzaC5cIik7XG4gICAgfSk7XG5cblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2Utc3RvcmFnZS1mb2xkZXItaW52YWxpZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBcImV2ZW50XCI6IFwiZXJyb3JcIixcbiAgICAgICAgXCJldmVudF9kZXRhaWxzXCI6IFwic3RvcmFnZSBmb2xkZXIgZm9ybWF0KHMpIGludmFsaWRcIlxuICAgICAgfTtcblxuICAgICAgUmlzZVZpc2lvbi5JbWFnZS5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuICAgICAgUmlzZVZpc2lvbi5JbWFnZS5zaG93RXJyb3IoXCJUaGUgc2VsZWN0ZWQgZm9sZGVyIGRvZXMgbm90IGNvbnRhaW4gYW55IHN1cHBvcnRlZCBpbWFnZSBmb3JtYXRzLlwiKTtcbiAgICB9KTtcblxuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1zdG9yYWdlLWVycm9yXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIFwiZXZlbnRcIjogXCJyaXNlIHN0b3JhZ2UgZXJyb3JcIixcbiAgICAgICAgXCJldmVudF9kZXRhaWxzXCI6IFwiVGhlIHJlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGU6IFwiICsgZS5kZXRhaWwuZXJyb3IuY3VycmVudFRhcmdldC5zdGF0dXNcbiAgICAgIH07XG5cbiAgICAgIFJpc2VWaXNpb24uSW1hZ2UubG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcbiAgICAgIFJpc2VWaXNpb24uSW1hZ2Uuc2hvd0Vycm9yKFwiU29ycnksIHRoZXJlIHdhcyBhIHByb2JsZW0gY29tbXVuaWNhdGluZyB3aXRoIFJpc2UgU3RvcmFnZS5cIiwgdHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLWNhY2hlLWVycm9yXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIFwiZXZlbnRcIjogXCJyaXNlIGNhY2hlIGVycm9yXCIsXG4gICAgICAgIFwiZXZlbnRfZGV0YWlsc1wiOiBcIlRoZSByZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlOiBcIiArIGUuZGV0YWlsLmVycm9yLmN1cnJlbnRUYXJnZXQuc3RhdHVzXG4gICAgICB9O1xuXG4gICAgICBSaXNlVmlzaW9uLkltYWdlLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG5cbiAgICAgIC8vIFNob3cgYSBkaWZmZXJlbnQgbWVzc2FnZSBpZiB0aGVyZSBpcyBhIDQwNCBjb21pbmcgZnJvbSByaXNlIGNhY2hlXG4gICAgICB2YXIgc3RhdHVzQ29kZSA9IGUuZGV0YWlsLmVycm9yLmN1cnJlbnRUYXJnZXQuc3RhdHVzO1xuXG4gICAgICB2YXIgZXJyb3JNZXNzYWdlID0gXCJUaGVyZSB3YXMgYSBwcm9ibGVtIHJldHJpZXZpbmcgdGhlIGZpbGUgZnJvbSBSaXNlIENhY2hlLlwiO1xuICAgICAgaWYoc3RhdHVzQ29kZSA9PT0gNDA0KXtcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJUaGUgaW1hZ2UgZG9lcyBub3QgZXhpc3Qgb3IgY2Fubm90IGJlIGFjY2Vzc2VkLlwiO1xuICAgICAgfVxuICAgICAgUmlzZVZpc2lvbi5JbWFnZS5zaG93RXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICB9KTtcblxuICAgIHN0b3JhZ2Uuc2V0QXR0cmlidXRlKFwiZmlsZVR5cGVcIiwgXCJpbWFnZVwiKTtcbiAgICBzdG9yYWdlLnNldEF0dHJpYnV0ZShcImNvbXBhbnlJZFwiLCBkYXRhLnN0b3JhZ2UuY29tcGFueUlkKTtcbiAgICBzdG9yYWdlLnNldEF0dHJpYnV0ZShcImZvbGRlclwiLCBkYXRhLnN0b3JhZ2UuZm9sZGVyKTtcbiAgICBzdG9yYWdlLnNldEF0dHJpYnV0ZShcImVudlwiLCBjb25maWcuU1RPUkFHRV9FTlYpO1xuXG4gICAgc3RvcmFnZS5nbygpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBcImluaXRcIjogaW5pdFxuICB9O1xufTtcblxudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5JbWFnZSA9IFJpc2VWaXNpb24uSW1hZ2UgfHwge307XG5cblJpc2VWaXNpb24uSW1hZ2UuTm9uU3RvcmFnZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciByaXNlQ2FjaGUgPSBSaXNlVmlzaW9uLkNvbW1vbi5SaXNlQ2FjaGU7XG5cbiAgdmFyIF9yZWZyZXNoRHVyYXRpb24gPSAzMDAwMDAsICAvLyA1IG1pbnV0ZXNcbiAgICBfcmVmcmVzaEludGVydmFsSWQgPSBudWxsO1xuXG4gIHZhciBfaXNMb2FkaW5nID0gdHJ1ZTtcblxuICB2YXIgX3VybCA9IFwiXCI7XG5cbiAgZnVuY3Rpb24gX2dldEZpbGUob21pdENhY2hlQnVzdGVyKSB7XG4gICAgdmFyIHBhcmFtcztcblxuICAgIHJpc2VDYWNoZS5nZXRGaWxlKF91cmwsIGZ1bmN0aW9uIChyZXNwb25zZSwgZXJyb3IpIHtcbiAgICAgIGlmICghZXJyb3IpIHtcblxuICAgICAgICBpZiAoX2lzTG9hZGluZykge1xuICAgICAgICAgIF9pc0xvYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgIFJpc2VWaXNpb24uSW1hZ2Uub25GaWxlSW5pdChyZXNwb25zZS51cmwpO1xuXG4gICAgICAgICAgLy8gc3RhcnQgdGhlIHJlZnJlc2ggaW50ZXJ2YWxcbiAgICAgICAgICBfc3RhcnRSZWZyZXNoSW50ZXJ2YWwoKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFJpc2VWaXNpb24uSW1hZ2Uub25GaWxlUmVmcmVzaChyZXNwb25zZS51cmwpO1xuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgLy8gZXJyb3Igb2NjdXJyZWRcbiAgICAgICAgcGFyYW1zID0ge1xuICAgICAgICAgIFwiZXZlbnRcIjogXCJlcnJvclwiLFxuICAgICAgICAgIFwiZXZlbnRfZGV0YWlsc1wiOiBcIm5vbi1zdG9yYWdlIGVycm9yXCIsXG4gICAgICAgICAgXCJlcnJvcl9kZXRhaWxzXCI6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgXCJmaWxlX3VybFwiOiByZXNwb25zZS51cmxcbiAgICAgICAgfTtcblxuICAgICAgICBSaXNlVmlzaW9uLkltYWdlLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG5cbiAgICAgICAgLy8gU2hvdyBhIGRpZmZlcmVudCBtZXNzYWdlIGlmIHRoZXJlIGlzIGEgNDA0IGNvbWluZyBmcm9tIHJpc2UgY2FjaGVcbiAgICAgICAgdmFyIHN0YXR1c0NvZGUgPSBlcnJvci5tZXNzYWdlLnN1YnN0cmluZyhlcnJvci5tZXNzYWdlLmluZGV4T2YoXCI6XCIpKzIpO1xuXG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBcIlRoZXJlIHdhcyBhIHByb2JsZW0gcmV0cmlldmluZyB0aGUgZmlsZSBmcm9tIFJpc2UgQ2FjaGUuXCI7XG4gICAgICAgIGlmKHN0YXR1c0NvZGUgPT09IFwiNDA0XCIpe1xuICAgICAgICAgIGVycm9yTWVzc2FnZSA9IFwiVGhlIGltYWdlIGRvZXMgbm90IGV4aXN0IG9yIGNhbm5vdCBiZSBhY2Nlc3NlZC5cIjtcbiAgICAgICAgfVxuICAgICAgICBSaXNlVmlzaW9uLkltYWdlLnNob3dFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0sIG9taXRDYWNoZUJ1c3Rlcik7XG4gIH1cblxuICBmdW5jdGlvbiBfc3RhcnRSZWZyZXNoSW50ZXJ2YWwoKSB7XG4gICAgaWYgKF9yZWZyZXNoSW50ZXJ2YWxJZCA9PT0gbnVsbCkge1xuICAgICAgX3JlZnJlc2hJbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICBfZ2V0RmlsZShmYWxzZSk7XG4gICAgICB9LCBfcmVmcmVzaER1cmF0aW9uKTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgLy8gSGFuZGxlIHByZS1tZXJnZSB1c2Ugb2YgXCJ1cmxcIiBzZXR0aW5nIHByb3BlcnR5XG4gICAgX3VybCA9IChkYXRhLnVybCAmJiBkYXRhLnVybCAhPT0gXCJcIikgPyBkYXRhLnVybCA6IGRhdGEuc2VsZWN0b3IudXJsO1xuXG4gICAgX2dldEZpbGUodHJ1ZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFwiaW5pdFwiOiBpbml0XG4gIH07XG59O1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLkNvbW1vbiA9IFJpc2VWaXNpb24uQ29tbW9uIHx8IHt9O1xuXG5SaXNlVmlzaW9uLkNvbW1vbi5NZXNzYWdlID0gZnVuY3Rpb24gKG1haW5Db250YWluZXIsIG1lc3NhZ2VDb250YWluZXIpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIF9hY3RpdmUgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICB0cnkge1xuICAgICAgbWVzc2FnZUNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBtYWluQ29udGFpbmVyLnN0eWxlLmhlaWdodDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJDYW4ndCBpbml0aWFsaXplIE1lc3NhZ2UgLSBcIiwgZS5tZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgaWYgKF9hY3RpdmUpIHtcbiAgICAgIC8vIGNsZWFyIGNvbnRlbnQgb2YgbWVzc2FnZSBjb250YWluZXJcbiAgICAgIHdoaWxlIChtZXNzYWdlQ29udGFpbmVyLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgbWVzc2FnZUNvbnRhaW5lci5yZW1vdmVDaGlsZChtZXNzYWdlQ29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuXG4gICAgICAvLyBoaWRlIG1lc3NhZ2UgY29udGFpbmVyXG4gICAgICBtZXNzYWdlQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuICAgICAgLy8gc2hvdyBtYWluIGNvbnRhaW5lclxuICAgICAgbWFpbkNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG5cbiAgICAgIF9hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzaG93KG1lc3NhZ2UpIHtcbiAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG4gICAgICBwO1xuXG4gICAgaWYgKCFfYWN0aXZlKSB7XG4gICAgICAvLyBoaWRlIG1haW4gY29udGFpbmVyXG4gICAgICBtYWluQ29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuXG4gICAgICBtZXNzYWdlQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgICAgIC8vIGNyZWF0ZSBtZXNzYWdlIGVsZW1lbnRcbiAgICAgIHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgIHAuaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgICAgIHAuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJtZXNzYWdlXCIpO1xuXG4gICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChwKTtcbiAgICAgIG1lc3NhZ2VDb250YWluZXIuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuXG4gICAgICBfYWN0aXZlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbWVzc2FnZSBhbHJlYWR5IGJlaW5nIHNob3duLCB1cGRhdGUgbWVzc2FnZSB0ZXh0XG4gICAgICBwID0gbWVzc2FnZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLm1lc3NhZ2VcIik7XG4gICAgICBwLmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgfVxuICB9XG5cbiAgX2luaXQoKTtcblxuICByZXR1cm4ge1xuICAgIFwiaGlkZVwiOiBoaWRlLFxuICAgIFwic2hvd1wiOiBzaG93XG4gIH07XG59O1xuXG4vKiBnbG9iYWwgUmlzZVZpc2lvbiwgZ2FkZ2V0cyAqL1xuKGZ1bmN0aW9uICh3aW5kb3csIGRvY3VtZW50LCBnYWRnZXRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBpZCA9IG5ldyBnYWRnZXRzLlByZWZzKCkuZ2V0U3RyaW5nKFwiaWRcIik7XG5cbiAgd2luZG93Lm9uY29udGV4dG1lbnUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGRvY3VtZW50LmJvZHkub25tb3VzZWRvd24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgZnVuY3Rpb24gY29uZmlndXJlKG5hbWVzLCB2YWx1ZXMpIHtcbiAgICB2YXIgYWRkaXRpb25hbFBhcmFtcywgbW9kZSxcbiAgICAgIGNvbXBhbnlJZCA9IFwiXCIsXG4gICAgICBkaXNwbGF5SWQgPSBcIlwiO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkobmFtZXMpICYmIG5hbWVzLmxlbmd0aCA+IDAgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZXMpICYmIHZhbHVlcy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBjb21wYW55IGlkXG4gICAgICBpZiAobmFtZXNbMF0gPT09IFwiY29tcGFueUlkXCIpIHtcbiAgICAgICAgY29tcGFueUlkID0gdmFsdWVzWzBdO1xuICAgICAgfVxuXG4gICAgICAvLyBkaXNwbGF5IGlkXG4gICAgICBpZiAobmFtZXNbMV0gPT09IFwiZGlzcGxheUlkXCIpIHtcbiAgICAgICAgaWYgKHZhbHVlc1sxXSkge1xuICAgICAgICAgIGRpc3BsYXlJZCA9IHZhbHVlc1sxXTtcbiAgICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICAgZGlzcGxheUlkID0gXCJwcmV2aWV3XCI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gcHJvdmlkZSBMb2dnZXJVdGlscyB0aGUgaWRzIHRvIHVzZVxuICAgICAgUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyVXRpbHMuc2V0SWRzKGNvbXBhbnlJZCwgZGlzcGxheUlkKTtcblxuICAgICAgLy8gYWRkaXRpb25hbCBwYXJhbXNcbiAgICAgIGlmIChuYW1lc1syXSA9PT0gXCJhZGRpdGlvbmFsUGFyYW1zXCIpIHtcbiAgICAgICAgYWRkaXRpb25hbFBhcmFtcyA9IEpTT04ucGFyc2UodmFsdWVzWzJdKTtcblxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoYWRkaXRpb25hbFBhcmFtcy5zdG9yYWdlKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAvLyBzdG9yYWdlIGZpbGUgb3IgZm9sZGVyIHNlbGVjdGVkXG4gICAgICAgICAgaWYgKCFhZGRpdGlvbmFsUGFyYW1zLnN0b3JhZ2UuZmlsZU5hbWUpIHtcbiAgICAgICAgICAgIC8vIGZvbGRlciB3YXMgc2VsZWN0ZWRcbiAgICAgICAgICAgIG1vZGUgPSBcImZvbGRlclwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBmaWxlIHdhcyBzZWxlY3RlZFxuICAgICAgICAgICAgbW9kZSA9IFwiZmlsZVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBub24tc3RvcmFnZSBmaWxlIHdhcyBzZWxlY3RlZFxuICAgICAgICAgIG1vZGUgPSBcImZpbGVcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIFJpc2VWaXNpb24uSW1hZ2Uuc2V0QWRkaXRpb25hbFBhcmFtcyhhZGRpdGlvbmFsUGFyYW1zLCBtb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICBSaXNlVmlzaW9uLkltYWdlLnBhdXNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwbGF5KCkge1xuICAgIFJpc2VWaXNpb24uSW1hZ2UucGxheSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBSaXNlVmlzaW9uLkltYWdlLnN0b3AoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvbHltZXJSZWFkeSgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIldlYkNvbXBvbmVudHNSZWFkeVwiLCBwb2x5bWVyUmVhZHkpO1xuXG4gICAgaWYgKGlkICYmIGlkICE9PSBcIlwiKSB7XG4gICAgICBnYWRnZXRzLnJwYy5yZWdpc3RlcihcInJzY21kX3BsYXlfXCIgKyBpZCwgcGxheSk7XG4gICAgICBnYWRnZXRzLnJwYy5yZWdpc3RlcihcInJzY21kX3BhdXNlX1wiICsgaWQsIHBhdXNlKTtcbiAgICAgIGdhZGdldHMucnBjLnJlZ2lzdGVyKFwicnNjbWRfc3RvcF9cIiArIGlkLCBzdG9wKTtcbiAgICAgIGdhZGdldHMucnBjLnJlZ2lzdGVyKFwicnNwYXJhbV9zZXRfXCIgKyBpZCwgY29uZmlndXJlKTtcbiAgICAgIGdhZGdldHMucnBjLmNhbGwoXCJcIiwgXCJyc3BhcmFtX2dldFwiLCBudWxsLCBpZCwgW1wiY29tcGFueUlkXCIsIFwiZGlzcGxheUlkXCIsIFwiYWRkaXRpb25hbFBhcmFtc1wiXSk7XG4gICAgfVxuICB9XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJXZWJDb21wb25lbnRzUmVhZHlcIiwgcG9seW1lclJlYWR5KTtcblxufSkod2luZG93LCBkb2N1bWVudCwgZ2FkZ2V0cyk7XG5cbi8qIGpzaGludCBpZ25vcmU6c3RhcnQgKi9cbnZhciBfZ2FxID0gX2dhcSB8fCBbXTtcblxuX2dhcS5wdXNoKFsnX3NldEFjY291bnQnLCAnVUEtNTcwOTIxNTktMyddKTtcbl9nYXEucHVzaChbJ190cmFja1BhZ2V2aWV3J10pO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBnYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOyBnYS50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7IGdhLmFzeW5jID0gdHJ1ZTtcbiAgZ2Euc3JjID0gKCdodHRwczonID09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sID8gJ2h0dHBzOi8vc3NsJyA6ICdodHRwOi8vd3d3JykgKyAnLmdvb2dsZS1hbmFseXRpY3MuY29tL2dhLmpzJztcbiAgdmFyIHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07IHMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZ2EsIHMpO1xufSkoKTtcbi8qIGpzaGludCBpZ25vcmU6ZW5kICovXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
