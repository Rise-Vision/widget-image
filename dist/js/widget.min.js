var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,t){var i=null;e.event?(i=e,i.file_url&&(i.file_format=n(i.file_url)),i.company_id=a,i.display_id=s,t(i)):t(i)}function t(){var e=new Date,t=e.getUTCFullYear(),n=e.getUTCMonth()+1,i=e.getUTCDate();return 10>n&&(n="0"+n),10>i&&(i="0"+i),t+n+i}function n(e){var t,n=/[?#&]/;return e&&"string"==typeof e?(t=e.substr(e.lastIndexOf(".")+1),n.test(t)&&(t=t.substr(0,-1!==t.indexOf("?")?t.indexOf("?"):t.length),t=t.substr(0,-1!==t.indexOf("#")?t.indexOf("#"):t.length),t=t.substr(0,-1!==t.indexOf("&")?t.indexOf("&"):t.length)),t.toLowerCase()):null}function i(e){var n={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:t(),rows:[{insertId:""}]},i=JSON.parse(JSON.stringify(n));return i.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),i.rows[0].json=JSON.parse(JSON.stringify(e)),i.rows[0].json.ts=(new Date).toISOString(),i}function o(t,n){e(n,function(e){null!==e&&RiseVision.Common.Logger.log(t,e)})}function r(e,t){a=e,s=t}var s="",a="";return{getInsertData:i,getFileFormat:n,logEvent:o,setIds:r}}(),RiseVision.Common.Logger=function(e){"use strict";function t(e){var t=new XMLHttpRequest;return new Date-u<358e4?e({}):(t.open("POST",o,!0),t.onloadend=function(){var n=JSON.parse(t.response);e({token:n.access_token,refreshedAt:new Date})},t.send(),void 0)}function n(e){return s&&l===e}function i(i,o){function c(t){var n,s,a=new XMLHttpRequest;s=r.replace("TABLE_ID",i),u=t.refreshedAt||u,d=t.token||d,n=e.getInsertData(o),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+d),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!i||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&n(o.event)))return s=!0,l=o.event,setTimeout(function(){s=!1},a),t(c)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",u=0,d="";return{log:i}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var t=new XMLHttpRequest;e&&"function"==typeof e&&(t.open("GET",n+"ping?callback=_",!0),t.onreadystatechange=function(){try{4===t.readyState&&(i=!0,200===t.status?(o=!0,e(!0,t.responseText)):(console.debug("Rise Cache is not running"),o=!1,e(!1,null)))}catch(n){console.debug("Caught exception: ",n.description)}},t.send())}function t(e,t,r){function s(){var t,i,s;o?t=r?n+"?url="+encodeURIComponent(e):n+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):r?t=e:(i=e.split("?"),s=1===i.length?"?":"&",t=e+s+"cb="+(new Date).getTime()),a("HEAD",t)}function a(e,n){var i=new XMLHttpRequest,r={xhr:i,url:n};o?(i.open(e,n,!0),i.addEventListener("loadend",function(){var o=i.status||0;o>=200&&300>o?t(r):"HEAD"===e?a("GET",n):t(r,new Error("The request failed with status code: "+o))}),i.send()):t(r)}if(e&&t&&"function"==typeof t)return i?s():this.ping(s)}var n="//localhost:9494/",i=!1,o=!1;return{getFile:t,ping:e}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,t){var n="font-family:"+t.font.family+"; ",i="color: "+(t.color?t.color:t.forecolor)+"; ",o="font-size: "+(-1===t.size.indexOf("px")?t.size+"px; ":t.size+"; "),r="font-weight: "+(t.bold?"bold":"normal")+"; ",s="font-style: "+(t.italic?"italic":"normal")+"; ",a="text-decoration: "+(t.underline?"underline":"none")+"; ",l="background-color: "+(t.highlightColor?t.highlightColor:t.backcolor)+"; ";return"."+e+" {"+n+i+o+r+s+a+l+"}"}function t(e){for(var t=document.createElement("style"),n=0,i=e.length;i>n;n++)t.appendChild(document.createTextNode(e[n]));document.head.appendChild(t)}function n(n,r){n.forEach(function(n){n.class&&n.fontSetting&&t([e(n.class,n.fontSetting)]),n.fontSetting.font.type&&("custom"===n.fontSetting.font.type&&n.fontSetting.font.family&&n.fontSetting.font.url?i(n.fontSetting.font.family,n.fontSetting.font.url,r):"google"===n.fontSetting.font.type&&n.fontSetting.font.family&&o(n.fontSetting.font.family,r))})}function i(e,t,n){var i=null,o="font-family: "+e+"; src: url('"+t+"');";n=n||document,i=n.styleSheets[0],null!==i&&i.addRule("@font-face",o)}function o(e,t){var n=document.createElement("link");t=t||document,n.setAttribute("rel","stylesheet"),n.setAttribute("type","text/css"),n.setAttribute("href","https://fonts.googleapis.com/css?family="+e.split(",")[0]),null!==n&&t.getElementsByTagName("head")[0].appendChild(n)}function r(e){for(var t=e.length,n=[],i=0;t>i;i++)n[i]=new Image,n[i].src=e[i]}function s(e){for(var t,n=window.location.search.substring(1),i=n.split("&"),o=0;o<i.length;o++)if(t=i[o].split("="),t[0]==e)return decodeURIComponent(t[1]);return""}return{getQueryParameter:s,getFontCssStyle:e,addCSSRules:t,loadFonts:n,loadCustomFont:i,loadGoogleFont:o,preloadImages:r}}(),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={STORAGE_ENV:"prod"},RiseVision=RiseVision||{};RiseVision.Image={},RiseVision.Image=function(e){"use strict";function t(){e.rpc.call("","rsevent_ready",null,E.getString("id"),!0,!0,!0,!0,!0)}function n(){e.rpc.call("","rsevent_done",null,E.getString("id")),null!==O&&u(O,!0),u({event:"done",file_url:r()},!1)}function i(){clearTimeout(A),A=null}function o(){i(),A=setTimeout(function(){n()},5e3)}function r(){var e=-1;if(S&&S.length>0){if("file"===I)return S[0];if("folder"===I&&T&&T.isReady()&&(e=T.getCurrentSlide(),-1!==e))return S[e]}return null}function s(){var e,n=document.getElementById("container"),i=document.createDocumentFragment(),o=document.createElement("div");b=new RiseVision.Common.Message(document.getElementById("container"),document.getElementById("messageContainer")),b.show("Please wait while your image is downloaded."),V.background&&Object.keys(V.background).length>0&&(document.body.style.background=V.background.color),"file"===I?(o.setAttribute("id","image"),o.className=V.position,o.className=V.scaleToFit?o.className+" scale-to-fit":o.className,i.appendChild(o),n.appendChild(i),e=0!==Object.keys(V.storage).length,e?(L="storage file",w=new RiseVision.Image.StorageFile(V),w.init()):(L="custom",C=new RiseVision.Image.NonStorage(V),C.init())):"folder"===I&&(o.className="tp-banner-container",i.appendChild(o),n.appendChild(i),L="storage folder",w=new RiseVision.Image.StorageFolder(V),w.init()),t()}function a(e){var t=document.querySelector("#container #image");t.style.backgroundImage="url("+e+")"}function l(){return k}function u(e,t){t&&(O=e),RiseVision.Common.LoggerUtils.logEvent(v(),e)}function d(e){"file"===I?(S[0]=e,b.hide(),a(S[0])):"folder"===I&&(S=e,T=new RiseVision.Image.Slider(V),T.init(e))}function c(e){"file"===I?(S[0]=e,a(S[0])):"folder"===I&&(S=e,T.refresh(S)),N=!1,k=!1,O=null}function g(e,t){V=_.clone(e),I=t,V.width=E.getInt("rsW"),V.height=E.getInt("rsH"),document.getElementById("container").style.height=E.getInt("rsH")+"px",s()}function f(){b.hide(),x||T.play()}function m(){n()}function p(){x=!0,i(),"folder"===I&&T&&T.isReady()&&T.pause()}function h(){return x=!1,F||(u({event:"configuration",event_details:L},!1),F=!0),u({event:"play",file_url:r()},!1),N?(o(),void 0):("folder"===I&&T&&T.isReady()&&T.play(),void 0)}function v(){return"image_events"}function R(e,t){N=!0,k="undefined"!=typeof t,b.show(e),"folder"===I&&T&&T.isReady()&&T.destroy(),x||o()}function y(){p()}var I,E=new e.Prefs,b=null,V=null,w=null,C=null,T=null,S=[],O=null,L=null,A=null,N=!1,k=!1,F=!1,x=!0;return{hasStorageError:l,logEvent:u,onFileInit:d,onFileRefresh:c,onSliderComplete:m,onSliderReady:f,pause:p,play:h,setAdditionalParams:g,getTableName:v,showError:R,stop:y}}(gadgets);var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.Slider=function(e){"use strict";function t(){var t=document.querySelector(".tp-banner ul"),n=document.createDocumentFragment(),i=[],o=null,r=null,s="";f=p.length,p.forEach(function(t){switch(o=document.createElement("li"),r=document.createElement("img"),o.setAttribute("data-transition","fade"),o.setAttribute("data-masterspeed",500),o.setAttribute("data-delay",1e3*e.duration),r.src=t.url,e.position){case"top-left":s="left top";break;case"top-center":s="center top";break;case"top-right":s="right top";break;case"middle-left":s="left center";break;case"middle-center":s="center center";break;case"middle-right":s="right center";break;case"bottom-left":s="left bottom";break;case"bottom-center":s="center bottom";break;case"bottom-right":s="right bottom";break;default:s="left top"}r.setAttribute("data-bgposition",s),e.scaleToFit?r.setAttribute("data-bgfit","contain"):r.setAttribute("data-bgfit","normal"),o.appendChild(r),i.push(o)}),i.forEach(function(e){n.appendChild(e)}),t.appendChild(n)}function n(e){V?c():y&&(y=!1,c(),RiseVision.Image.onSliderComplete(),I&&(m&&(i(),l(h)),I=!1)),e.slideIndex===f&&(y=!0)}function i(){$("body").off("touchend"),m.off("revolution.slide.onloaded"),m.off("revolution.slide.onchange"),m.revkill(),m=null}function o(){V=!0,clearTimeout(R),R=setTimeout(function(){m.revnext(),m.revresume(),V=!1,b=!0},1e3*e.pause),r()}function r(){e.autoHide&&(clearTimeout(v),v=setTimeout(function(){$(".tp-leftarrow, .tp-rightarrow").addClass("hidearrows")},w))}function s(){m&&(y=!1,c(),i())}function a(){return m&&p&&p.length>0?m.revcurrentslide():-1}function l(i){var s=document.querySelector(".tp-banner-container"),a=document.createDocumentFragment(),l=document.createElement("div"),u=document.createElement("ul");l.setAttribute("class","tp-banner"),l.appendChild(u),a.appendChild(l),s.appendChild(a),p=_.clone(i),t(),E=!0,m=$(".tp-banner").revolution({hideThumbs:0,hideTimerBar:"on",navigationType:"none",onHoverStop:"off",startwidth:e.width,startheight:e.height}),m.on("revolution.slide.onloaded",function(){c(),E=!1,RiseVision.Image.onSliderReady()}),m.on("revolution.slide.onchange",function(e,t){n(t)}),$("body").on("touchend",".tp-banner",function(){o(),$(".tp-leftarrow, .tp-rightarrow").removeClass("hidearrows")}),$("body").on("touchend",".tp-leftarrow, .tp-rightarrow",function(){o()}),r()}function u(){return!E}function d(){m&&(e.hasOwnProperty("resume")&&!e.resume&&m.revshowslide(0),b||(m.revresume(),b=!0))}function c(){m&&b&&(m.revpause(),b=!1)}function g(e){RiseVision.Common.Utilities.preloadImages(e),h=_.clone(e),I=!0}var f=0,m=null,p=null,h=null,v=null,R=null,y=!1,I=!1,E=!0,b=!1,V=!1,w=3e3;return{getCurrentSlide:a,destroy:s,init:l,isReady:u,play:d,pause:c,refresh:g}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.StorageFile=function(e){"use strict";function t(){var t=document.querySelector("rise-storage");t.addEventListener("rise-storage-response",function(e){var t;e.detail&&e.detail.url&&(t=e.detail.url.replace("'","\\'"),n?(n=!1,RiseVision.Image.onFileInit(t)):e.detail.hasOwnProperty("changed")&&(e.detail.changed?RiseVision.Image.onFileRefresh(t):RiseVision.Image.hasStorageError()&&RiseVision.Image.onFileRefresh(e.detail.url)))}),t.addEventListener("rise-storage-no-file",function(e){var t={event:"error",event_details:"storage file not found",file_url:e.detail},n=document.getElementById("image");n.style.background="",RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected image does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-file-throttled",function(e){var t={event:"error",event_details:"storage file throttled",file_url:e.detail};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected image is temporarily unavailable.")}),t.addEventListener("rise-storage-subscription-expired",function(){var e={event:"error",event_details:"storage subscription expired"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("Rise Storage subscription is not active.")}),t.addEventListener("rise-storage-error",function(e){var t=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,n={event:"error",event_details:"rise storage error",error_details:"The request failed with status code: "+e.detail.error.currentTarget.status,file_url:t};RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var t=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,n={event:"error",event_details:"rise cache error",error_details:"The request failed with status code: "+e.detail.error.currentTarget.status,file_url:t};RiseVision.Image.logEvent(n,!0);var i=e.detail.error.currentTarget.status,o="There was a problem retrieving the file from Rise Cache.";404===i&&(o="The image does not exist or cannot be accessed."),RiseVision.Image.showError(o)}),t.setAttribute("folder",e.storage.folder),t.setAttribute("fileName",e.storage.fileName),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("env",config.STORAGE_ENV),t.go()}var n=!0;return{init:t}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.StorageFolder=function(e){"use strict";function t(e){var t;e.detail&&(e.detail.added&&r.push({name:e.detail.name,url:e.detail.url}),e.detail.changed&&(t=_.find(r,function(t){return t.name===e.detail.name}),t.url=e.detail.url),e.detail.deleted&&(r=_.reject(r,function(t){return t.name===e.detail.name}))),r=_.sortBy(r,function(e){return e.name.toLowerCase()})}function n(e){return t(e),e.detail.added&&o?(r.length>1?(o=!1,clearTimeout(s),RiseVision.Image.onFileInit(r)):s=setTimeout(function(){o=!1,RiseVision.Image.onFileInit(r)},5e3),void 0):((!e.detail.hasOwnProperty("changed")||e.detail.changed||RiseVision.Image.hasStorageError())&&RiseVision.Image.onFileRefresh(r),void 0)}function i(){var t=document.querySelector("rise-storage");t.addEventListener("rise-storage-response",n),t.addEventListener("rise-storage-empty-folder",function(){var e={event:"error",event_details:"storage folder empty"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("The selected folder does not contain any images.")}),t.addEventListener("rise-storage-no-folder",function(e){var t={event:"error",event_details:"storage folder doesn't exist",error_details:e.detail};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected folder does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-folder-invalid",function(){var e={event:"error",event_details:"storage folder format(s) invalid"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("The selected folder does not contain any supported image formats.")}),t.addEventListener("rise-storage-subscription-expired",function(){var e={event:"error",event_details:"storage subscription expired"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("Rise Storage subscription is not active.")}),t.addEventListener("rise-storage-error",function(e){var t={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var t={event:"rise cache error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Image.logEvent(t,!0);var n=e.detail.error.currentTarget.status,i="There was a problem retrieving the file from Rise Cache.";404===n&&(i="The image does not exist or cannot be accessed."),RiseVision.Image.showError(i)}),t.setAttribute("fileType","image"),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("folder",e.storage.folder),t.setAttribute("env",config.STORAGE_ENV),t.go()}var o=!0,r=[],s=null;return{init:i}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.NonStorage=function(e){"use strict";function t(e){var t;o.getFile(l,function(e,i){if(i){t={event:"error",event_details:"non-storage error",error_details:i.message,file_url:e.url},RiseVision.Image.logEvent(t,!0);var o=i.message.substring(i.message.indexOf(":")+2),r="There was a problem retrieving the file from Rise Cache.";"404"===o&&(r="The image does not exist or cannot be accessed."),RiseVision.Image.showError(r)}else a?(a=!1,RiseVision.Image.onFileInit(e.url),n()):RiseVision.Image.onFileRefresh(e.url)},e)}function n(){null===s&&(s=setInterval(function(){t(!1)},r))}function i(){l=e.url&&""!==e.url?e.url:e.selector.url,t(!0)}var o=RiseVision.Common.RiseCache,r=3e5,s=null,a=!0,l="";return{init:i}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,t){"use strict";function n(){try{t.style.height=e.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function i(){if(r){for(;t.firstChild;)t.removeChild(t.firstChild);t.style.display="none",e.style.visibility="visible",r=!1}}function o(n){var i,o=document.createDocumentFragment();r?(i=t.querySelector(".message"),i.innerHTML=n):(e.style.visibility="hidden",t.style.display="block",i=document.createElement("p"),i.innerHTML=n,i.setAttribute("class","message"),o.appendChild(i),t.appendChild(o),r=!0)}var r=!1;return n(),{hide:i,show:o}},function(e,t,n){"use strict";function i(e,t){var n,i,o="",r="";Array.isArray(e)&&e.length>0&&Array.isArray(t)&&t.length>0&&("companyId"===e[0]&&(o=t[0]),"displayId"===e[1]&&(r=t[1]?t[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(o,r),"additionalParams"===e[2]&&(n=JSON.parse(t[2]),i=0!==Object.keys(n.storage).length?n.storage.fileName?"file":"folder":"file",RiseVision.Image.setAdditionalParams(n,i)))}function o(){RiseVision.Image.pause()}function r(){RiseVision.Image.play()}function s(){RiseVision.Image.stop()}function a(){e.removeEventListener("WebComponentsReady",a),l&&""!==l&&(n.rpc.register("rscmd_play_"+l,r),n.rpc.register("rscmd_pause_"+l,o),n.rpc.register("rscmd_stop_"+l,s),n.rpc.register("rsparam_set_"+l,i),n.rpc.call("","rsparam_get",null,l,["companyId","displayId","additionalParams"]))}var l=(new n.Prefs).getString("id");e.oncontextmenu=function(){return!1},t.body.onmousedown=function(){return!1},e.addEventListener("WebComponentsReady",a)}(window,document,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-3"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}();
//# sourceMappingURL=data:application/json;base64,
