(function(){function e(e){function n(n,t,r,i,o,a){for(;o>=0&&a>o;o+=e){var s=i?i[o]:o;r=t(r,n[s],s,n)}return r}return function(t,r,i,o){r=R(r,o,4);var a=!C(t)&&y.keys(t),s=(a||t).length,u=e>0?0:s-1;return arguments.length<3&&(i=t[a?a[u]:u],u+=e),n(t,r,i,a,u,s)}}function n(e){return function(n,t,r){t=b(t,r);for(var i=V(n),o=e>0?0:i-1;o>=0&&i>o;o+=e)if(t(n[o],o,n))return o;return-1}}function t(e,n,t){return function(r,i,o){var a=0,s=V(r);if("number"==typeof o)e>0?a=o>=0?o:Math.max(o+s,a):s=o>=0?Math.min(o+1,s):o+s+1;else if(t&&o&&s)return o=t(r,i),r[o]===i?o:-1;if(i!==i)return o=n(c.call(r,a,s),y.isNaN),o>=0?o+a:-1;for(o=e>0?a:s-1;o>=0&&s>o;o+=e)if(r[o]===i)return o;return-1}}function r(e,n){var t=x.length,r=e.constructor,i=y.isFunction(r)&&r.prototype||s,o="constructor";for(y.has(e,o)&&!y.contains(n,o)&&n.push(o);t--;)o=x[t],o in e&&e[o]!==i[o]&&!y.contains(n,o)&&n.push(o)}var i=this,o=i._,a=Array.prototype,s=Object.prototype,u=Function.prototype,l=a.push,c=a.slice,f=s.toString,d=s.hasOwnProperty,g=Array.isArray,m=Object.keys,p=u.bind,v=Object.create,h=function(){},y=function(e){return e instanceof y?e:this instanceof y?(this._wrapped=e,void 0):new y(e)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=y),exports._=y):i._=y,y.VERSION="1.8.3";var R=function(e,n,t){if(void 0===n)return e;switch(null==t?3:t){case 1:return function(t){return e.call(n,t)};case 2:return function(t,r){return e.call(n,t,r)};case 3:return function(t,r,i){return e.call(n,t,r,i)};case 4:return function(t,r,i,o){return e.call(n,t,r,i,o)}}return function(){return e.apply(n,arguments)}},b=function(e,n,t){return null==e?y.identity:y.isFunction(e)?R(e,n,t):y.isObject(e)?y.matcher(e):y.property(e)};y.iteratee=function(e,n){return b(e,n,1/0)};var E=function(e,n){return function(t){var r=arguments.length;if(2>r||null==t)return t;for(var i=1;r>i;i++)for(var o=arguments[i],a=e(o),s=a.length,u=0;s>u;u++){var l=a[u];n&&void 0!==t[l]||(t[l]=o[l])}return t}},I=function(e){if(!y.isObject(e))return{};if(v)return v(e);h.prototype=e;var n=new h;return h.prototype=null,n},_=function(e){return function(n){return null==n?void 0:n[e]}},w=Math.pow(2,53)-1,V=_("length"),C=function(e){var n=V(e);return"number"==typeof n&&n>=0&&w>=n};y.each=y.forEach=function(e,n,t){n=R(n,t);var r,i;if(C(e))for(r=0,i=e.length;i>r;r++)n(e[r],r,e);else{var o=y.keys(e);for(r=0,i=o.length;i>r;r++)n(e[o[r]],o[r],e)}return e},y.map=y.collect=function(e,n,t){n=b(n,t);for(var r=!C(e)&&y.keys(e),i=(r||e).length,o=Array(i),a=0;i>a;a++){var s=r?r[a]:a;o[a]=n(e[s],s,e)}return o},y.reduce=y.foldl=y.inject=e(1),y.reduceRight=y.foldr=e(-1),y.find=y.detect=function(e,n,t){var r;return r=C(e)?y.findIndex(e,n,t):y.findKey(e,n,t),void 0!==r&&-1!==r?e[r]:void 0},y.filter=y.select=function(e,n,t){var r=[];return n=b(n,t),y.each(e,function(e,t,i){n(e,t,i)&&r.push(e)}),r},y.reject=function(e,n,t){return y.filter(e,y.negate(b(n)),t)},y.every=y.all=function(e,n,t){n=b(n,t);for(var r=!C(e)&&y.keys(e),i=(r||e).length,o=0;i>o;o++){var a=r?r[o]:o;if(!n(e[a],a,e))return!1}return!0},y.some=y.any=function(e,n,t){n=b(n,t);for(var r=!C(e)&&y.keys(e),i=(r||e).length,o=0;i>o;o++){var a=r?r[o]:o;if(n(e[a],a,e))return!0}return!1},y.contains=y.includes=y.include=function(e,n,t,r){return C(e)||(e=y.values(e)),("number"!=typeof t||r)&&(t=0),y.indexOf(e,n,t)>=0},y.invoke=function(e,n){var t=c.call(arguments,2),r=y.isFunction(n);return y.map(e,function(e){var i=r?n:e[n];return null==i?i:i.apply(e,t)})},y.pluck=function(e,n){return y.map(e,y.property(n))},y.where=function(e,n){return y.filter(e,y.matcher(n))},y.findWhere=function(e,n){return y.find(e,y.matcher(n))},y.max=function(e,n,t){var r,i,o=-1/0,a=-1/0;if(null==n&&null!=e){e=C(e)?e:y.values(e);for(var s=0,u=e.length;u>s;s++)r=e[s],r>o&&(o=r)}else n=b(n,t),y.each(e,function(e,t,r){i=n(e,t,r),(i>a||i===-1/0&&o===-1/0)&&(o=e,a=i)});return o},y.min=function(e,n,t){var r,i,o=1/0,a=1/0;if(null==n&&null!=e){e=C(e)?e:y.values(e);for(var s=0,u=e.length;u>s;s++)r=e[s],o>r&&(o=r)}else n=b(n,t),y.each(e,function(e,t,r){i=n(e,t,r),(a>i||1/0===i&&1/0===o)&&(o=e,a=i)});return o},y.shuffle=function(e){for(var n,t=C(e)?e:y.values(e),r=t.length,i=Array(r),o=0;r>o;o++)n=y.random(0,o),n!==o&&(i[o]=i[n]),i[n]=t[o];return i},y.sample=function(e,n,t){return null==n||t?(C(e)||(e=y.values(e)),e[y.random(e.length-1)]):y.shuffle(e).slice(0,Math.max(0,n))},y.sortBy=function(e,n,t){return n=b(n,t),y.pluck(y.map(e,function(e,t,r){return{value:e,index:t,criteria:n(e,t,r)}}).sort(function(e,n){var t=e.criteria,r=n.criteria;if(t!==r){if(t>r||void 0===t)return 1;if(r>t||void 0===r)return-1}return e.index-n.index}),"value")};var S=function(e){return function(n,t,r){var i={};return t=b(t,r),y.each(n,function(r,o){var a=t(r,o,n);e(i,r,a)}),i}};y.groupBy=S(function(e,n,t){y.has(e,t)?e[t].push(n):e[t]=[n]}),y.indexBy=S(function(e,n,t){e[t]=n}),y.countBy=S(function(e,n,t){y.has(e,t)?e[t]++:e[t]=1}),y.toArray=function(e){return e?y.isArray(e)?c.call(e):C(e)?y.map(e,y.identity):y.values(e):[]},y.size=function(e){return null==e?0:C(e)?e.length:y.keys(e).length},y.partition=function(e,n,t){n=b(n,t);var r=[],i=[];return y.each(e,function(e,t,o){(n(e,t,o)?r:i).push(e)}),[r,i]},y.first=y.head=y.take=function(e,n,t){return null==e?void 0:null==n||t?e[0]:y.initial(e,e.length-n)},y.initial=function(e,n,t){return c.call(e,0,Math.max(0,e.length-(null==n||t?1:n)))},y.last=function(e,n,t){return null==e?void 0:null==n||t?e[e.length-1]:y.rest(e,Math.max(0,e.length-n))},y.rest=y.tail=y.drop=function(e,n,t){return c.call(e,null==n||t?1:n)},y.compact=function(e){return y.filter(e,y.identity)};var O=function(e,n,t,r){for(var i=[],o=0,a=r||0,s=V(e);s>a;a++){var u=e[a];if(C(u)&&(y.isArray(u)||y.isArguments(u))){n||(u=O(u,n,t));var l=0,c=u.length;for(i.length+=c;c>l;)i[o++]=u[l++]}else t||(i[o++]=u)}return i};y.flatten=function(e,n){return O(e,n,!1)},y.without=function(e){return y.difference(e,c.call(arguments,1))},y.uniq=y.unique=function(e,n,t,r){y.isBoolean(n)||(r=t,t=n,n=!1),null!=t&&(t=b(t,r));for(var i=[],o=[],a=0,s=V(e);s>a;a++){var u=e[a],l=t?t(u,a,e):u;n?(a&&o===l||i.push(u),o=l):t?y.contains(o,l)||(o.push(l),i.push(u)):y.contains(i,u)||i.push(u)}return i},y.union=function(){return y.uniq(O(arguments,!0,!0))},y.intersection=function(e){for(var n=[],t=arguments.length,r=0,i=V(e);i>r;r++){var o=e[r];if(!y.contains(n,o)){for(var a=1;t>a&&y.contains(arguments[a],o);a++);a===t&&n.push(o)}}return n},y.difference=function(e){var n=O(arguments,!0,!0,1);return y.filter(e,function(e){return!y.contains(n,e)})},y.zip=function(){return y.unzip(arguments)},y.unzip=function(e){for(var n=e&&y.max(e,V).length||0,t=Array(n),r=0;n>r;r++)t[r]=y.pluck(e,r);return t},y.object=function(e,n){for(var t={},r=0,i=V(e);i>r;r++)n?t[e[r]]=n[r]:t[e[r][0]]=e[r][1];return t},y.findIndex=n(1),y.findLastIndex=n(-1),y.sortedIndex=function(e,n,t,r){t=b(t,r,1);for(var i=t(n),o=0,a=V(e);a>o;){var s=Math.floor((o+a)/2);t(e[s])<i?o=s+1:a=s}return o},y.indexOf=t(1,y.findIndex,y.sortedIndex),y.lastIndexOf=t(-1,y.findLastIndex),y.range=function(e,n,t){null==n&&(n=e||0,e=0),t=t||1;for(var r=Math.max(Math.ceil((n-e)/t),0),i=Array(r),o=0;r>o;o++,e+=t)i[o]=e;return i};var T=function(e,n,t,r,i){if(!(r instanceof n))return e.apply(t,i);var o=I(e.prototype),a=e.apply(o,i);return y.isObject(a)?a:o};y.bind=function(e,n){if(p&&e.bind===p)return p.apply(e,c.call(arguments,1));if(!y.isFunction(e))throw new TypeError("Bind must be called on a function");var t=c.call(arguments,2),r=function(){return T(e,r,n,this,t.concat(c.call(arguments)))};return r},y.partial=function(e){var n=c.call(arguments,1),t=function(){for(var r=0,i=n.length,o=Array(i),a=0;i>a;a++)o[a]=n[a]===y?arguments[r++]:n[a];for(;r<arguments.length;)o.push(arguments[r++]);return T(e,t,this,this,o)};return t},y.bindAll=function(e){var n,t,r=arguments.length;if(1>=r)throw new Error("bindAll must be passed function names");for(n=1;r>n;n++)t=arguments[n],e[t]=y.bind(e[t],e);return e},y.memoize=function(e,n){var t=function(r){var i=t.cache,o=""+(n?n.apply(this,arguments):r);return y.has(i,o)||(i[o]=e.apply(this,arguments)),i[o]};return t.cache={},t},y.delay=function(e,n){var t=c.call(arguments,2);return setTimeout(function(){return e.apply(null,t)},n)},y.defer=y.partial(y.delay,y,1),y.throttle=function(e,n,t){var r,i,o,a=null,s=0;t||(t={});var u=function(){s=t.leading===!1?0:y.now(),a=null,o=e.apply(r,i),a||(r=i=null)};return function(){var l=y.now();s||t.leading!==!1||(s=l);var c=n-(l-s);return r=this,i=arguments,0>=c||c>n?(a&&(clearTimeout(a),a=null),s=l,o=e.apply(r,i),a||(r=i=null)):a||t.trailing===!1||(a=setTimeout(u,c)),o}},y.debounce=function(e,n,t){var r,i,o,a,s,u=function(){var l=y.now()-a;n>l&&l>=0?r=setTimeout(u,n-l):(r=null,t||(s=e.apply(o,i),r||(o=i=null)))};return function(){o=this,i=arguments,a=y.now();var l=t&&!r;return r||(r=setTimeout(u,n)),l&&(s=e.apply(o,i),o=i=null),s}},y.wrap=function(e,n){return y.partial(n,e)},y.negate=function(e){return function(){return!e.apply(this,arguments)}},y.compose=function(){var e=arguments,n=e.length-1;return function(){for(var t=n,r=e[n].apply(this,arguments);t--;)r=e[t].call(this,r);return r}},y.after=function(e,n){return function(){return--e<1?n.apply(this,arguments):void 0}},y.before=function(e,n){var t;return function(){return--e>0&&(t=n.apply(this,arguments)),1>=e&&(n=null),t}},y.once=y.partial(y.before,2);var A=!{toString:null}.propertyIsEnumerable("toString"),x=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];y.keys=function(e){if(!y.isObject(e))return[];if(m)return m(e);var n=[];for(var t in e)y.has(e,t)&&n.push(t);return A&&r(e,n),n},y.allKeys=function(e){if(!y.isObject(e))return[];var n=[];for(var t in e)n.push(t);return A&&r(e,n),n},y.values=function(e){for(var n=y.keys(e),t=n.length,r=Array(t),i=0;t>i;i++)r[i]=e[n[i]];return r},y.mapObject=function(e,n,t){n=b(n,t);for(var r,i=y.keys(e),o=i.length,a={},s=0;o>s;s++)r=i[s],a[r]=n(e[r],r,e);return a},y.pairs=function(e){for(var n=y.keys(e),t=n.length,r=Array(t),i=0;t>i;i++)r[i]=[n[i],e[n[i]]];return r},y.invert=function(e){for(var n={},t=y.keys(e),r=0,i=t.length;i>r;r++)n[e[t[r]]]=t[r];return n},y.functions=y.methods=function(e){var n=[];for(var t in e)y.isFunction(e[t])&&n.push(t);return n.sort()},y.extend=E(y.allKeys),y.extendOwn=y.assign=E(y.keys),y.findKey=function(e,n,t){n=b(n,t);for(var r,i=y.keys(e),o=0,a=i.length;a>o;o++)if(r=i[o],n(e[r],r,e))return r},y.pick=function(e,n,t){var r,i,o={},a=e;if(null==a)return o;y.isFunction(n)?(i=y.allKeys(a),r=R(n,t)):(i=O(arguments,!1,!1,1),r=function(e,n,t){return n in t},a=Object(a));for(var s=0,u=i.length;u>s;s++){var l=i[s],c=a[l];r(c,l,a)&&(o[l]=c)}return o},y.omit=function(e,n,t){if(y.isFunction(n))n=y.negate(n);else{var r=y.map(O(arguments,!1,!1,1),String);n=function(e,n){return!y.contains(r,n)}}return y.pick(e,n,t)},y.defaults=E(y.allKeys,!0),y.create=function(e,n){var t=I(e);return n&&y.extendOwn(t,n),t},y.clone=function(e){return y.isObject(e)?y.isArray(e)?e.slice():y.extend({},e):e},y.tap=function(e,n){return n(e),e},y.isMatch=function(e,n){var t=y.keys(n),r=t.length;if(null==e)return!r;for(var i=Object(e),o=0;r>o;o++){var a=t[o];if(n[a]!==i[a]||!(a in i))return!1}return!0};var k=function(e,n,t,r){if(e===n)return 0!==e||1/e===1/n;if(null==e||null==n)return e===n;e instanceof y&&(e=e._wrapped),n instanceof y&&(n=n._wrapped);var i=f.call(e);if(i!==f.call(n))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+e==""+n;case"[object Number]":return+e!==+e?+n!==+n:0===+e?1/+e===1/n:+e===+n;case"[object Date]":case"[object Boolean]":return+e===+n}var o="[object Array]"===i;if(!o){if("object"!=typeof e||"object"!=typeof n)return!1;var a=e.constructor,s=n.constructor;if(a!==s&&!(y.isFunction(a)&&a instanceof a&&y.isFunction(s)&&s instanceof s)&&"constructor"in e&&"constructor"in n)return!1}t=t||[],r=r||[];for(var u=t.length;u--;)if(t[u]===e)return r[u]===n;if(t.push(e),r.push(n),o){if(u=e.length,u!==n.length)return!1;for(;u--;)if(!k(e[u],n[u],t,r))return!1}else{var l,c=y.keys(e);if(u=c.length,y.keys(n).length!==u)return!1;for(;u--;)if(l=c[u],!y.has(n,l)||!k(e[l],n[l],t,r))return!1}return t.pop(),r.pop(),!0};y.isEqual=function(e,n){return k(e,n)},y.isEmpty=function(e){return null==e?!0:C(e)&&(y.isArray(e)||y.isString(e)||y.isArguments(e))?0===e.length:0===y.keys(e).length},y.isElement=function(e){return!(!e||1!==e.nodeType)},y.isArray=g||function(e){return"[object Array]"===f.call(e)},y.isObject=function(e){var n=typeof e;return"function"===n||"object"===n&&!!e},y.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(e){y["is"+e]=function(n){return f.call(n)==="[object "+e+"]"}}),y.isArguments(arguments)||(y.isArguments=function(e){return y.has(e,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(y.isFunction=function(e){return"function"==typeof e||!1}),y.isFinite=function(e){return isFinite(e)&&!isNaN(parseFloat(e))},y.isNaN=function(e){return y.isNumber(e)&&e!==+e},y.isBoolean=function(e){return e===!0||e===!1||"[object Boolean]"===f.call(e)},y.isNull=function(e){return null===e},y.isUndefined=function(e){return void 0===e},y.has=function(e,n){return null!=e&&d.call(e,n)},y.noConflict=function(){return i._=o,this},y.identity=function(e){return e},y.constant=function(e){return function(){return e}},y.noop=function(){},y.property=_,y.propertyOf=function(e){return null==e?function(){}:function(n){return e[n]}},y.matcher=y.matches=function(e){return e=y.extendOwn({},e),function(n){return y.isMatch(n,e)}},y.times=function(e,n,t){var r=Array(Math.max(0,e));n=R(n,t,1);for(var i=0;e>i;i++)r[i]=n(i);return r},y.random=function(e,n){return null==n&&(n=e,e=0),e+Math.floor(Math.random()*(n-e+1))},y.now=Date.now||function(){return(new Date).getTime()};var L={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},F=y.invert(L),N=function(e){var n=function(n){return e[n]},t="(?:"+y.keys(e).join("|")+")",r=RegExp(t),i=RegExp(t,"g");return function(e){return e=null==e?"":""+e,r.test(e)?e.replace(i,n):e}};y.escape=N(L),y.unescape=N(F),y.result=function(e,n,t){var r=null==e?void 0:e[n];return void 0===r&&(r=t),y.isFunction(r)?r.call(e):r};var j=0;y.uniqueId=function(e){var n=++j+"";return e?e+n:n},y.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var M=/(.)^/,q={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},D=/\\|'|\r|\n|\u2028|\u2029/g,P=function(e){return"\\"+q[e]};y.template=function(e,n,t){!n&&t&&(n=t),n=y.defaults({},n,y.templateSettings);var r=RegExp([(n.escape||M).source,(n.interpolate||M).source,(n.evaluate||M).source].join("|")+"|$","g"),i=0,o="__p+='";e.replace(r,function(n,t,r,a,s){return o+=e.slice(i,s).replace(D,P),i=s+n.length,t?o+="'+\n((__t=("+t+"))==null?'':_.escape(__t))+\n'":r?o+="'+\n((__t=("+r+"))==null?'':__t)+\n'":a&&(o+="';\n"+a+"\n__p+='"),n}),o+="';\n",n.variable||(o="with(obj||{}){\n"+o+"}\n"),o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{var a=new Function(n.variable||"obj","_",o)}catch(s){throw s.source=o,s}var u=function(e){return a.call(this,e,y)},l=n.variable||"obj";return u.source="function("+l+"){\n"+o+"}",u},y.chain=function(e){var n=y(e);return n._chain=!0,n};var U=function(e,n){return e._chain?y(n).chain():n};y.mixin=function(e){y.each(y.functions(e),function(n){var t=y[n]=e[n];y.prototype[n]=function(){var e=[this._wrapped];return l.apply(e,arguments),U(this,t.apply(y,e))}})},y.mixin(y),y.each(["pop","push","reverse","shift","sort","splice","unshift"],function(e){var n=a[e];y.prototype[e]=function(){var t=this._wrapped;return n.apply(t,arguments),"shift"!==e&&"splice"!==e||0!==t.length||delete t[0],U(this,t)}}),y.each(["concat","join","slice"],function(e){var n=a[e];y.prototype[e]=function(){return U(this,n.apply(this._wrapped,arguments))}}),y.prototype.value=function(){return this._wrapped},y.prototype.valueOf=y.prototype.toJSON=y.prototype.value,y.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return y})}).call(this);var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,n){var r=null;e.event?(r=e,r.file_url&&(r.file_format=t(r.file_url)),r.company_id=u,r.display_id=s,l&&(r.version=l),n(r)):n(r)}function n(){var e=new Date,n=e.getUTCFullYear(),t=e.getUTCMonth()+1,r=e.getUTCDate();return 10>t&&(t="0"+t),10>r&&(r="0"+r),n+t+r}function t(e){var n,t=/[?#&]/;return e&&"string"==typeof e?(n=e.substr(e.lastIndexOf(".")+1),t.test(n)&&(n=n.substr(0,-1!==n.indexOf("?")?n.indexOf("?"):n.length),n=n.substr(0,-1!==n.indexOf("#")?n.indexOf("#"):n.length),n=n.substr(0,-1!==n.indexOf("&")?n.indexOf("&"):n.length)),n.toLowerCase()):null}function r(e){var t={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:n(),rows:[{insertId:""}]},r=JSON.parse(JSON.stringify(t));return r.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),r.rows[0].json=JSON.parse(JSON.stringify(e)),r.rows[0].json.ts=(new Date).toISOString(),r}function i(n,t){e(t,function(e){null!==e&&RiseVision.Common.Logger.log(n,e)})}function o(e,n){u=e,s=n}function a(e){l=e}var s="",u="",l=null;return{getInsertData:r,getFileFormat:t,logEvent:i,setIds:o,setVersion:a}}(),RiseVision.Common.Logger=function(e){"use strict";function n(e){var n=new XMLHttpRequest;return new Date-l<358e4?e({}):(n.open("POST",i,!0),n.onloadend=function(){var t=JSON.parse(n.response);e({token:t.access_token,refreshedAt:new Date})},n.send(),void 0)}function t(e){return a&&u===e}function r(r,i){function f(n){var t,a,s=new XMLHttpRequest;a=o.replace("TABLE_ID",r),l=n.refreshedAt||l,c=n.token||c,t=e.getInsertData(i),s.open("POST",a,!0),s.setRequestHeader("Content-Type","application/json"),s.setRequestHeader("Authorization","Bearer "+c),i.cb&&"function"==typeof i.cb&&(s.onloadend=function(){i.cb(s.response)}),s.send(JSON.stringify(t))}if(!(!r||!i||i.hasOwnProperty("event")&&!i.event||i.hasOwnProperty("event")&&t(i.event)))return a=!0,u=i.event,setTimeout(function(){a=!1},s),n(f)}var i="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",o="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",a=!1,s=1e3,u="",l=0,c="";return{log:r}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var n=new XMLHttpRequest,t=this;e&&"function"==typeof e&&(s?n.open("GET",i,!0):n.open("GET",i+"ping?callback=_",!0),n.onreadystatechange=function(){try{if(4===n.readyState)if(o=!0,200===n.status)a=!0,e(!0,n.responseText);else{if(404===n.status)return s=!0,t.ping(e);console.debug("Rise Cache is not running"),a=!1,e(!1,null)}}catch(r){console.debug("Caught exception: ",r.description)}},n.send())}function n(e,n,t){function r(){var n,r,o;a?n=s?i+"files?url="+encodeURIComponent(e):t?i+"?url="+encodeURIComponent(e):i+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):t?n=e:(r=e.split("?"),o=1===r.length?"?":"&",n=e+o+"cb="+(new Date).getTime()),u("HEAD",n)}function u(e,t){var r=new XMLHttpRequest,i={xhr:r,url:t};a?(r.open(e,t,!0),r.addEventListener("loadend",function(){var o=r.status||0;o>=200&&300>o?n(i):"HEAD"===e?u("GET",t):n(i,new Error("The request failed with status code: "+o))}),r.send()):n(i)}if(e&&n&&"function"==typeof n)return o?r():this.ping(r)}function t(e){return e&&"function"==typeof e?o?(e(a),void 0):this.ping(function(){e(a)}):void 0}function r(e){return e&&"function"==typeof e?o?(e(s),void 0):this.ping(function(){e(s)}):void 0}var i="//localhost:9494/",o=!1,a=!1,s=!1;return{getFile:n,isRiseCacheRunning:t,isV2Running:r,ping:e}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,n){var t="font-family: "+decodeURIComponent(n.font.family).replace(/'/g,"")+"; ",r="color: "+(n.color?n.color:n.forecolor)+"; ",i="font-size: "+(-1===n.size.indexOf("px")?n.size+"px; ":n.size+"; "),o="font-weight: "+(n.bold?"bold":"normal")+"; ",a="font-style: "+(n.italic?"italic":"normal")+"; ",s="text-decoration: "+(n.underline?"underline":"none")+"; ",u="background-color: "+(n.highlightColor?n.highlightColor:n.backcolor)+";";return"."+e+" {"+t+r+i+o+a+s+u+"}"}function n(e){for(var n=document.createElement("style"),t=0,r=e.length;r>t;t++)n.appendChild(document.createTextNode(e[t]));document.head.appendChild(n)}function t(t,o){function a(){o&&"function"==typeof o&&o()}function s(){a()}var u=null,l=[],c=[],f=[];if(!t||0===t.length)return a(),void 0;t.forEach(function(t){t.class&&t.fontStyle&&n([e(t.class,t.fontStyle)])});for(var d=0;d<t.length;d++)t[d].fontStyle&&t[d].fontStyle.font.type&&"google"===t[d].fontStyle.font.type&&(u=t[d].fontStyle.font.family.split(",")[0],u=u.replace(/'/g,""),l.push(u));for(d=0;d<t.length;d++)t[d].fontStyle&&t[d].fontStyle.font.type&&"custom"===t[d].fontStyle.font.type&&(c.push(decodeURIComponent(t[d].fontStyle.font.family).replace(/'/g,"")),f.push(t[d].fontStyle.font.url.replace(/'/g,"\\'")));if(0===l.length&&0===c.length)a();else{for(var g=0;g<c.length;g+=1)r(c[g],f[g]);l.length>0?i(l,s):a()}}function r(e,n,t){var r=null,i="font-family: "+e+"; src: url('"+n+"');";t=t||document,r=t.styleSheets[0],null!==r&&r.addRule("@font-face",i)}function i(e,n){WebFont.load({google:{families:e},active:function(){n&&"function"==typeof n&&n()},inactive:function(){n&&"function"==typeof n&&n()},timeout:2e3})}function o(e){for(var n=e.length,t=[],r=0;n>r;r++)t[r]=new Image,t[r].src=e[r]}function a(e){for(var n,t=window.location.search.substring(1),r=t.split("&"),i=0;i<r.length;i++)if(n=r[i].split("="),n[0]==e)return decodeURIComponent(n[1]);return""}function s(e){var n="";switch(e){case 404:n="The file does not exist or cannot be accessed.";break;case 507:n="There is not enough disk space to save the file on Rise Cache.";break;default:n="There was a problem retrieving the file from Rise Cache."}return n}function u(e){var n=document.createElement("div");return n.innerHTML=e,n.textContent}function l(e,n){var t=new XMLHttpRequest;if(e&&n&&"function"==typeof n){t.open("HEAD",e+"?cb="+(new Date).getTime(),!1);try{t.send(),n(t.status>=200&&t.status<304)}catch(r){n(!1)}}}function c(){var e=25,n=navigator.userAgent.match(/Chrome\/(\S+)/),t=n?n[1]:0;return t&&(t=parseInt(t.substring(0,t.indexOf("."))),e>=t)?!0:!1}return{getQueryParameter:a,getFontCssStyle:e,addCSSRules:n,loadFonts:t,loadCustomFont:r,loadGoogleFonts:i,preloadImages:o,getRiseCacheErrorMessage:s,unescapeHTML:u,hasInternetConnection:l,isLegacy:c}}(),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={STORAGE_ENV:"prod",COMPONENTS_PATH:"components/"},RiseVision=RiseVision||{};RiseVision.Image={},RiseVision.Image=function(e){"use strict";function n(){e.rpc.call("","rsevent_ready",null,w.getString("id"),!0,!0,!0,!0,!0)}function t(){e.rpc.call("","rsevent_done",null,w.getString("id")),null!==x&&c(x,!0),c({event:"done",file_url:o()},!1)}function r(){clearTimeout(L),L=null}function i(){r(),L=setTimeout(function(){t()},5e3)}function o(){var e=-1;if(A&&A.length>0){if("file"===I)return A[0];if("folder"===I&&T&&T.isReady()&&(e=T.getCurrentSlide(),-1!==e))return A[e]}return null}function a(){var e,t=document.getElementById("container"),r=document.createDocumentFragment(),i=document.createElement("div");V=new RiseVision.Image.Message(document.getElementById("container"),document.getElementById("messageContainer")),V.show("Please wait while your image is downloaded."),C.background&&Object.keys(C.background).length>0&&(document.body.style.background=C.background.color),"file"===I?(i=s(),r.appendChild(i),t.appendChild(r),D=new Image,e=0!==Object.keys(C.storage).length,e?(k="storage file",S=new RiseVision.Image.StorageFile(C),S.init()):(k="custom",O=new RiseVision.Image.NonStorage(C),O.init())):"folder"===I&&(i.className="tp-banner-container",r.appendChild(i),t.appendChild(r),k="storage folder",S=new RiseVision.Image.StorageFolder(C),S.init()),n()}function s(){var e=document.createElement("div");return e.setAttribute("id","image"),e.className=C.position,e.className=C.scaleToFit?e.className+" scale-to-fit":e.className,e}function u(e){D.onload=function(){var n=document.querySelector("#container #image");n.style.backgroundImage="url('"+e+"')",q||(n.style.visibility="visible")},D.onerror=function(){c({event:"error",event_details:"image load error",file_url:e},!0)},D.src=e.replace("\\'","'")}function l(){return N}function c(e,n){n&&(x=e),RiseVision.Common.LoggerUtils.logEvent(R(),e)}function f(e){"file"===I?(A[0]=e,M=!1,V.hide(),u(A[0])):"folder"===I&&(A=e,T=new RiseVision.Image.Slider(C),T.init(e))}function d(e){"file"===I?(A[0]=e,M&&V.hide(),u(A[0])):"folder"===I&&(A=e,T.refresh(A)),F=!1,N=!1,M=!1,x=null}function g(e){M=!0,V.show(e),q||i()}function m(e,n){C=_.clone(e),I=n,C.width=w.getInt("rsW"),C.height=w.getInt("rsH"),document.getElementById("container").style.height=w.getInt("rsH")+"px",a()}function p(){V.hide(),q||T.play()}function v(){t()}function h(){var e=document.querySelector("#container #image");q=!0,r(),"folder"===I&&T&&T.isReady()?T.pause():"file"===I&&e&&(e.style.visibility="hidden")}function y(){var e=document.querySelector("#container #image");return q=!1,j||(c({event:"configuration",event_details:k},!1),j=!0),c({event:"play",file_url:o()},!1),F?(i(),void 0):M?("file"===I&&S&&S.retry(),void 0):("folder"===I&&T&&T.isReady()?T.play():"file"===I&&e&&(e.style.visibility="visible"),void 0)}function R(){return"image_events"}function b(e,n){F=!0,N="undefined"!=typeof n,V.show(e),"folder"===I&&T&&T.isReady()&&T.destroy(),q||i()}function E(){h()}var I,w=new e.Prefs,V=null,C=null,S=null,O=null,T=null,A=[],x=null,k=null,L=null,F=!1,N=!1,j=!1,M=!1,q=!0,D=null;return{hasStorageError:l,logEvent:c,onFileInit:f,onFileRefresh:d,onFileUnavailable:g,onSliderComplete:v,onSliderReady:p,pause:h,play:y,setAdditionalParams:m,getTableName:R,showError:b,stop:E}}(gadgets);var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.Message=function(e,n){"use strict";function t(){try{n.style.height=e.style.height}catch(t){console.warn("Can't initialize Message - ",t.message)}}function r(){if(o){for(;n.firstChild;)n.removeChild(n.firstChild);n.style.display="none",e.style.visibility="visible",o=!1}}function i(t){var r,i=document.createDocumentFragment();o?(r=n.querySelector(".message"),r.innerHTML=t):(e.style.visibility="hidden",n.style.display="block",r=document.createElement("p"),r.innerHTML=t,r.setAttribute("class","message"),i.appendChild(r),n.appendChild(i),o=!0)}var o=!1;return t(),{hide:r,show:i}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.Slider=function(e){"use strict";function n(){var n=document.querySelector(".tp-banner ul"),t=document.createDocumentFragment(),r=[],i=null,o=null,a="";g=p.length,p.forEach(function(n){switch(i=document.createElement("li"),o=document.createElement("img"),i.setAttribute("data-transition","fade"),i.setAttribute("data-masterspeed",500),i.setAttribute("data-delay",1e3*e.duration),o.src="",o.setAttribute("data-lazyload",n.url),e.position){case"top-left":a="left top";break;case"top-center":a="center top";break;case"top-right":a="right top";break;case"middle-left":a="left center";break;case"middle-center":a="center center";break;case"middle-right":a="right center";break;case"bottom-left":a="left bottom";break;case"bottom-center":a="center bottom";break;case"bottom-right":a="right bottom";break;default:a="left top"}o.setAttribute("data-bgposition",a),e.scaleToFit?o.setAttribute("data-bgfit","contain"):o.setAttribute("data-bgfit","normal"),i.appendChild(o),r.push(i)}),r.forEach(function(e){t.appendChild(e)}),n.appendChild(t)}function t(e){w?f():R&&(R=!1,f(),RiseVision.Image.onSliderComplete(),b&&(m&&(r(),u(v)),b=!1)),e.slideIndex===g&&(R=!0)}function r(){$("body").off("touchend"),m.off("revolution.slide.onloaded"),m.off("revolution.slide.onchange"),m.revkill(),m=null}function i(){w=!0,clearTimeout(y),y=setTimeout(function(){m.revnext(),m.revresume(),w=!1,I=!0},1e3*e.pause),o()}function o(){e.autoHide&&(clearTimeout(h),h=setTimeout(function(){$(".tp-leftarrow, .tp-rightarrow").addClass("hidearrows")},V))}function a(){m&&(R=!1,f(),r())}function s(){return m&&p&&p.length>0?m.revcurrentslide():-1}function u(r){var a=document.querySelector(".tp-banner-container"),s=document.createDocumentFragment(),u=document.createElement("div"),l=document.createElement("ul");u.setAttribute("class","tp-banner"),u.appendChild(l),s.appendChild(u),a.appendChild(s),p=_.clone(r),n(),E=!0,m=$(".tp-banner").revolution({hideThumbs:0,hideTimerBar:"on",navigationType:"none",onHoverStop:"off",startwidth:e.width,startheight:e.height}),m.on("revolution.slide.onloaded",function(){f(),E=!1,RiseVision.Image.onSliderReady()}),m.on("revolution.slide.onchange",function(e,n){t(n)}),$("body").on("touchend",".tp-banner",function(){i(),$(".tp-leftarrow, .tp-rightarrow").removeClass("hidearrows")}),$("body").on("touchend",".tp-leftarrow, .tp-rightarrow",function(){i()}),o()}function l(){return!E}function c(){m&&(e.hasOwnProperty("resume")&&!e.resume&&m.revshowslide(0),I||(m.revresume(),I=!0))}function f(){m&&I&&(m.revpause(),I=!1)}function d(e){RiseVision.Common.Utilities.preloadImages(e),v=_.clone(e),b=!0}var g=0,m=null,p=null,v=null,h=null,y=null,R=!1,b=!1,E=!0,I=!1,w=!1,V=3e3;return{getCurrentSlide:s,destroy:a,init:u,isReady:l,play:c,pause:f,refresh:d}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.StorageFile=function(e){"use strict";function n(){var n=document.querySelector("rise-storage");n.addEventListener("rise-storage-response",function(e){var n;e.detail&&e.detail.url&&(n=e.detail.url.replace("'","\\'"),r?(r=!1,RiseVision.Image.onFileInit(n)):e.detail.hasOwnProperty("changed")&&(e.detail.changed?RiseVision.Image.onFileRefresh(n):RiseVision.Image.hasStorageError()&&RiseVision.Image.onFileRefresh(e.detail.url)))}),n.addEventListener("rise-storage-api-error",function(e){var n={event:"error",event_details:"storage api error",error_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.")}),n.addEventListener("rise-storage-no-file",function(e){var n={event:"error",event_details:"storage file not found",file_url:e.detail},t=document.getElementById("image");t.style.background="",RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("The selected image does not exist or has been moved to Trash.")}),n.addEventListener("rise-storage-file-throttled",function(e){var n={event:"error",event_details:"storage file throttled",file_url:e.detail};RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("The selected image is temporarily unavailable.")}),n.addEventListener("rise-storage-subscription-expired",function(){var e={event:"error",event_details:"storage subscription expired"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("Rise Storage subscription is not active.")}),n.addEventListener("rise-storage-error",function(e){var n=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,t={event:"error",event_details:"rise storage error",error_details:"The request failed with status code: "+e.detail.error.currentTarget.status,file_url:n};
RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),n.addEventListener("rise-cache-error",function(e){var n=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,t={event:"error",event_details:"rise cache error",error_details:e.detail.error.message,file_url:n};RiseVision.Image.logEvent(t,!0);var r=0;e.detail.error.message&&(r=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var i=RiseVision.Common.Utilities.getRiseCacheErrorMessage(r);RiseVision.Image.showError(i)}),n.addEventListener("rise-cache-not-running",function(e){var n={event:"error",event_details:"rise cache not running",error_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Image.logEvent(n,!0)}),n.addEventListener("rise-cache-file-unavailable",function(){RiseVision.Image.onFileUnavailable("File is downloading")}),n.setAttribute("folder",e.storage.folder),n.setAttribute("fileName",e.storage.fileName),n.setAttribute("companyId",e.storage.companyId),n.setAttribute("env",config.STORAGE_ENV),n.go()}function t(){var e=document.querySelector("rise-storage");e&&e.go()}var r=!0;return{init:n,retry:t}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.StorageFolder=function(e){"use strict";function n(e){var n;e.detail&&(e.detail.added&&o.push({name:e.detail.name,url:e.detail.url}),e.detail.changed&&(n=_.find(o,function(n){return n.name===e.detail.name}),n.url=e.detail.url),e.detail.deleted&&(o=_.reject(o,function(n){return n.name===e.detail.name}))),o=_.sortBy(o,function(e){return e.name.toLowerCase()})}function t(e){return n(e),e.detail.added&&i?(o.length>1?(i=!1,clearTimeout(a),RiseVision.Image.onFileInit(o)):a=setTimeout(function(){i=!1,RiseVision.Image.onFileInit(o)},5e3),void 0):((!e.detail.hasOwnProperty("changed")||e.detail.changed||RiseVision.Image.hasStorageError())&&RiseVision.Image.onFileRefresh(o),void 0)}function r(){var n=document.querySelector("rise-storage");n.addEventListener("rise-storage-response",t),n.addEventListener("rise-storage-api-error",function(e){var n={event:"error",event_details:"storage api error",error_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.")}),n.addEventListener("rise-storage-empty-folder",function(){var e={event:"error",event_details:"storage folder empty"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("The selected folder does not contain any images.")}),n.addEventListener("rise-storage-no-folder",function(e){var n={event:"error",event_details:"storage folder doesn't exist",error_details:e.detail};RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("The selected folder does not exist or has been moved to Trash.")}),n.addEventListener("rise-storage-folder-invalid",function(){var e={event:"error",event_details:"storage folder format(s) invalid"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("The selected folder does not contain any supported image formats.")}),n.addEventListener("rise-storage-subscription-expired",function(){var e={event:"error",event_details:"storage subscription expired"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("Rise Storage subscription is not active.")}),n.addEventListener("rise-storage-error",function(e){var n={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),n.addEventListener("rise-cache-error",function(e){var n={event:"rise cache error",event_details:e.detail.error.message};RiseVision.Image.logEvent(n,!0);var t=0;e.detail.error.message&&(t=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var r=RiseVision.Common.Utilities.getRiseCacheErrorMessage(t);RiseVision.Image.showError(r)}),n.addEventListener("rise-cache-not-running",function(e){var n={event:"error",event_details:"rise cache not running",error_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Image.logEvent(n,!0)}),n.setAttribute("fileType","image"),n.setAttribute("companyId",e.storage.companyId),n.setAttribute("folder",e.storage.folder),n.setAttribute("env",config.STORAGE_ENV),n.go()}var i=!0,o=[],a=null;return{init:r}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.NonStorage=function(e){"use strict";function n(e){var n;i.getFile(u,function(e,r){if(r){n={event:"error",event_details:"non-storage error",error_details:r.message,file_url:e.url},RiseVision.Image.logEvent(n,!0);var i=0;r.message&&(i=+r.message.substring(r.message.indexOf(":")+2));var o=RiseVision.Common.Utilities.getRiseCacheErrorMessage(i);RiseVision.Image.showError(o)}else s?(s=!1,RiseVision.Image.onFileInit(e.url),t()):RiseVision.Image.onFileRefresh(e.url)},e)}function t(){null===a&&(a=setInterval(function(){n(!0)},o))}function r(){u=e.url&&""!==e.url?e.url:e.selector.url,n(!0)}var i=RiseVision.Common.RiseCache,o=3e5,a=null,s=!0,u="";return{init:r}},function(e,n,t){"use strict";function r(e,n){var t,r,i="",o="";Array.isArray(e)&&e.length>0&&Array.isArray(n)&&n.length>0&&("companyId"===e[0]&&(i=n[0]),"displayId"===e[1]&&(o=n[1]?n[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(i,o),"additionalParams"===e[2]&&(t=JSON.parse(n[2]),r=0!==Object.keys(t.storage).length?t.storage.fileName?"file":"folder":"file",RiseVision.Image.setAdditionalParams(t,r)))}function i(){RiseVision.Image.pause()}function o(){RiseVision.Image.play()}function a(){RiseVision.Image.stop()}function s(){u&&""!==u&&(t.rpc.register("rscmd_play_"+u,o),t.rpc.register("rscmd_pause_"+u,i),t.rpc.register("rscmd_stop_"+u,a),t.rpc.register("rsparam_set_"+u,r),t.rpc.call("","rsparam_get",null,u,["companyId","displayId","additionalParams"]))}var u=(new t.Prefs).getString("id");e.oncontextmenu=function(){return!1},n.body.onmousedown=function(){return!1},RiseVision.Common.RiseCache.isV2Running(function(t){function r(){e.removeEventListener("WebComponentsReady",r),d=!0,f&&d&&s()}function i(){c.removeEventListener("rise-storage-ready",i),f=!0,f&&d&&s()}var o=n.createDocumentFragment(),a=n.createElement("link"),u=n.createElement("script"),l=config.COMPONENTS_PATH+(t?"rise-storage-v2":"rise-storage")+"/rise-storage.html",c=n.createElement("rise-storage"),f=!1,d=!1;u.src=config.COMPONENTS_PATH+"webcomponentsjs/webcomponents-lite.min.js",e.addEventListener("WebComponentsReady",r),n.getElementsByTagName("head")[0].appendChild(u),a.setAttribute("rel","import"),a.setAttribute("href",l),n.getElementsByTagName("head")[0].appendChild(a),c.setAttribute("refresh",5),c.addEventListener("rise-storage-ready",i),o.appendChild(c),n.body.appendChild(o)})}(window,document,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-3"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)}();
//# sourceMappingURL=data:application/json;base64,
