var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,t){var i=null;e.event?(i=e,i.file_url&&(i.file_format=n(i.file_url)),i.company_id=a,i.display_id=s,t(i)):t(i)}function t(){var e=new Date,t=e.getUTCFullYear(),n=e.getUTCMonth()+1,i=e.getUTCDate();return 10>n&&(n="0"+n),10>i&&(i="0"+i),t+n+i}function n(e){var t,n=/[?#&]/;return e&&"string"==typeof e?(t=e.substr(e.lastIndexOf(".")+1),n.test(t)&&(t=t.substr(0,-1!==t.indexOf("?")?t.indexOf("?"):t.length),t=t.substr(0,-1!==t.indexOf("#")?t.indexOf("#"):t.length),t=t.substr(0,-1!==t.indexOf("&")?t.indexOf("&"):t.length)),t.toLowerCase()):null}function i(e){var n={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:t(),rows:[{insertId:""}]},i=JSON.parse(JSON.stringify(n));return i.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),i.rows[0].json=JSON.parse(JSON.stringify(e)),i.rows[0].json.ts=(new Date).toISOString(),i}function r(t,n){e(n,function(e){null!==e&&RiseVision.Common.Logger.log(t,e)})}function o(e,t){a=e,s=t}var s="",a="";return{getInsertData:i,getFileFormat:n,logEvent:r,setIds:o}}(),RiseVision.Common.Logger=function(e){"use strict";function t(e){var t=new XMLHttpRequest;return new Date-d<358e4?e({}):(t.open("POST",r,!0),t.onloadend=function(){var n=JSON.parse(t.response);e({token:n.access_token,refreshedAt:new Date})},t.send(),void 0)}function n(e){return s&&l===e}function i(i,r){function c(t){var n,s,a=new XMLHttpRequest;s=o.replace("TABLE_ID",i),d=t.refreshedAt||d,u=t.token||u,n=e.getInsertData(r),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+u),r.cb&&"function"==typeof r.cb&&(a.onloadend=function(){r.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!i||!r||r.hasOwnProperty("event")&&!r.event||r.hasOwnProperty("event")&&n(r.event)))return s=!0,l=r.event,setTimeout(function(){s=!1},a),t(c)}var r="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",o="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",d=0,u="";return{log:i}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var t=new XMLHttpRequest;e&&"function"==typeof e&&(t.open("GET",n+"ping?callback=_",!0),t.onreadystatechange=function(){try{4===t.readyState&&(i=!0,200===t.status?(r=!0,e(!0,t.responseText)):(console.debug("Rise Cache is not running"),r=!1,e(!1,null)))}catch(n){console.debug("Caught exception: ",n.description)}},t.send())}function t(e,t,o){function s(){var t,i,s;r?t=o?n+"?url="+encodeURIComponent(e):n+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):o?t=e:(i=e.split("?"),s=1===i.length?"?":"&",t=e+s+"cb="+(new Date).getTime()),a("HEAD",t)}function a(e,n){var i=new XMLHttpRequest,o={xhr:i,url:n};r?(i.open(e,n,!0),i.addEventListener("loadend",function(){var r=i.status||0;r>=200&&300>r?t(o):"HEAD"===e?a("GET",n):t(o,new Error("The request failed with status code: "+r))}),i.send()):t(o)}if(e&&t&&"function"==typeof t)return i?s():this.ping(s)}var n="//localhost:9494/",i=!1,r=!1;return{getFile:t,ping:e}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,t){var n="font-family:"+t.font.family+"; ",i="color: "+(t.color?t.color:t.forecolor)+"; ",r="font-size: "+(-1===t.size.indexOf("px")?t.size+"px; ":t.size+"; "),o="font-weight: "+(t.bold?"bold":"normal")+"; ",s="font-style: "+(t.italic?"italic":"normal")+"; ",a="text-decoration: "+(t.underline?"underline":"none")+"; ",l="background-color: "+(t.highlightColor?t.highlightColor:t.backcolor)+"; ";return"."+e+" {"+n+i+r+o+s+a+l+"}"}function t(e){for(var t=document.createElement("style"),n=0,i=e.length;i>n;n++)t.appendChild(document.createTextNode(e[n]));document.head.appendChild(t)}function n(n,o){n.forEach(function(n){n.class&&n.fontSetting&&t([e(n.class,n.fontSetting)]),n.fontSetting.font.type&&("custom"===n.fontSetting.font.type&&n.fontSetting.font.family&&n.fontSetting.font.url?i(n.fontSetting.font.family,n.fontSetting.font.url,o):"google"===n.fontSetting.font.type&&n.fontSetting.font.family&&r(n.fontSetting.font.family,o))})}function i(e,t,n){var i=null,r="font-family: "+e+"; src: url('"+t+"');";n=n||document,i=n.styleSheets[0],null!==i&&i.addRule("@font-face",r)}function r(e,t){var n=document.createElement("link");t=t||document,n.setAttribute("rel","stylesheet"),n.setAttribute("type","text/css"),n.setAttribute("href","https://fonts.googleapis.com/css?family="+e.split(",")[0]),null!==n&&t.getElementsByTagName("head")[0].appendChild(n)}function o(e){for(var t=e.length,n=[],i=0;t>i;i++)n[i]=new Image,n[i].src=e[i]}function s(e){for(var t,n=window.location.search.substring(1),i=n.split("&"),r=0;r<i.length;r++)if(t=i[r].split("="),t[0]==e)return decodeURIComponent(t[1]);return""}function a(e){var t="";switch(e){case 404:t="The file does not exist or cannot be accessed.";break;case 507:t="There is not enough disk space to save the file on Rise Cache.";break;default:t="There was a problem retrieving the file from Rise Cache."}return t}return{getQueryParameter:s,getFontCssStyle:e,addCSSRules:t,loadFonts:n,loadCustomFont:i,loadGoogleFont:r,preloadImages:o,getRiseCacheErrorMessage:a}}(),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={STORAGE_ENV:"prod"},RiseVision=RiseVision||{};RiseVision.Image={},RiseVision.Image=function(e){"use strict";function t(){e.rpc.call("","rsevent_ready",null,b.getString("id"),!0,!0,!0,!0,!0)}function n(){e.rpc.call("","rsevent_done",null,b.getString("id")),null!==L&&u(L,!0),u({event:"done",file_url:o()},!1)}function i(){clearTimeout(k),k=null}function r(){i(),k=setTimeout(function(){n()},5e3)}function o(){var e=-1;if(O&&O.length>0){if("file"===I)return O[0];if("folder"===I&&T&&T.isReady()&&(e=T.getCurrentSlide(),-1!==e))return O[e]}return null}function s(){var e,n=document.getElementById("container"),i=document.createDocumentFragment(),r=document.createElement("div");V=new RiseVision.Common.Message(document.getElementById("container"),document.getElementById("messageContainer")),V.show("Please wait while your image is downloaded."),w.background&&Object.keys(w.background).length>0&&(document.body.style.background=w.background.color),"file"===I?(r=a(),i.appendChild(r),n.appendChild(i),G=new Image,e=0!==Object.keys(w.storage).length,e?(A="storage file",C=new RiseVision.Image.StorageFile(w),C.init()):(A="custom",S=new RiseVision.Image.NonStorage(w),S.init())):"folder"===I&&(r.className="tp-banner-container",i.appendChild(r),n.appendChild(i),A="storage folder",C=new RiseVision.Image.StorageFolder(w),C.init()),t()}function a(){var e=document.createElement("div");return e.setAttribute("id","image"),e.className=w.position,e.className=w.scaleToFit?e.className+" scale-to-fit":e.className,e}function l(e){G.onload=function(){var t=document.querySelector("#container #image");t.style.backgroundImage="url('"+e+"')"},G.onerror=function(){u({event:"error",event_details:"image load error",file_url:e},!0)},G.src=e.replace("\\'","'")}function d(){return F}function u(e,t){t&&(L=e),RiseVision.Common.LoggerUtils.logEvent(R(),e)}function c(e){"file"===I?(O[0]=e,V.hide(),l(O[0])):"folder"===I&&(O=e,T=new RiseVision.Image.Slider(w),T.init(e))}function g(e){"file"===I?(O[0]=e,l(O[0])):"folder"===I&&(O=e,T.refresh(O)),N=!1,F=!1,L=null}function m(e,t){w=_.clone(e),I=t,w.width=b.getInt("rsW"),w.height=b.getInt("rsH"),document.getElementById("container").style.height=b.getInt("rsH")+"px",s()}function f(){V.hide(),q||T.play()}function v(){n()}function p(){var e=document.querySelectorAll("#container #image");if(q=!0,i(),"folder"===I&&T&&T.isReady())T.pause();else if("file"===I&&e.length>0)for(var t=0;t<e.length;t+=1)e[t].style.visibility="hidden"}function h(){var e=document.querySelectorAll("#container #image");if(q=!1,x||(u({event:"configuration",event_details:A},!1),x=!0),u({event:"play",file_url:o()},!1),N)return r(),void 0;if("folder"===I&&T&&T.isReady())T.play();else if("file"===I&&e.length>0)for(var t=0;t<e.length;t+=1)e[t].style.visibility="visible"}function R(){return"image_events"}function y(e,t){N=!0,F="undefined"!=typeof t,V.show(e),"folder"===I&&T&&T.isReady()&&T.destroy(),q||r()}function E(){p()}var I,b=new e.Prefs,V=null,w=null,C=null,S=null,T=null,O=[],L=null,A=null,k=null,N=!1,F=!1,x=!1,q=!0,G=null;return{hasStorageError:d,logEvent:u,onFileInit:c,onFileRefresh:g,onSliderComplete:v,onSliderReady:f,pause:p,play:h,setAdditionalParams:m,getTableName:R,showError:y,stop:E}}(gadgets);var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.Slider=function(e){"use strict";function t(){var t=document.querySelector(".tp-banner ul"),n=document.createDocumentFragment(),i=[],r=null,o=null,s="";m=v.length,v.forEach(function(t){switch(r=document.createElement("li"),o=document.createElement("img"),r.setAttribute("data-transition","fade"),r.setAttribute("data-masterspeed",500),r.setAttribute("data-delay",1e3*e.duration),o.src="",o.setAttribute("data-lazyload",t.url),e.position){case"top-left":s="left top";break;case"top-center":s="center top";break;case"top-right":s="right top";break;case"middle-left":s="left center";break;case"middle-center":s="center center";break;case"middle-right":s="right center";break;case"bottom-left":s="left bottom";break;case"bottom-center":s="center bottom";break;case"bottom-right":s="right bottom";break;default:s="left top"}o.setAttribute("data-bgposition",s),e.scaleToFit?o.setAttribute("data-bgfit","contain"):o.setAttribute("data-bgfit","normal"),r.appendChild(o),i.push(r)}),i.forEach(function(e){n.appendChild(e)}),t.appendChild(n)}function n(e){V?c():y&&(y=!1,c(),RiseVision.Image.onSliderComplete(),E&&(f&&(i(),l(p)),E=!1)),e.slideIndex===m&&(y=!0)}function i(){$("body").off("touchend"),f.off("revolution.slide.onloaded"),f.off("revolution.slide.onchange"),f.revkill(),f=null}function r(){V=!0,clearTimeout(R),R=setTimeout(function(){f.revnext(),f.revresume(),V=!1,b=!0},1e3*e.pause),o()}function o(){e.autoHide&&(clearTimeout(h),h=setTimeout(function(){$(".tp-leftarrow, .tp-rightarrow").addClass("hidearrows")},w))}function s(){f&&(y=!1,c(),i())}function a(){return f&&v&&v.length>0?f.revcurrentslide():-1}function l(i){var s=document.querySelector(".tp-banner-container"),a=document.createDocumentFragment(),l=document.createElement("div"),d=document.createElement("ul");l.setAttribute("class","tp-banner"),l.appendChild(d),a.appendChild(l),s.appendChild(a),v=_.clone(i),t(),I=!0,f=$(".tp-banner").revolution({hideThumbs:0,hideTimerBar:"on",navigationType:"none",onHoverStop:"off",startwidth:e.width,startheight:e.height}),f.on("revolution.slide.onloaded",function(){c(),I=!1,RiseVision.Image.onSliderReady()}),f.on("revolution.slide.onchange",function(e,t){n(t)}),$("body").on("touchend",".tp-banner",function(){r(),$(".tp-leftarrow, .tp-rightarrow").removeClass("hidearrows")}),$("body").on("touchend",".tp-leftarrow, .tp-rightarrow",function(){r()}),o()}function d(){return!I}function u(){f&&(e.hasOwnProperty("resume")&&!e.resume&&f.revshowslide(0),b||(f.revresume(),b=!0))}function c(){f&&b&&(f.revpause(),b=!1)}function g(e){RiseVision.Common.Utilities.preloadImages(e),p=_.clone(e),E=!0}var m=0,f=null,v=null,p=null,h=null,R=null,y=!1,E=!1,I=!0,b=!1,V=!1,w=3e3;return{getCurrentSlide:a,destroy:s,init:l,isReady:d,play:u,pause:c,refresh:g}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.StorageFile=function(e){"use strict";function t(){var t=document.querySelector("rise-storage");t.addEventListener("rise-storage-response",function(e){var t;e.detail&&e.detail.url&&(t=e.detail.url.replace("'","\\'"),n?(n=!1,RiseVision.Image.onFileInit(t)):e.detail.hasOwnProperty("changed")&&(e.detail.changed?RiseVision.Image.onFileRefresh(t):RiseVision.Image.hasStorageError()&&RiseVision.Image.onFileRefresh(e.detail.url)))}),t.addEventListener("rise-storage-api-error",function(e){var t={event:"error",event_details:"storage api error",error_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.")}),t.addEventListener("rise-storage-no-file",function(e){var t={event:"error",event_details:"storage file not found",file_url:e.detail},n=document.getElementById("image");n.style.background="",RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected image does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-file-throttled",function(e){var t={event:"error",event_details:"storage file throttled",file_url:e.detail};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected image is temporarily unavailable.")}),t.addEventListener("rise-storage-subscription-expired",function(){var e={event:"error",event_details:"storage subscription expired"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("Rise Storage subscription is not active.")}),t.addEventListener("rise-storage-error",function(e){var t=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,n={event:"error",event_details:"rise storage error",error_details:"The request failed with status code: "+e.detail.error.currentTarget.status,file_url:t};RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var t=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,n={event:"error",event_details:"rise cache error",error_details:e.detail.error.message,file_url:t};RiseVision.Image.logEvent(n,!0);var i=0;e.detail.error.message&&(i=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var r=RiseVision.Common.Utilities.getRiseCacheErrorMessage(i);RiseVision.Image.showError(r)}),t.addEventListener("rise-cache-not-running",function(e){var t={event:"error",event_details:"rise cache not running",error_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Image.logEvent(t,!0)}),t.setAttribute("folder",e.storage.folder),t.setAttribute("fileName",e.storage.fileName),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("env",config.STORAGE_ENV),t.go()}var n=!0;return{init:t}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.StorageFolder=function(e){"use strict";function t(e){var t;e.detail&&(e.detail.added&&o.push({name:e.detail.name,url:e.detail.url}),e.detail.changed&&(t=_.find(o,function(t){return t.name===e.detail.name}),t.url=e.detail.url),e.detail.deleted&&(o=_.reject(o,function(t){return t.name===e.detail.name}))),o=_.sortBy(o,function(e){return e.name.toLowerCase()})}function n(e){return t(e),e.detail.added&&r?(o.length>1?(r=!1,clearTimeout(s),RiseVision.Image.onFileInit(o)):s=setTimeout(function(){r=!1,RiseVision.Image.onFileInit(o)},5e3),void 0):((!e.detail.hasOwnProperty("changed")||e.detail.changed||RiseVision.Image.hasStorageError())&&RiseVision.Image.onFileRefresh(o),void 0)}function i(){var t=document.querySelector("rise-storage");t.addEventListener("rise-storage-response",n),t.addEventListener("rise-storage-api-error",function(e){var t={event:"error",event_details:"storage api error",error_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.")}),t.addEventListener("rise-storage-empty-folder",function(){var e={event:"error",event_details:"storage folder empty"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("The selected folder does not contain any images.")}),t.addEventListener("rise-storage-no-folder",function(e){var t={event:"error",event_details:"storage folder doesn't exist",error_details:e.detail};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected folder does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-folder-invalid",function(){var e={event:"error",event_details:"storage folder format(s) invalid"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("The selected folder does not contain any supported image formats.")}),t.addEventListener("rise-storage-subscription-expired",function(){var e={event:"error",event_details:"storage subscription expired"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("Rise Storage subscription is not active.")}),t.addEventListener("rise-storage-error",function(e){var t={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var t={event:"rise cache error",event_details:e.detail.error.message};RiseVision.Image.logEvent(t,!0);var n=0;e.detail.error.message&&(n=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var i=RiseVision.Common.Utilities.getRiseCacheErrorMessage(n);RiseVision.Image.showError(i)}),t.addEventListener("rise-cache-not-running",function(e){var t={event:"error",event_details:"rise cache not running",error_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Image.logEvent(t,!0)}),t.setAttribute("fileType","image"),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("folder",e.storage.folder),t.setAttribute("env",config.STORAGE_ENV),t.go()}var r=!0,o=[],s=null;return{init:i}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.NonStorage=function(e){"use strict";function t(e){var t;r.getFile(l,function(e,i){if(i){t={event:"error",event_details:"non-storage error",error_details:i.message,file_url:e.url},RiseVision.Image.logEvent(t,!0);var r=0;i.message&&(r=+i.message.substring(i.message.indexOf(":")+2));var o=RiseVision.Common.Utilities.getRiseCacheErrorMessage(r);RiseVision.Image.showError(o)}else a?(a=!1,RiseVision.Image.onFileInit(e.url),n()):RiseVision.Image.onFileRefresh(e.url)},e)}function n(){null===s&&(s=setInterval(function(){t(!0)},o))}function i(){l=e.url&&""!==e.url?e.url:e.selector.url,t(!0)}var r=RiseVision.Common.RiseCache,o=3e5,s=null,a=!0,l="";return{init:i}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,t){"use strict";function n(){try{t.style.height=e.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function i(){if(o){for(;t.firstChild;)t.removeChild(t.firstChild);t.style.display="none",e.style.visibility="visible",o=!1}}function r(n){var i,r=document.createDocumentFragment();o?(i=t.querySelector(".message"),i.innerHTML=n):(e.style.visibility="hidden",t.style.display="block",i=document.createElement("p"),i.innerHTML=n,i.setAttribute("class","message"),r.appendChild(i),t.appendChild(r),o=!0)}var o=!1;return n(),{hide:i,show:r}},function(e,t,n){"use strict";function i(e,t){var n,i,r="",o="";Array.isArray(e)&&e.length>0&&Array.isArray(t)&&t.length>0&&("companyId"===e[0]&&(r=t[0]),"displayId"===e[1]&&(o=t[1]?t[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(r,o),"additionalParams"===e[2]&&(n=JSON.parse(t[2]),i=0!==Object.keys(n.storage).length?n.storage.fileName?"file":"folder":"file",RiseVision.Image.setAdditionalParams(n,i)))}function r(){RiseVision.Image.pause()}function o(){RiseVision.Image.play()}function s(){RiseVision.Image.stop()}function a(){e.removeEventListener("WebComponentsReady",a),l&&""!==l&&(n.rpc.register("rscmd_play_"+l,o),n.rpc.register("rscmd_pause_"+l,r),n.rpc.register("rscmd_stop_"+l,s),n.rpc.register("rsparam_set_"+l,i),n.rpc.call("","rsparam_get",null,l,["companyId","displayId","additionalParams"]))}var l=(new n.Prefs).getString("id");e.oncontextmenu=function(){return!1},t.body.onmousedown=function(){return!1},e.addEventListener("WebComponentsReady",a)}(window,document,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-3"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}();
//# sourceMappingURL=data:application/json;base64,
