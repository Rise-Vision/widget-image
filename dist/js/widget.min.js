if("undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json"),"undefined"==typeof config)var config={STORAGE_ENV:"prod"};var RiseVision=RiseVision||{};RiseVision.Image={},RiseVision.Image=function(e){"use strict";function t(){var e,t=null;c.className=m.position,c.className=m.scaleToFit?c.className+" scale-to-fit":c.className,document.body.style.background=m.background.color,0===Object.keys(m.storage).length?(e=m.url.split("?"),p=1===e.length?"?":"&",s(),r()):(d=new RiseVision.Common.Message(document.getElementById("container"),document.getElementById("messageContainer")),d.show("Please wait while your image is downloaded."),t=new RiseVision.Image.Storage(m),t.init(),r())}function n(){d.show("The selected image does not exist.")}function i(){setTimeout(function(){s()},v)}function s(){f=m.url+p+"cb="+(new Date).getTime(),c.style.backgroundImage="url("+f+")",i()}function o(e,n){Array.isArray(e)&&e.length>0&&"additionalParams"===e[0]&&Array.isArray(n)&&n.length>0&&(m=JSON.parse(n[0]),document.getElementById("container").style.height=g.getInt("rsH")+"px",t())}function r(){e.rpc.call("","rsevent_ready",null,g.getString("id"),!0,!1,!1,!0,!1)}function a(){RiseVision.Common.LoggerUtils.logEvent(u(),{event:"play",file_url:f})}function l(e){f=e,d.hide()}function u(){return"image_events"}var g=new e.Prefs,c=document.getElementById("image"),d=null,m=null,f=null,p="",v=3e5;return{getAdditionalParams:o,getTableName:u,noStorageFile:n,play:a,storageFileUpdate:l}}(gadgets);var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,t){"use strict";function n(){try{t.style.height=e.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function i(){if(o){for(;t.firstChild;)t.removeChild(t.firstChild);t.style.display="none",e.style.visibility="visible",o=!1}}function s(n){var i,s=document.createDocumentFragment();o?(i=t.querySelector(".message"),i.innerHTML=n):(e.style.visibility="hidden",t.style.display="block",i=document.createElement("p"),i.innerHTML=n,i.setAttribute("class","message"),s.appendChild(i),t.appendChild(s),o=!0)}var o=!1;return n(),{hide:i,show:s}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(e){"use strict";function t(e,t){Array.isArray(e)&&e.length>0&&Array.isArray(t)&&t.length>0&&("companyId"===e[0]&&(g=t[0]),"displayId"===e[1]&&(u=t[1]?t[1]:"preview"),c(g,u))}function n(e,t){var n=null;e.event?(n={},n.event=e.event,e.event_details&&(n.event_details=e.event_details),e.file_url&&(n.file_url=e.file_url,n.file_format=s(e.file_url)),i(function(e,i){n.company_id=e,n.display_id=i,t(n)})):t(n)}function i(n){n&&"function"==typeof n&&(c=n,g&&u?c(g,u):l&&""!==l&&(e.rpc.register("rsparam_set_"+l,t),e.rpc.call("","rsparam_get",null,l,["companyId","displayId"])))}function s(e){var t,n=/[?#&]/;return e&&"string"==typeof e?(t=e.substr(e.lastIndexOf(".")+1),n.test(t)&&(t=t.substr(0,-1!==t.indexOf("?")?t.indexOf("?"):t.length),t=t.substr(0,-1!==t.indexOf("#")?t.indexOf("#"):t.length),t=t.substr(0,-1!==t.indexOf("&")?t.indexOf("&"):t.length)),t.toLowerCase()):null}function o(e){var t=JSON.parse(JSON.stringify(d));return t.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),t.rows[0].json=JSON.parse(JSON.stringify(e)),t.rows[0].json.ts=(new Date).toISOString(),t}function r(e){var t=new Date,n=t.getUTCFullYear(),i=t.getUTCMonth()+1,s=t.getUTCDate();return 10>i&&(i="0"+i),10>s&&(s="0"+s),e+n+i+s}function a(e,t){n(t,function(t){null!==t&&RiseVision.Common.Logger.log(e,t)})}var l=(new e.Prefs).getString("id"),u="",g="",c=null,d={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,rows:[{insertId:""}]};return{getIds:i,getInsertData:o,getFileFormat:s,getTable:r,logEvent:a}}(gadgets),RiseVision.Common.Logger=function(e){"use strict";function t(e){var t=new XMLHttpRequest;return new Date-u<358e4?e({}):(t.open("POST",s,!0),t.onloadend=function(){var n=JSON.parse(t.response);e({token:n.access_token,refreshedAt:new Date})},t.send(),void 0)}function n(e){return r&&l===e}function i(i,s){function c(t){var n,r,a=new XMLHttpRequest;r=o.replace("TABLE_ID",e.getTable(i)),u=t.refreshedAt||u,g=t.token||g,n=e.getInsertData(s),a.open("POST",r,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+g),s.cb&&"function"==typeof s.cb&&(a.onloadend=function(){s.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!i||!s||s.hasOwnProperty("event")&&!s.event||s.hasOwnProperty("event")&&n(s.event)))return r=!0,l=s.event,setTimeout(function(){r=!1},a),t(c)}var s="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",o="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",r=!1,a=1e3,l="",u=0,g="";return{log:i}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.Storage=function(e){"use strict";function t(){var t=document.querySelector("rise-storage"),n=document.getElementById("image"),i=RiseVision.Image.getTableName(),s="";t.addEventListener("rise-storage-response",function(e){e.detail&&e.detail.url&&(s=e.detail.url.replace("'","\\'"),n.style.backgroundImage="url('"+s+"')",RiseVision.Image.storageFileUpdate(s))}),t.addEventListener("rise-storage-no-file",function(e){var t={event:"error",event_details:"storage file not found",file_url:e.detail};n.style.background="",RiseVision.Common.LoggerUtils.logEvent(i,t),RiseVision.Image.noStorageFile()}),t.addEventListener("rise-storage-file-throttled",function(e){var t={event:"error",event_details:"storage file throttled",file_url:e.detail};RiseVision.Common.LoggerUtils.logEvent(i,t)}),t.addEventListener("rise-storage-error",function(e){var t=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,n={event:"error",event_details:"storage error",file_url:t};RiseVision.Common.LoggerUtils.logEvent(i,n)}),t.addEventListener("rise-cache-error",function(e){var t=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,n={event:"error",event_details:"cache error",file_url:t};RiseVision.Common.LoggerUtils.logEvent(i,n)}),t.setAttribute("folder",e.storage.folder),t.setAttribute("fileName",e.storage.fileName),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("env",config.STORAGE_ENV),t.go()}return{init:t}},function(e,t,n){"use strict";function i(){RiseVision.Image.play()}var s=(new n.Prefs).getString("id");e.oncontextmenu=function(){return!1},t.body.onmousedown=function(){return!1},e.addEventListener("WebComponentsReady",function(){s&&""!==s&&(n.rpc.register("rscmd_play_"+s,i),n.rpc.register("rsparam_set_"+s,RiseVision.Image.getAdditionalParams),n.rpc.call("","rsparam_get",null,s,["additionalParams"]))})}(window,document,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-3"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}();
//# sourceMappingURL=data:application/json;base64,
