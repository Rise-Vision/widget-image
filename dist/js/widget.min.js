var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(e){"use strict";function t(e,t){Array.isArray(e)&&e.length>0&&Array.isArray(t)&&t.length>0&&("companyId"===e[0]&&(d=t[0]),"displayId"===e[1]&&(u=t[1]?t[1]:"preview"),c(d,u))}function n(e,t){var n=null;e.event?(n=e,n.file_url&&(n.file_format=o(n.file_url)),i(function(e,i){n.company_id=e,n.display_id=i,t(n)})):t(n)}function i(n){n&&"function"==typeof n&&(c=n,d&&u?c(d,u):l&&""!==l&&(e.rpc.register("rsparam_set_"+l,t),e.rpc.call("","rsparam_get",null,l,["companyId","displayId"])))}function o(e){var t,n=/[?#&]/;return e&&"string"==typeof e?(t=e.substr(e.lastIndexOf(".")+1),n.test(t)&&(t=t.substr(0,-1!==t.indexOf("?")?t.indexOf("?"):t.length),t=t.substr(0,-1!==t.indexOf("#")?t.indexOf("#"):t.length),t=t.substr(0,-1!==t.indexOf("&")?t.indexOf("&"):t.length)),t.toLowerCase()):null}function r(e){var t=JSON.parse(JSON.stringify(g));return t.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),t.rows[0].json=JSON.parse(JSON.stringify(e)),t.rows[0].json.ts=(new Date).toISOString(),t}function s(e){var t=new Date,n=t.getUTCFullYear(),i=t.getUTCMonth()+1,o=t.getUTCDate();return 10>i&&(i="0"+i),10>o&&(o="0"+o),e+n+i+o}function a(e,t){n(t,function(t){null!==t&&RiseVision.Common.Logger.log(e,t)})}var l=(new e.Prefs).getString("id"),u="",d="",c=null,g={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,rows:[{insertId:""}]};return{getIds:i,getInsertData:r,getFileFormat:o,getTable:s,logEvent:a}}(gadgets),RiseVision.Common.Logger=function(e){"use strict";function t(e){var t=new XMLHttpRequest;return new Date-u<358e4?e({}):(t.open("POST",o,!0),t.onloadend=function(){var n=JSON.parse(t.response);e({token:n.access_token,refreshedAt:new Date})},t.send(),void 0)}function n(e){return s&&l===e}function i(i,o){function c(t){var n,s,a=new XMLHttpRequest;s=r.replace("TABLE_ID",e.getTable(i)),u=t.refreshedAt||u,d=t.token||d,n=e.getInsertData(o),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+d),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!i||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&n(o.event)))return s=!0,l=o.event,setTimeout(function(){s=!1},a),t(c)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",u=0,d="";return{log:i}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var t=new XMLHttpRequest;e&&"function"==typeof e&&(t.open("GET",n+"ping?callback=_",!0),t.onreadystatechange=function(){try{4===t.readyState&&(i=!0,200===t.status?(o=!0,e(!0,t.responseText)):(console.debug("Rise Cache is not running"),o=!1,e(!1,null)))}catch(n){console.debug("Caught exception: ",n.description)}},t.send())}function t(e,t,r){function s(t){var i,o,s;t?i=r?n+"?url="+encodeURIComponent(e):n+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):r?i=e:(o=e.split("?"),s=1===o.length?"?":"&",i=e+s+"cb="+(new Date).getTime()),a("HEAD",i)}function a(e,n){var i=new XMLHttpRequest,r={xhr:i,url:n};i.open(e,n,!0),i.addEventListener("loadend",function(){var s=i.status||0;s>=200&&300>s?t(r):"HEAD"===e?a("GET",n):o?t(r,new Error("The request failed with status code: "+s)):t(r)}),i.send()}if(e&&t&&"function"==typeof t)return i?s(o):this.ping(s)}var n="http://localhost:9494/",i=!1,o=!1;return{getFile:t,ping:e}}();var RiseVision=RiseVision||{};if(RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,t){var n="font-family:"+t.font.family+"; ",i="color: "+t.color+"; ",o="font-size: "+t.size+"px; ",r="font-weight: "+(t.bold?"bold":"normal")+"; ",s="font-style: "+(t.italic?"italic":"normal")+"; ",a="text-decoration: "+(t.underline?"underline":"none")+"; ",l="background-color: "+t.highlightColor+"; ";return"."+e+" {"+n+i+o+r+s+a+l+"}"}function t(e){for(var t=document.createElement("style"),n=0,i=e.length;i>n;n++)t.appendChild(document.createTextNode(e[n]));document.head.appendChild(t)}function n(n,r){n.forEach(function(n){n.class&&n.fontSetting&&t([e(n.class,n.fontSetting)]),n.fontSetting.font.type&&("custom"===n.fontSetting.font.type&&n.fontSetting.font.family&&n.fontSetting.font.url?i(n.fontSetting.font.family,n.fontSetting.font.url,r):"google"===n.fontSetting.font.type&&n.fontSetting.font.family&&o(n.fontSetting.font.family,r))})}function i(e,t,n){var i=null,o="font-family: "+e+"; src: url('"+t+"');";n=n||document,i=n.styleSheets[0],null!==i&&i.addRule("@font-face",o)}function o(e,t){var n=document.createElement("link");t=t||document,n.setAttribute("rel","stylesheet"),n.setAttribute("type","text/css"),n.setAttribute("href","https://fonts.googleapis.com/css?family="+e),null!==n&&t.getElementsByTagName("head")[0].appendChild(n)}function r(e){for(var t=e.length,n=[],i=0;t>i;i++)n[i]=new Image,n[i].src=e[i]}function s(e){for(var t,n=window.location.search.substring(1),i=n.split("&"),o=0;o<i.length;o++)if(t=i[o].split("="),t[0]==e)return decodeURIComponent(t[1]);return""}return{getQueryParameter:s,getFontCssStyle:e,addCSSRules:t,loadFonts:n,loadCustomFont:i,loadGoogleFont:o,preloadImages:r}}(),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json"),"undefined"==typeof config)var config={STORAGE_ENV:"prod"};var RiseVision=RiseVision||{};RiseVision.Image={},RiseVision.Image=function(e){"use strict";function t(){e.rpc.call("","rsevent_ready",null,E.getString("id"),!0,!0,!0,!0,!0)}function n(){e.rpc.call("","rsevent_done",null,E.getString("id")),null!==O&&u(O,!0),u({event:"done",file_url:r()},!1)}function i(){clearTimeout(A),A=null}function o(){i(),A=setTimeout(function(){n()},5e3)}function r(){var e=-1;if(S&&S.length>0){if("file"===I)return S[0];if("folder"===I&&T&&T.isReady()&&(e=T.getCurrentSlide(),-1!==e))return S[e]}return null}function s(){var e,n=document.getElementById("container"),i=document.createDocumentFragment(),o=document.createElement("div"),r=null;V=new RiseVision.Common.Message(document.getElementById("container"),document.getElementById("messageContainer")),V.show("Please wait while your image is downloaded."),b.background&&Object.keys(b.background).length>0&&(document.body.style.background=b.background.color),"file"===I?(o.setAttribute("id","image"),o.className=b.position,o.className=b.scaleToFit?o.className+" scale-to-fit":o.className,i.appendChild(o),n.appendChild(i),e=0!==Object.keys(b.storage).length,e?(r="storage file",w=new RiseVision.Image.StorageFile(b),w.init()):(r="custom",C=new RiseVision.Image.NonStorage(b),C.init())):"folder"===I&&(o.className="tp-banner-container",i.appendChild(o),n.appendChild(i),r="storage folder",w=new RiseVision.Image.StorageFolder(b),w.init()),RiseVision.Common.LoggerUtils.logEvent(v(),{event:"configuration",event_details:r}),t()}function a(e){var t=document.querySelector("#container #image");t.style.backgroundImage="url("+e+")"}function l(){return k}function u(e,t){t&&(O=e),RiseVision.Common.LoggerUtils.logEvent(v(),e)}function d(e){"file"===I?(S[0]=e,V.hide(),a(S[0])):"folder"===I&&(S=e,T=new RiseVision.Image.Slider(b),T.init(e))}function c(e){"file"===I?(S[0]=e,a(S[0])):"folder"===I&&(S=e,T.refresh(S)),L=!1,k=!1,O=null}function g(e,t){b=_.clone(e),I=t,b.width=E.getInt("rsW"),b.height=E.getInt("rsH"),document.getElementById("container").style.height=E.getInt("rsH")+"px",s()}function f(){V.hide(),N||T.play()}function m(){n()}function p(){N=!0,i(),"folder"===I&&T&&T.isReady()&&T.pause()}function h(){return N=!1,u({event:"play",file_url:r()},!1),L?(o(),void 0):("folder"===I&&T&&T.isReady()&&T.play(),void 0)}function v(){return"image_events"}function R(e,t){L=!0,k="undefined"!=typeof t,V.show(e),"folder"===I&&T&&T.isReady()&&T.destroy(),N||o()}function y(){p()}var I,E=new e.Prefs,V=null,b=null,w=null,C=null,T=null,S=[],O=null,A=null,L=!1,N=!0,k=!1;return{hasStorageError:l,logEvent:u,onFileInit:d,onFileRefresh:c,onSliderComplete:m,onSliderReady:f,pause:p,play:h,setAdditionalParams:g,getTableName:v,showError:R,stop:y}}(gadgets);var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.Slider=function(e){"use strict";function t(){var t=document.querySelector(".tp-banner ul"),n=document.createDocumentFragment(),i=[],o=null,r=null,s="";f=p.length,p.forEach(function(t){switch(o=document.createElement("li"),r=document.createElement("img"),o.setAttribute("data-transition","fade"),o.setAttribute("data-masterspeed",500),o.setAttribute("data-delay",1e3*e.duration),r.src=t.url,e.position){case"top-left":s="left top";break;case"top-center":s="center top";break;case"top-right":s="right top";break;case"middle-left":s="left center";break;case"middle-center":s="center center";break;case"middle-right":s="right center";break;case"bottom-left":s="left bottom";break;case"bottom-center":s="center bottom";break;case"bottom-right":s="right bottom";break;default:s="left top"}r.setAttribute("data-bgposition",s),e.scaleToFit?r.setAttribute("data-bgfit","contain"):r.setAttribute("data-bgfit","normal"),o.appendChild(r),i.push(o)}),i.forEach(function(e){n.appendChild(e)}),t.appendChild(n)}function n(e){b?c():y&&(y=!1,c(),RiseVision.Image.onSliderComplete(),I&&(m&&(i(),l(h)),I=!1)),e.slideIndex===f&&(y=!0)}function i(){$("body").off("touchend"),m.off("revolution.slide.onloaded"),m.off("revolution.slide.onchange"),m.revkill(),m=null}function o(){b=!0,clearTimeout(R),R=setTimeout(function(){m.revnext(),m.revresume(),b=!1,V=!0},1e3*e.pause),r()}function r(){e.autoHide&&(clearTimeout(v),v=setTimeout(function(){$(".tp-leftarrow, .tp-rightarrow").addClass("hidearrows")},w))}function s(){m&&(y=!1,c(),i())}function a(){return m&&p&&p.length>0?m.revcurrentslide():-1}function l(i){var s=document.querySelector(".tp-banner-container"),a=document.createDocumentFragment(),l=document.createElement("div"),u=document.createElement("ul");l.setAttribute("class","tp-banner"),l.appendChild(u),a.appendChild(l),s.appendChild(a),p=_.clone(i),t(),E=!0,m=$(".tp-banner").revolution({hideThumbs:0,hideTimerBar:"on",navigationType:"none",onHoverStop:"off",startwidth:e.width,startheight:e.height}),m.on("revolution.slide.onloaded",function(){c(),E=!1,RiseVision.Image.onSliderReady()}),m.on("revolution.slide.onchange",function(e,t){n(t)}),$("body").on("touchend",".tp-banner",function(){o(),$(".tp-leftarrow, .tp-rightarrow").removeClass("hidearrows")}),$("body").on("touchend",".tp-leftarrow, .tp-rightarrow",function(){o()}),r()}function u(){return!E}function d(){m&&(e.hasOwnProperty("resume")&&!e.resume&&m.revshowslide(0),V||(m.revresume(),V=!0))}function c(){m&&V&&(m.revpause(),V=!1)}function g(e){RiseVision.Common.Utilities.preloadImages(e),h=_.clone(e),I=!0}var f=0,m=null,p=null,h=null,v=null,R=null,y=!1,I=!1,E=!0,V=!1,b=!1,w=3e3;return{getCurrentSlide:a,destroy:s,init:l,isReady:u,play:d,pause:c,refresh:g}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.StorageFile=function(e){"use strict";function t(){var t=document.querySelector("rise-storage");t.addEventListener("rise-storage-response",function(e){var t;e.detail&&e.detail.url&&(t=e.detail.url.replace("'","\\'"),n?(n=!1,RiseVision.Image.onFileInit(t)):e.detail.hasOwnProperty("changed")&&(e.detail.changed?RiseVision.Image.onFileRefresh(t):RiseVision.Image.hasStorageError()&&RiseVision.Image.onFileRefresh(e.detail.url)))}),t.addEventListener("rise-storage-no-file",function(e){var t={event:"error",event_details:"storage file not found",file_url:e.detail},n=document.getElementById("image");n.style.background="",RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected image does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-file-throttled",function(e){var t={event:"error",event_details:"storage file throttled",file_url:e.detail};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected image is temporarily unavailable.")}),t.addEventListener("rise-storage-error",function(e){var t=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,n={event:"error",event_details:"rise storage error",error_details:"The request failed with status code: "+e.detail.error.currentTarget.status,file_url:t};RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var t=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,n={event:"error",event_details:"rise cache error",error_details:"The request failed with status code: "+e.detail.error.currentTarget.status,file_url:t};RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("There was a problem retrieving the file from Rise Cache.")}),t.setAttribute("folder",e.storage.folder),t.setAttribute("fileName",e.storage.fileName),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("env",config.STORAGE_ENV),t.go()}var n=!0;return{init:t}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.StorageFolder=function(e){"use strict";function t(e){var t;e.detail&&(e.detail.added&&r.push({name:e.detail.name,url:e.detail.url}),e.detail.changed&&(t=_.find(r,function(t){return t.name===e.detail.name}),t.url=e.detail.url),e.detail.deleted&&(r=_.reject(r,function(t){return t.name===e.detail.name}))),r=_.sortBy(r,function(e){return e.name.toLowerCase()})}function n(e){return t(e),e.detail.added&&o?(r.length>1?(o=!1,clearTimeout(s),RiseVision.Image.onFileInit(r)):s=setTimeout(function(){o=!1,RiseVision.Image.onFileInit(r)},5e3),void 0):((!e.detail.hasOwnProperty("changed")||e.detail.changed||RiseVision.Image.hasStorageError())&&RiseVision.Image.onFileRefresh(r),void 0)}function i(){var t=document.querySelector("rise-storage");t.addEventListener("rise-storage-response",n),t.addEventListener("rise-storage-empty-folder",function(){var e={event:"error",event_details:"storage folder empty"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("The selected folder does not contain any images.")}),t.addEventListener("rise-storage-no-folder",function(e){var t={event:"error",event_details:"storage folder doesn't exist",error_details:e.detail};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected folder does not exist.")}),t.addEventListener("rise-storage-folder-invalid",function(){var e={event:"storage folder format(s) invalid"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("The selected folder does not contain any supported image formats.")}),t.addEventListener("rise-storage-error",function(e){var t={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var t={event:"rise cache error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("There was a problem retrieving the file from Rise Cache.")}),t.setAttribute("fileType","image"),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("folder",e.storage.folder),t.setAttribute("env",config.STORAGE_ENV),t.go()}var o=!0,r=[],s=null;return{init:i}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.NonStorage=function(e){"use strict";function t(e){var t;o.getFile(l,function(e,i){i?(t={event:"error",event_details:"non-storage error",error_details:i.message,file_url:e.url},RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("There was a problem retrieving the file from Rise Cache.")):a?(a=!1,RiseVision.Image.onFileInit(e.url),n()):RiseVision.Image.onFileRefresh(e.url)},e)}function n(){null===s&&(s=setInterval(function(){t(!1)},r))}function i(){l=e.url&&""!==e.url?e.url:e.selector.url,t(!0)}var o=RiseVision.Common.RiseCache,r=3e5,s=null,a=!0,l="";return{init:i}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,t){"use strict";function n(){try{t.style.height=e.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function i(){if(r){for(;t.firstChild;)t.removeChild(t.firstChild);t.style.display="none",e.style.visibility="visible",r=!1}}function o(n){var i,o=document.createDocumentFragment();r?(i=t.querySelector(".message"),i.innerHTML=n):(e.style.visibility="hidden",t.style.display="block",i=document.createElement("p"),i.innerHTML=n,i.setAttribute("class","message"),o.appendChild(i),t.appendChild(o),r=!0)}var r=!1;return n(),{hide:i,show:o}},function(e,t,n){"use strict";function i(e,t){var n,i;Array.isArray(e)&&e.length>0&&"additionalParams"===e[0]&&Array.isArray(t)&&t.length>0&&(n=JSON.parse(t[0]),i=0!==Object.keys(n.storage).length?n.storage.fileName?"file":"folder":"file",RiseVision.Image.setAdditionalParams(n,i))}function o(){RiseVision.Image.pause()}function r(){RiseVision.Image.play()}function s(){RiseVision.Image.stop()}function a(){e.removeEventListener("WebComponentsReady",a),l&&""!==l&&(n.rpc.register("rscmd_play_"+l,r),n.rpc.register("rscmd_pause_"+l,o),n.rpc.register("rscmd_stop_"+l,s),n.rpc.register("rsparam_set_"+l,i),n.rpc.call("","rsparam_get",null,l,["additionalParams"]))}var l=(new n.Prefs).getString("id");e.oncontextmenu=function(){return!1},t.body.onmousedown=function(){return!1},e.addEventListener("WebComponentsReady",a)}(window,document,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-3"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL3dpZGdldC5taW4uanMiXSwibmFtZXMiOlsiV0lER0VUX0NPTU1PTl9DT05GSUciLCJBVVRIX1BBVEhfVVJMIiwiTE9HR0VSX0NMSUVOVF9JRCIsIkxPR0dFUl9DTElFTlRfU0VDUkVUIiwiTE9HR0VSX1JFRlJFU0hfVE9LRU4iLCJTVE9SQUdFX0VOViIsIlNUT1JFX1VSTCIsIlJpc2VWaXNpb24iLCJDb21tb24iLCJMb2dnZXJVdGlscyIsImdhZGdldHMiLCJzZXRJZHMiLCJuYW1lcyIsInZhbHVlcyIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImNvbXBhbnlJZCIsImRpc3BsYXlJZCIsImNhbGxiYWNrIiwiZ2V0RXZlbnRQYXJhbXMiLCJwYXJhbXMiLCJjYiIsImpzb24iLCJldmVudCIsImZpbGVfdXJsIiwiZmlsZV9mb3JtYXQiLCJnZXRGaWxlRm9ybWF0IiwiZ2V0SWRzIiwiY29tcGFueV9pZCIsImRpc3BsYXlfaWQiLCJpZCIsInJwYyIsInJlZ2lzdGVyIiwiY2FsbCIsInVybCIsInN0ciIsImhhc1BhcmFtcyIsInN1YnN0ciIsImxhc3RJbmRleE9mIiwidGVzdCIsImluZGV4T2YiLCJ0b0xvd2VyQ2FzZSIsImdldEluc2VydERhdGEiLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiQkFTRV9JTlNFUlRfU0NIRU1BIiwicm93cyIsImluc2VydElkIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwidG9VcHBlckNhc2UiLCJ0cyIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImdldFRhYmxlIiwibmFtZSIsImRhdGUiLCJ5ZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJtb250aCIsImdldFVUQ01vbnRoIiwiZGF5IiwiZ2V0VVRDRGF0ZSIsImxvZ0V2ZW50IiwidGFibGUiLCJMb2dnZXIiLCJsb2ciLCJQcmVmcyIsImdldFN0cmluZyIsImtpbmQiLCJza2lwSW52YWxpZFJvd3MiLCJpZ25vcmVVbmtub3duVmFsdWVzIiwidXRpbHMiLCJyZWZyZXNoVG9rZW4iLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInJlZnJlc2hEYXRlIiwib3BlbiIsIlJFRlJFU0hfVVJMIiwib25sb2FkZW5kIiwicmVzcCIsInJlc3BvbnNlIiwidG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJyZWZyZXNoZWRBdCIsInNlbmQiLCJpc1Rocm90dGxlZCIsInRocm90dGxlIiwibGFzdEV2ZW50IiwidGFibGVOYW1lIiwiaW5zZXJ0V2l0aFRva2VuIiwicmVmcmVzaERhdGEiLCJpbnNlcnREYXRhIiwic2VydmljZVVybCIsInJlcGxhY2UiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiaGFzT3duUHJvcGVydHkiLCJzZXRUaW1lb3V0IiwidGhyb3R0bGVEZWxheSIsIlJpc2VDYWNoZSIsInBpbmciLCJyIiwiQkFTRV9DQUNIRV9VUkwiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiX3BpbmdSZWNlaXZlZCIsInN0YXR1cyIsIl9pc0NhY2hlUnVubmluZyIsInJlc3BvbnNlVGV4dCIsImNvbnNvbGUiLCJkZWJ1ZyIsImUiLCJkZXNjcmlwdGlvbiIsImdldEZpbGUiLCJmaWxlVXJsIiwibm9jYWNoZWJ1c3RlciIsImZpbGVSZXF1ZXN0IiwiaXNDYWNoZVJ1bm5pbmciLCJzZXBhcmF0b3IiLCJlbmNvZGVVUklDb21wb25lbnQiLCJnZXRUaW1lIiwic3BsaXQiLCJtYWtlUmVxdWVzdCIsIm1ldGhvZCIsInJlcXVlc3QiLCJhZGRFdmVudExpc3RlbmVyIiwiRXJyb3IiLCJ0aGlzIiwiVXRpbGl0aWVzIiwiZ2V0Rm9udENzc1N0eWxlIiwiY2xhc3NOYW1lIiwiZm9udE9iaiIsImZhbWlseSIsImZvbnQiLCJjb2xvciIsInNpemUiLCJ3ZWlnaHQiLCJib2xkIiwiaXRhbGljIiwidW5kZXJsaW5lIiwiaGlnaGxpZ2h0IiwiaGlnaGxpZ2h0Q29sb3IiLCJhZGRDU1NSdWxlcyIsInJ1bGVzIiwic3R5bGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImhlYWQiLCJsb2FkRm9udHMiLCJzZXR0aW5ncyIsImNvbnRlbnREb2MiLCJmb3JFYWNoIiwiaXRlbSIsImNsYXNzIiwiZm9udFNldHRpbmciLCJ0eXBlIiwibG9hZEN1c3RvbUZvbnQiLCJsb2FkR29vZ2xlRm9udCIsInNoZWV0IiwicnVsZSIsInN0eWxlU2hlZXRzIiwiYWRkUnVsZSIsInN0eWxlc2hlZXQiLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInByZWxvYWRJbWFnZXMiLCJ1cmxzIiwiaW1hZ2VzIiwiSW1hZ2UiLCJzcmMiLCJnZXRRdWVyeVBhcmFtZXRlciIsInBhcmFtIiwicGFpciIsInF1ZXJ5Iiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJzdWJzdHJpbmciLCJ2YXJzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbnN0YW50IiwiY29uZmlnIiwiX3JlYWR5IiwiX3ByZWZzIiwiX2RvbmUiLCJfZXJyb3JMb2ciLCJfZ2V0Q3VycmVudEZpbGUiLCJfY2xlYXJFcnJvclRpbWVyIiwiY2xlYXJUaW1lb3V0IiwiX2Vycm9yVGltZXIiLCJfc3RhcnRFcnJvclRpbWVyIiwic2xpZGVOdW0iLCJfY3VycmVudEZpbGVzIiwiX21vZGUiLCJfc2xpZGVyIiwiaXNSZWFkeSIsImdldEN1cnJlbnRTbGlkZSIsImluaXQiLCJpc1N0b3JhZ2VGaWxlIiwiY29udGFpbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJlbCIsImRldGFpbHMiLCJfbWVzc2FnZSIsIk1lc3NhZ2UiLCJzaG93IiwiX3BhcmFtcyIsImJhY2tncm91bmQiLCJPYmplY3QiLCJrZXlzIiwiYm9keSIsInBvc2l0aW9uIiwic2NhbGVUb0ZpdCIsInN0b3JhZ2UiLCJfc3RvcmFnZSIsIlN0b3JhZ2VGaWxlIiwiX25vblN0b3JhZ2UiLCJOb25TdG9yYWdlIiwiU3RvcmFnZUZvbGRlciIsImdldFRhYmxlTmFtZSIsImV2ZW50X2RldGFpbHMiLCJzZXRTaW5nbGVJbWFnZSIsImltYWdlIiwicXVlcnlTZWxlY3RvciIsImJhY2tncm91bmRJbWFnZSIsImhhc1N0b3JhZ2VFcnJvciIsIl9zdG9yYWdlRXJyb3JGbGFnIiwiaXNFcnJvciIsIm9uRmlsZUluaXQiLCJoaWRlIiwiU2xpZGVyIiwib25GaWxlUmVmcmVzaCIsInJlZnJlc2giLCJfZXJyb3JGbGFnIiwic2V0QWRkaXRpb25hbFBhcmFtcyIsImFkZGl0aW9uYWxQYXJhbXMiLCJtb2RlVHlwZSIsIl8iLCJjbG9uZSIsIndpZHRoIiwiZ2V0SW50IiwiaGVpZ2h0Iiwib25TbGlkZXJSZWFkeSIsIl92aWV3ZXJQYXVzZWQiLCJwbGF5Iiwib25TbGlkZXJDb21wbGV0ZSIsInBhdXNlIiwic2hvd0Vycm9yIiwibWVzc2FnZSIsImlzU3RvcmFnZUVycm9yIiwiZGVzdHJveSIsInN0b3AiLCJhZGRTbGlkZXMiLCJsaXN0Iiwic2xpZGVzIiwic2xpZGUiLCJ0b3RhbFNsaWRlcyIsImN1cnJlbnRGaWxlcyIsImZpbGUiLCJkdXJhdGlvbiIsInB1c2giLCJvblNsaWRlQ2hhbmdlZCIsImlzSW50ZXJhY3RpbmciLCJpc0xhc3RTbGlkZSIsInJlZnJlc2hTbGlkZXIiLCIkYXBpIiwiZGVzdHJveVNsaWRlciIsIm5ld0ZpbGVzIiwic2xpZGVJbmRleCIsIiQiLCJvZmYiLCJyZXZraWxsIiwiaGFuZGxlVXNlckFjdGl2aXR5Iiwic2xpZGVUaW1lciIsInJldm5leHQiLCJyZXZyZXN1bWUiLCJpc1BsYXlpbmciLCJoaWRlTmF2IiwiYXV0b0hpZGUiLCJuYXZUaW1lciIsImFkZENsYXNzIiwibmF2VGltZW91dCIsInJldmN1cnJlbnRzbGlkZSIsImZpbGVzIiwidHBCYW5uZXJDb250YWluZXIiLCJ0cEJhbm5lciIsInVsIiwiaXNMb2FkaW5nIiwicmV2b2x1dGlvbiIsImhpZGVUaHVtYnMiLCJoaWRlVGltZXJCYXIiLCJuYXZpZ2F0aW9uVHlwZSIsIm9uSG92ZXJTdG9wIiwic3RhcnR3aWR0aCIsInN0YXJ0aGVpZ2h0Iiwib24iLCJyZW1vdmVDbGFzcyIsInJlc3VtZSIsInJldnNob3dzbGlkZSIsInJldnBhdXNlIiwiZGV0YWlsIiwiX2luaXRpYWxMb2FkIiwiY2hhbmdlZCIsImltZyIsImVycm9yX2RldGFpbHMiLCJlcnJvciIsImN1cnJlbnRUYXJnZXQiLCJmb2xkZXIiLCJmaWxlTmFtZSIsImdvIiwicHJvY2Vzc1VybCIsImFkZGVkIiwiX2ZpbGVzIiwiZmluZCIsImRlbGV0ZWQiLCJyZWplY3QiLCJzb3J0QnkiLCJoYW5kbGVSZXNwb25zZSIsIl9pc0xvYWRpbmciLCJfdGltZXIiLCJfZ2V0RmlsZSIsIm9taXRDYWNoZUJ1c3RlciIsInJpc2VDYWNoZSIsIl91cmwiLCJfc3RhcnRSZWZyZXNoSW50ZXJ2YWwiLCJfcmVmcmVzaEludGVydmFsSWQiLCJzZXRJbnRlcnZhbCIsIl9yZWZyZXNoRHVyYXRpb24iLCJzZWxlY3RvciIsIm1haW5Db250YWluZXIiLCJtZXNzYWdlQ29udGFpbmVyIiwiX2luaXQiLCJ3YXJuIiwiX2FjdGl2ZSIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImRpc3BsYXkiLCJ2aXNpYmlsaXR5IiwicCIsImlubmVySFRNTCIsImNvbmZpZ3VyZSIsIm1vZGUiLCJwb2x5bWVyUmVhZHkiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwib25jb250ZXh0bWVudSIsIm9ubW91c2Vkb3duIiwiX2dhcSIsImdhIiwiYXN5bmMiLCJwcm90b2NvbCIsInMiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFJQSx1QkFDRkMsY0FBZSxpQkFDZkMsaUJBQWtCLDRFQUNsQkMscUJBQXNCLDJCQUN0QkMscUJBQXNCLHFFQUN0QkMsWUFBYSxPQUNiQyxVQUFXLDZDQUlUQyxXQUFhQSxjQUNqQkEsWUFBV0MsT0FBU0QsV0FBV0MsV0FFL0JELFdBQVdDLE9BQU9DLFlBQWMsU0FBVUMsR0FDeEMsWUFz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OU0sRUFBU3dFLEtBQUt1SSxZQUFjLFdBQzFCLE9BQU8sR0FxRFQvSyxFQUFPcEQsaUJBQWlCLHFCQUFzQmdPLElBRTdDNUssT0FBUWhDLFNBQVUzSSxRQUdyQixJQUFJMlYsTUFBT0EsUUFFWEEsTUFBS3RGLE1BQU0sY0FBZSxrQkFDMUJzRixLQUFLdEYsTUFBTSxtQkFFWCxXQUNFLEdBQUl1RixHQUFLak4sU0FBU0MsY0FBYyxTQUFXZ04sR0FBR3BNLEtBQU8sa0JBQW1Cb00sRUFBR0MsT0FBUSxFQUNuRkQsRUFBR3RMLEtBQU8sVUFBWTNCLFNBQVNpQyxTQUFTa0wsU0FBVyxjQUFnQixjQUFnQiw2QkFDbkYsSUFBSUMsR0FBSXBOLFNBQVNzQixxQkFBcUIsVUFBVSxFQUFJOEwsR0FBRUMsV0FBV0MsYUFBYUwsRUFBSUciLCJmaWxlIjoianMvd2lkZ2V0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBXSURHRVRfQ09NTU9OX0NPTkZJRyA9IHtcbiAgQVVUSF9QQVRIX1VSTDogXCJ2MS93aWRnZXQvYXV0aFwiLFxuICBMT0dHRVJfQ0xJRU5UX0lEOiBcIjEwODg1MjcxNDcxMDktNnExbzJ2dGlobjM0MjkycGp0NGNraG1oY2swcmswbzcuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb21cIixcbiAgTE9HR0VSX0NMSUVOVF9TRUNSRVQ6IFwibmxaeXJjUExnNm9Fd085ZjlXZm4yOVdoXCIsXG4gIExPR0dFUl9SRUZSRVNIX1RPS0VOOiBcIjEveHp0NGt3ekUxSDdXOVZuS0I4Y0FhQ3g2emI0RXM0bktFb3FhWUhkVEQxNUlnT3JKRHRkdW42eks2WGlBVENLVFwiLFxuICBTVE9SQUdFX0VOVjogXCJwcm9kXCIsXG4gIFNUT1JFX1VSTDogXCJodHRwczovL3N0b3JlLWRvdC1ydmFzZXJ2ZXIyLmFwcHNwb3QuY29tL1wiXG59O1xuLyogZ2xvYmFsIGdhZGdldHMgKi9cblxudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5Db21tb24gPSBSaXNlVmlzaW9uLkNvbW1vbiB8fCB7fTtcblxuUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyVXRpbHMgPSAoZnVuY3Rpb24oZ2FkZ2V0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICAgdmFyIGlkID0gbmV3IGdhZGdldHMuUHJlZnMoKS5nZXRTdHJpbmcoXCJpZFwiKSxcbiAgICBkaXNwbGF5SWQgPSBcIlwiLFxuICAgIGNvbXBhbnlJZCA9IFwiXCIsXG4gICAgY2FsbGJhY2sgPSBudWxsO1xuXG4gIHZhciBCQVNFX0lOU0VSVF9TQ0hFTUEgPVxuICB7XG4gICAgXCJraW5kXCI6IFwiYmlncXVlcnkjdGFibGVEYXRhSW5zZXJ0QWxsUmVxdWVzdFwiLFxuICAgIFwic2tpcEludmFsaWRSb3dzXCI6IGZhbHNlLFxuICAgIFwiaWdub3JlVW5rbm93blZhbHVlc1wiOiBmYWxzZSxcbiAgICBcInJvd3NcIjogW3tcbiAgICAgIFwiaW5zZXJ0SWRcIjogXCJcIlxuICAgIH1dXG4gIH07XG5cbiAgLypcbiAgICogIFByaXZhdGUgTWV0aG9kc1xuICAgKi9cblxuICAvKiBTZXQgdGhlIENvbXBhbnkgYW5kIERpc3BsYXkgSURzLiAqL1xuICBmdW5jdGlvbiBzZXRJZHMobmFtZXMsIHZhbHVlcykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG5hbWVzKSAmJiBuYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZXMpICYmIHZhbHVlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChuYW1lc1swXSA9PT0gXCJjb21wYW55SWRcIikge1xuICAgICAgICAgIGNvbXBhbnlJZCA9IHZhbHVlc1swXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuYW1lc1sxXSA9PT0gXCJkaXNwbGF5SWRcIikge1xuICAgICAgICAgIGlmICh2YWx1ZXNbMV0pIHtcbiAgICAgICAgICAgIGRpc3BsYXlJZCA9IHZhbHVlc1sxXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkaXNwbGF5SWQgPSBcInByZXZpZXdcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjayhjb21wYW55SWQsIGRpc3BsYXlJZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyogUmV0cmlldmUgcGFyYW1ldGVycyB0byBwYXNzIHRvIHRoZSBldmVudCBsb2dnZXIuICovXG4gIGZ1bmN0aW9uIGdldEV2ZW50UGFyYW1zKHBhcmFtcywgY2IpIHtcbiAgICB2YXIganNvbiA9IG51bGw7XG5cbiAgICAvLyBldmVudCBpcyByZXF1aXJlZC5cbiAgICBpZiAocGFyYW1zLmV2ZW50KSB7XG4gICAgICBqc29uID0gcGFyYW1zO1xuXG4gICAgICBpZiAoanNvbi5maWxlX3VybCkge1xuICAgICAgICBqc29uLmZpbGVfZm9ybWF0ID0gZ2V0RmlsZUZvcm1hdChqc29uLmZpbGVfdXJsKTtcbiAgICAgIH1cblxuICAgICAgZ2V0SWRzKGZ1bmN0aW9uKGNvbXBhbnlJZCwgZGlzcGxheUlkKSB7XG4gICAgICAgIGpzb24uY29tcGFueV9pZCA9IGNvbXBhbnlJZDtcbiAgICAgICAganNvbi5kaXNwbGF5X2lkID0gZGlzcGxheUlkO1xuXG4gICAgICAgIGNiKGpzb24pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY2IoanNvbik7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogIFB1YmxpYyBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBnZXRJZHMoY2IpIHtcbiAgICBpZiAoIWNiIHx8IHR5cGVvZiBjYiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY2FsbGJhY2sgPSBjYjtcbiAgICB9XG5cbiAgICBpZiAoY29tcGFueUlkICYmIGRpc3BsYXlJZCkge1xuICAgICAgY2FsbGJhY2soY29tcGFueUlkLCBkaXNwbGF5SWQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmIChpZCAmJiBpZCAhPT0gXCJcIikge1xuICAgICAgICBnYWRnZXRzLnJwYy5yZWdpc3RlcihcInJzcGFyYW1fc2V0X1wiICsgaWQsIHNldElkcyk7XG4gICAgICAgIGdhZGdldHMucnBjLmNhbGwoXCJcIiwgXCJyc3BhcmFtX2dldFwiLCBudWxsLCBpZCwgW1wiY29tcGFueUlkXCIsIFwiZGlzcGxheUlkXCJdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRGaWxlRm9ybWF0KHVybCkge1xuICAgIHZhciBoYXNQYXJhbXMgPSAvWz8jJl0vLFxuICAgICAgc3RyO1xuXG4gICAgaWYgKCF1cmwgfHwgdHlwZW9mIHVybCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgc3RyID0gdXJsLnN1YnN0cih1cmwubGFzdEluZGV4T2YoXCIuXCIpICsgMSk7XG5cbiAgICAvLyBkb24ndCBpbmNsdWRlIGFueSBwYXJhbXMgYWZ0ZXIgdGhlIGZpbGVuYW1lXG4gICAgaWYgKGhhc1BhcmFtcy50ZXN0KHN0cikpIHtcbiAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMCAsKHN0ci5pbmRleE9mKFwiP1wiKSAhPT0gLTEpID8gc3RyLmluZGV4T2YoXCI/XCIpIDogc3RyLmxlbmd0aCk7XG5cbiAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMCwgKHN0ci5pbmRleE9mKFwiI1wiKSAhPT0gLTEpID8gc3RyLmluZGV4T2YoXCIjXCIpIDogc3RyLmxlbmd0aCk7XG5cbiAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMCwgKHN0ci5pbmRleE9mKFwiJlwiKSAhPT0gLTEpID8gc3RyLmluZGV4T2YoXCImXCIpIDogc3RyLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SW5zZXJ0RGF0YShwYXJhbXMpIHtcbiAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoQkFTRV9JTlNFUlRfU0NIRU1BKSk7XG5cbiAgICBkYXRhLnJvd3NbMF0uaW5zZXJ0SWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMikudG9VcHBlckNhc2UoKTtcbiAgICBkYXRhLnJvd3NbMF0uanNvbiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocGFyYW1zKSk7XG4gICAgZGF0YS5yb3dzWzBdLmpzb24udHMgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRhYmxlKG5hbWUpIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCksXG4gICAgICB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCkgKyAxLFxuICAgICAgZGF5ID0gZGF0ZS5nZXRVVENEYXRlKCk7XG5cbiAgICBpZiAobW9udGggPCAxMCkge1xuICAgICAgbW9udGggPSBcIjBcIiArIG1vbnRoO1xuICAgIH1cblxuICAgIGlmIChkYXkgPCAxMCkge1xuICAgICAgZGF5ID0gXCIwXCIgKyBkYXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hbWUgKyB5ZWFyICsgbW9udGggKyBkYXk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2dFdmVudCh0YWJsZSwgcGFyYW1zKSB7XG4gICAgZ2V0RXZlbnRQYXJhbXMocGFyYW1zLCBmdW5jdGlvbihqc29uKSB7XG4gICAgICBpZiAoanNvbiAhPT0gbnVsbCkge1xuICAgICAgICBSaXNlVmlzaW9uLkNvbW1vbi5Mb2dnZXIubG9nKHRhYmxlLCBqc29uKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgXCJnZXRJZHNcIjogZ2V0SWRzLFxuICAgIFwiZ2V0SW5zZXJ0RGF0YVwiOiBnZXRJbnNlcnREYXRhLFxuICAgIFwiZ2V0RmlsZUZvcm1hdFwiOiBnZXRGaWxlRm9ybWF0LFxuICAgIFwiZ2V0VGFibGVcIjogZ2V0VGFibGUsXG4gICAgXCJsb2dFdmVudFwiOiBsb2dFdmVudFxuICB9O1xufSkoZ2FkZ2V0cyk7XG5cblJpc2VWaXNpb24uQ29tbW9uLkxvZ2dlciA9IChmdW5jdGlvbih1dGlscykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgUkVGUkVTSF9VUkwgPSBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My90b2tlbj9jbGllbnRfaWQ9XCIgKyBXSURHRVRfQ09NTU9OX0NPTkZJRy5MT0dHRVJfQ0xJRU5UX0lEICtcbiAgICAgIFwiJmNsaWVudF9zZWNyZXQ9XCIgKyBXSURHRVRfQ09NTU9OX0NPTkZJRy5MT0dHRVJfQ0xJRU5UX1NFQ1JFVCArXG4gICAgICBcIiZyZWZyZXNoX3Rva2VuPVwiICsgV0lER0VUX0NPTU1PTl9DT05GSUcuTE9HR0VSX1JFRlJFU0hfVE9LRU4gK1xuICAgICAgXCImZ3JhbnRfdHlwZT1yZWZyZXNoX3Rva2VuXCI7XG5cbiAgdmFyIHNlcnZpY2VVcmwgPSBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2JpZ3F1ZXJ5L3YyL3Byb2plY3RzL2NsaWVudC1zaWRlLWV2ZW50cy9kYXRhc2V0cy9XaWRnZXRfRXZlbnRzL3RhYmxlcy9UQUJMRV9JRC9pbnNlcnRBbGxcIixcbiAgICB0aHJvdHRsZSA9IGZhbHNlLFxuICAgIHRocm90dGxlRGVsYXkgPSAxMDAwLFxuICAgIGxhc3RFdmVudCA9IFwiXCIsXG4gICAgcmVmcmVzaERhdGUgPSAwLFxuICAgIHRva2VuID0gXCJcIjtcblxuICAvKlxuICAgKiAgUHJpdmF0ZSBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiByZWZyZXNoVG9rZW4oY2IpIHtcbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICBpZiAobmV3IERhdGUoKSAtIHJlZnJlc2hEYXRlIDwgMzU4MDAwMCkge1xuICAgICAgcmV0dXJuIGNiKHt9KTtcbiAgICB9XG5cbiAgICB4aHIub3BlbihcIlBPU1RcIiwgUkVGUkVTSF9VUkwsIHRydWUpO1xuICAgIHhoci5vbmxvYWRlbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZXNwID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2UpO1xuXG4gICAgICBjYih7IHRva2VuOiByZXNwLmFjY2Vzc190b2tlbiwgcmVmcmVzaGVkQXQ6IG5ldyBEYXRlKCkgfSk7XG4gICAgfTtcblxuICAgIHhoci5zZW5kKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1Rocm90dGxlZChldmVudCkge1xuICAgIHJldHVybiB0aHJvdHRsZSAmJiAobGFzdEV2ZW50ID09PSBldmVudCk7XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGxvZyh0YWJsZU5hbWUsIHBhcmFtcykge1xuICAgIGlmICghdGFibGVOYW1lIHx8ICFwYXJhbXMgfHwgKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShcImV2ZW50XCIpICYmICFwYXJhbXMuZXZlbnQpIHx8XG4gICAgICAocGFyYW1zLmhhc093blByb3BlcnR5KFwiZXZlbnRcIikgJiYgaXNUaHJvdHRsZWQocGFyYW1zLmV2ZW50KSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aHJvdHRsZSA9IHRydWU7XG4gICAgbGFzdEV2ZW50ID0gcGFyYW1zLmV2ZW50O1xuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdHRsZSA9IGZhbHNlO1xuICAgIH0sIHRocm90dGxlRGVsYXkpO1xuXG4gICAgZnVuY3Rpb24gaW5zZXJ0V2l0aFRva2VuKHJlZnJlc2hEYXRhKSB7XG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksXG4gICAgICAgIGluc2VydERhdGEsIHVybDtcblxuICAgICAgdXJsID0gc2VydmljZVVybC5yZXBsYWNlKFwiVEFCTEVfSURcIiwgdXRpbHMuZ2V0VGFibGUodGFibGVOYW1lKSk7XG4gICAgICByZWZyZXNoRGF0ZSA9IHJlZnJlc2hEYXRhLnJlZnJlc2hlZEF0IHx8IHJlZnJlc2hEYXRlO1xuICAgICAgdG9rZW4gPSByZWZyZXNoRGF0YS50b2tlbiB8fCB0b2tlbjtcbiAgICAgIGluc2VydERhdGEgPSB1dGlscy5nZXRJbnNlcnREYXRhKHBhcmFtcyk7XG5cbiAgICAgIC8vIEluc2VydCB0aGUgZGF0YS5cbiAgICAgIHhoci5vcGVuKFwiUE9TVFwiLCB1cmwsIHRydWUpO1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJBdXRob3JpemF0aW9uXCIsIFwiQmVhcmVyIFwiICsgdG9rZW4pO1xuXG4gICAgICBpZiAocGFyYW1zLmNiICYmIHR5cGVvZiBwYXJhbXMuY2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB4aHIub25sb2FkZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcGFyYW1zLmNiKHhoci5yZXNwb25zZSk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHhoci5zZW5kKEpTT04uc3RyaW5naWZ5KGluc2VydERhdGEpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVmcmVzaFRva2VuKGluc2VydFdpdGhUb2tlbik7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFwibG9nXCI6IGxvZ1xuICB9O1xufSkoUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyVXRpbHMpO1xudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5Db21tb24gPSBSaXNlVmlzaW9uLkNvbW1vbiB8fCB7fTtcblxuUmlzZVZpc2lvbi5Db21tb24uUmlzZUNhY2hlID0gKGZ1bmN0aW9uICgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIEJBU0VfQ0FDSEVfVVJMID0gXCJodHRwOi8vbG9jYWxob3N0Ojk0OTQvXCI7XG5cbiAgdmFyIF9waW5nUmVjZWl2ZWQgPSBmYWxzZSxcbiAgICBfaXNDYWNoZVJ1bm5pbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBwaW5nKGNhbGxiYWNrKSB7XG4gICAgdmFyIHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIGlmICghY2FsbGJhY2sgfHwgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByLm9wZW4oXCJHRVRcIiwgQkFTRV9DQUNIRV9VUkwgKyBcInBpbmc/Y2FsbGJhY2s9X1wiLCB0cnVlKTtcbiAgICByLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG4gICAgICAgICAgLy8gc2F2ZSB0aGlzIHJlc3VsdCBmb3IgdXNlIGluIGdldEZpbGUoKVxuICAgICAgICAgIF9waW5nUmVjZWl2ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYoci5zdGF0dXMgPT09IDIwMCl7XG4gICAgICAgICAgICBfaXNDYWNoZVJ1bm5pbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICBjYWxsYmFjayh0cnVlLCByLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJSaXNlIENhY2hlIGlzIG5vdCBydW5uaW5nXCIpO1xuICAgICAgICAgICAgX2lzQ2FjaGVSdW5uaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlLCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJDYXVnaHQgZXhjZXB0aW9uOiBcIiwgZS5kZXNjcmlwdGlvbik7XG4gICAgICB9XG5cbiAgICB9O1xuICAgIHIuc2VuZCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RmlsZShmaWxlVXJsLCBjYWxsYmFjaywgbm9jYWNoZWJ1c3Rlcikge1xuICAgIGlmICghZmlsZVVybCB8fCAhY2FsbGJhY2sgfHwgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaWxlUmVxdWVzdChpc0NhY2hlUnVubmluZykge1xuICAgICAgdmFyIHVybCwgc3RyLCBzZXBhcmF0b3I7XG5cbiAgICAgIGlmIChpc0NhY2hlUnVubmluZykge1xuICAgICAgICAvLyBjb25maWd1cmUgdXJsIHdpdGggY2FjaGVidXN0ZXIgb3Igbm90XG4gICAgICAgIHVybCA9IChub2NhY2hlYnVzdGVyKSA/IEJBU0VfQ0FDSEVfVVJMICsgXCI/dXJsPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGZpbGVVcmwpIDpcbiAgICAgICAgICBCQVNFX0NBQ0hFX1VSTCArIFwiY2I9XCIgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIFwiP3VybD1cIiArIGVuY29kZVVSSUNvbXBvbmVudChmaWxlVXJsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChub2NhY2hlYnVzdGVyKSB7XG4gICAgICAgICAgdXJsID0gZmlsZVVybDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSBmaWxlVXJsLnNwbGl0KFwiP1wiKTtcbiAgICAgICAgICBzZXBhcmF0b3IgPSAoc3RyLmxlbmd0aCA9PT0gMSkgPyBcIj9cIiA6IFwiJlwiO1xuICAgICAgICAgIHVybCA9IGZpbGVVcmwgKyBzZXBhcmF0b3IgKyBcImNiPVwiICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWFrZVJlcXVlc3QoXCJIRUFEXCIsIHVybCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZVJlcXVlc3QobWV0aG9kLCB1cmwpIHtcbiAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgICAgICAgcmVxdWVzdCA9IHtcbiAgICAgICAgICB4aHI6IHhocixcbiAgICAgICAgICB1cmw6IHVybFxuICAgICAgICB9O1xuXG4gICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG5cbiAgICAgIHhoci5hZGRFdmVudExpc3RlbmVyKFwibG9hZGVuZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGF0dXMgPSB4aHIuc3RhdHVzIHx8IDA7XG5cbiAgICAgICAgaWYgKHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwKSB7XG4gICAgICAgICAgY2FsbGJhY2socmVxdWVzdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU2VydmVyIG1heSBub3Qgc3VwcG9ydCBIRUFEIHJlcXVlc3QuIEZhbGxiYWNrIHRvIGEgR0VUIHJlcXVlc3QuXG4gICAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJIRUFEXCIpIHtcbiAgICAgICAgICAgIG1ha2VSZXF1ZXN0KFwiR0VUXCIsIHVybCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChfaXNDYWNoZVJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2socmVxdWVzdCwgbmV3IEVycm9yKFwiVGhlIHJlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGU6IFwiICsgc3RhdHVzKSk7XG4gICAgICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICAgIC8vIFRoaXMgaXMgdG8gYXZvaWQgdGhyb3dpbmcgYW4gZXJyb3Igd2hlbiB0aGVyZSBpcyBhIGNyb3NzIGRvbWFpbiBpc3N1ZVxuICAgICAgICAgICAgICBjYWxsYmFjayhyZXF1ZXN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB4aHIuc2VuZCgpO1xuICAgIH1cblxuICAgIGlmICghX3BpbmdSZWNlaXZlZCkge1xuICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgICAgcmV0dXJuIHRoaXMucGluZyhmaWxlUmVxdWVzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmaWxlUmVxdWVzdChfaXNDYWNoZVJ1bm5pbmcpO1xuICAgIH1cblxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRGaWxlOiBnZXRGaWxlLFxuICAgIHBpbmc6IHBpbmdcbiAgfTtcblxufSkoKTtcblxudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuXG5SaXNlVmlzaW9uLkNvbW1vbiA9IFJpc2VWaXNpb24uQ29tbW9uIHx8IHt9O1xuXG5SaXNlVmlzaW9uLkNvbW1vbi5VdGlsaXRpZXMgPSAoZnVuY3Rpb24oKSB7XG5cbiAgZnVuY3Rpb24gZ2V0Rm9udENzc1N0eWxlKGNsYXNzTmFtZSwgZm9udE9iaikge1xuICAgIHZhciBmYW1pbHkgPSBcImZvbnQtZmFtaWx5OlwiICsgZm9udE9iai5mb250LmZhbWlseSArIFwiOyBcIjtcbiAgICB2YXIgY29sb3IgPSBcImNvbG9yOiBcIiArIGZvbnRPYmouY29sb3IgKyBcIjsgXCI7XG4gICAgdmFyIHNpemUgPSBcImZvbnQtc2l6ZTogXCIgKyBmb250T2JqLnNpemUgKyBcInB4OyBcIjtcbiAgICB2YXIgd2VpZ2h0ID0gXCJmb250LXdlaWdodDogXCIgKyAoZm9udE9iai5ib2xkID8gXCJib2xkXCIgOiBcIm5vcm1hbFwiKSArIFwiOyBcIjtcbiAgICB2YXIgaXRhbGljID0gXCJmb250LXN0eWxlOiBcIiArIChmb250T2JqLml0YWxpYyA/IFwiaXRhbGljXCIgOiBcIm5vcm1hbFwiKSArIFwiOyBcIjtcbiAgICB2YXIgdW5kZXJsaW5lID0gXCJ0ZXh0LWRlY29yYXRpb246IFwiICsgKGZvbnRPYmoudW5kZXJsaW5lID8gXCJ1bmRlcmxpbmVcIiA6IFwibm9uZVwiKSArIFwiOyBcIjtcbiAgICB2YXIgaGlnaGxpZ2h0ID0gXCJiYWNrZ3JvdW5kLWNvbG9yOiBcIiArIGZvbnRPYmouaGlnaGxpZ2h0Q29sb3IgKyBcIjsgXCI7XG5cbiAgICByZXR1cm4gXCIuXCIgKyBjbGFzc05hbWUgKyBcIiB7XCIgKyBmYW1pbHkgKyBjb2xvciArIHNpemUgKyB3ZWlnaHQgKyBpdGFsaWMgKyB1bmRlcmxpbmUgKyBoaWdobGlnaHQgKyBcIn1cIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZENTU1J1bGVzKHJ1bGVzKSB7XG4gICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHJ1bGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShydWxlc1tpXSkpO1xuICAgIH1cblxuICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgLypcbiAgICogTG9hZHMgR29vZ2xlIG9yIGN1c3RvbSBmb250cywgaWYgYXBwbGljYWJsZSwgYW5kIGluamVjdHMgQ1NTIHN0eWxlc1xuICAgKiBpbnRvIHRoZSBoZWFkIG9mIHRoZSBkb2N1bWVudC5cbiAgICpcbiAgICogQHBhcmFtICAgIGFycmF5ICAgIHNldHRpbmdzICAgIEFycmF5IG9mIG9iamVjdHMgd2l0aCB0aGUgZm9sbG93aW5nIGZvcm06XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3tcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJkYXRlXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImZvbnRTZXR0aW5nXCI6IHtcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2xkOiB0cnVlLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcImJsYWNrXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udDoge1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFtaWx5OiBcIkFrcm9uaW1cIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IFwiQWtyb25pbVwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJWZXJkYW5hXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImdvb2dsZVwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBcImh0dHA6Ly9jdXN0b20tZm9udC11cmxcIlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0Q29sb3I6IFwidHJhbnNwYXJlbnRcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGFsaWM6IGZhbHNlLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IFwiMjBcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlcmxpbmU6IGZhbHNlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV1cbiAgICpcbiAgICogICAgICAgICAgIG9iamVjdCAgIGNvbnRlbnREb2MgICAgRG9jdW1lbnQgb2JqZWN0IGludG8gd2hpY2ggdG8gaW5qZWN0IHN0eWxlc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgbG9hZCBmb250cyAob3B0aW9uYWwpLlxuICAgKi9cbiAgZnVuY3Rpb24gbG9hZEZvbnRzKHNldHRpbmdzLCBjb250ZW50RG9jKSB7XG4gICAgc2V0dGluZ3MuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpZiAoaXRlbS5jbGFzcyAmJiBpdGVtLmZvbnRTZXR0aW5nKSB7XG4gICAgICAgIGFkZENTU1J1bGVzKFsgZ2V0Rm9udENzc1N0eWxlKGl0ZW0uY2xhc3MsIGl0ZW0uZm9udFNldHRpbmcpIF0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbS5mb250U2V0dGluZy5mb250LnR5cGUpIHtcbiAgICAgICAgaWYgKGl0ZW0uZm9udFNldHRpbmcuZm9udC50eXBlID09PSBcImN1c3RvbVwiICYmIGl0ZW0uZm9udFNldHRpbmcuZm9udC5mYW1pbHkgJiZcbiAgICAgICAgICBpdGVtLmZvbnRTZXR0aW5nLmZvbnQudXJsKSB7XG4gICAgICAgICAgbG9hZEN1c3RvbUZvbnQoaXRlbS5mb250U2V0dGluZy5mb250LmZhbWlseSwgaXRlbS5mb250U2V0dGluZy5mb250LnVybCxcbiAgICAgICAgICAgIGNvbnRlbnREb2MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGl0ZW0uZm9udFNldHRpbmcuZm9udC50eXBlID09PSBcImdvb2dsZVwiICYmIGl0ZW0uZm9udFNldHRpbmcuZm9udC5mYW1pbHkpIHtcbiAgICAgICAgICBsb2FkR29vZ2xlRm9udChpdGVtLmZvbnRTZXR0aW5nLmZvbnQuZmFtaWx5LCBjb250ZW50RG9jKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gbG9hZEN1c3RvbUZvbnQoZmFtaWx5LCB1cmwsIGNvbnRlbnREb2MpIHtcbiAgICB2YXIgc2hlZXQgPSBudWxsO1xuICAgIHZhciBydWxlID0gXCJmb250LWZhbWlseTogXCIgKyBmYW1pbHkgKyBcIjsgXCIgKyBcInNyYzogdXJsKCdcIiArIHVybCArIFwiJyk7XCI7XG5cbiAgICBjb250ZW50RG9jID0gY29udGVudERvYyB8fCBkb2N1bWVudDtcblxuICAgIHNoZWV0ID0gY29udGVudERvYy5zdHlsZVNoZWV0c1swXTtcblxuICAgIGlmIChzaGVldCAhPT0gbnVsbCkge1xuICAgICAgc2hlZXQuYWRkUnVsZShcIkBmb250LWZhY2VcIiwgcnVsZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbG9hZEdvb2dsZUZvbnQoZmFtaWx5LCBjb250ZW50RG9jKSB7XG4gICAgdmFyIHN0eWxlc2hlZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuICAgIGNvbnRlbnREb2MgPSBjb250ZW50RG9jIHx8IGRvY3VtZW50O1xuXG4gICAgc3R5bGVzaGVldC5zZXRBdHRyaWJ1dGUoXCJyZWxcIiwgXCJzdHlsZXNoZWV0XCIpO1xuICAgIHN0eWxlc2hlZXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcInRleHQvY3NzXCIpO1xuICAgIHN0eWxlc2hlZXQuc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBcImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1cIiArXG4gICAgICBmYW1pbHkpO1xuXG4gICAgaWYgKHN0eWxlc2hlZXQgIT09IG51bGwpIHtcbiAgICAgIGNvbnRlbnREb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdLmFwcGVuZENoaWxkKHN0eWxlc2hlZXQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByZWxvYWRJbWFnZXModXJscykge1xuICAgIHZhciBsZW5ndGggPSB1cmxzLmxlbmd0aCxcbiAgICAgIGltYWdlcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaW1hZ2VzW2ldID0gbmV3IEltYWdlKCk7XG4gICAgICBpbWFnZXNbaV0uc3JjID0gdXJsc1tpXTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRRdWVyeVBhcmFtZXRlcihwYXJhbSkge1xuICAgIHZhciBxdWVyeSA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpLFxuICAgICAgdmFycyA9IHF1ZXJ5LnNwbGl0KFwiJlwiKSxcbiAgICAgIHBhaXI7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhaXIgPSB2YXJzW2ldLnNwbGl0KFwiPVwiKTtcblxuICAgICAgaWYgKHBhaXJbMF0gPT0gcGFyYW0pIHtcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0UXVlcnlQYXJhbWV0ZXI6IGdldFF1ZXJ5UGFyYW1ldGVyLFxuICAgIGdldEZvbnRDc3NTdHlsZTogIGdldEZvbnRDc3NTdHlsZSxcbiAgICBhZGRDU1NSdWxlczogICAgICBhZGRDU1NSdWxlcyxcbiAgICBsb2FkRm9udHM6ICAgICAgICBsb2FkRm9udHMsXG4gICAgbG9hZEN1c3RvbUZvbnQ6ICAgbG9hZEN1c3RvbUZvbnQsXG4gICAgbG9hZEdvb2dsZUZvbnQ6ICAgbG9hZEdvb2dsZUZvbnQsXG4gICAgcHJlbG9hZEltYWdlczogICAgcHJlbG9hZEltYWdlc1xuICB9O1xufSkoKTtcblxuLyogZ2xvYmFsIGNvbmZpZzogdHJ1ZSAqL1xuLyogZXhwb3J0ZWQgY29uZmlnICovXG5pZiAodHlwZW9mIGFuZ3VsYXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgYW5ndWxhci5tb2R1bGUoXCJyaXNldmlzaW9uLmNvbW1vbi5pMThuLmNvbmZpZ1wiLCBbXSlcbiAgICAuY29uc3RhbnQoXCJMT0NBTEVTX1BSRUZJWFwiLCBcImxvY2FsZXMvdHJhbnNsYXRpb25fXCIpXG4gICAgLmNvbnN0YW50KFwiTE9DQUxFU19TVUZJWFwiLCBcIi5qc29uXCIpO1xufVxuXG5pZiAodHlwZW9mIGNvbmZpZyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICB2YXIgY29uZmlnID0ge1xuICAgIFNUT1JBR0VfRU5WOiBcInByb2RcIlxuICB9O1xufVxuXG4vKiBnbG9iYWwgZ2FkZ2V0cywgXyAqL1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLkltYWdlID0ge307XG5cblJpc2VWaXNpb24uSW1hZ2UgPSAoZnVuY3Rpb24gKGdhZGdldHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIF9tb2RlO1xuXG4gIHZhciBfcHJlZnMgPSBuZXcgZ2FkZ2V0cy5QcmVmcygpLFxuICAgIF9tZXNzYWdlID0gbnVsbCxcbiAgICBfcGFyYW1zID0gbnVsbDtcblxuICB2YXIgX3N0b3JhZ2UgPSBudWxsLFxuICAgIF9ub25TdG9yYWdlID0gbnVsbCxcbiAgICBfc2xpZGVyID0gbnVsbDtcblxuICB2YXIgX2N1cnJlbnRGaWxlcyA9IFtdO1xuXG4gIHZhciBfZXJyb3JMb2cgPSBudWxsLFxuICAgIF9lcnJvclRpbWVyID0gbnVsbCxcbiAgICBfZXJyb3JGbGFnID0gZmFsc2U7XG5cbiAgdmFyIF92aWV3ZXJQYXVzZWQgPSB0cnVlO1xuXG4gIHZhciBfc3RvcmFnZUVycm9yRmxhZyA9IGZhbHNlO1xuXG4gIC8qXG4gICAqICBQcml2YXRlIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIF9yZWFkeSgpIHtcbiAgICBnYWRnZXRzLnJwYy5jYWxsKFwiXCIsIFwicnNldmVudF9yZWFkeVwiLCBudWxsLCBfcHJlZnMuZ2V0U3RyaW5nKFwiaWRcIiksXG4gICAgICB0cnVlLCB0cnVlLCB0cnVlLCB0cnVlLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9kb25lKCkge1xuICAgIGdhZGdldHMucnBjLmNhbGwoXCJcIiwgXCJyc2V2ZW50X2RvbmVcIiwgbnVsbCwgX3ByZWZzLmdldFN0cmluZyhcImlkXCIpKTtcblxuICAgIC8vIEFueSBlcnJvcnMgbmVlZCB0byBiZSBsb2dnZWQgYmVmb3JlIHRoZSBkb25lIGV2ZW50LlxuICAgIGlmIChfZXJyb3JMb2cgIT09IG51bGwpIHtcbiAgICAgIGxvZ0V2ZW50KF9lcnJvckxvZywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8gbG9nIFwiZG9uZVwiIGV2ZW50XG4gICAgbG9nRXZlbnQoeyBcImV2ZW50XCI6IFwiZG9uZVwiLCBcImZpbGVfdXJsXCI6IF9nZXRDdXJyZW50RmlsZSgpIH0sIGZhbHNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGVhckVycm9yVGltZXIoKSB7XG4gICAgY2xlYXJUaW1lb3V0KF9lcnJvclRpbWVyKTtcbiAgICBfZXJyb3JUaW1lciA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBfc3RhcnRFcnJvclRpbWVyKCkge1xuICAgIF9jbGVhckVycm9yVGltZXIoKTtcblxuICAgIF9lcnJvclRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBub3RpZnkgVmlld2VyIHdpZGdldCBpcyBkb25lXG4gICAgICBfZG9uZSgpO1xuICAgIH0sIDUwMDApO1xuICB9XG5cbiAgZnVuY3Rpb24gX2dldEN1cnJlbnRGaWxlKCkge1xuICAgIHZhciBzbGlkZU51bSA9IC0xO1xuXG4gICAgaWYgKF9jdXJyZW50RmlsZXMgJiYgX2N1cnJlbnRGaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoX21vZGUgPT09IFwiZmlsZVwiKSB7XG4gICAgICAgIHJldHVybiBfY3VycmVudEZpbGVzWzBdO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoX21vZGUgPT09IFwiZm9sZGVyXCIgJiYgX3NsaWRlciAmJiBfc2xpZGVyLmlzUmVhZHkoKSkge1xuICAgICAgICAvLyByZXRyaWV2ZSB0aGUgY3VycmVudGx5IHBsYXllZCBzbGlkZVxuICAgICAgICBzbGlkZU51bSA9IF9zbGlkZXIuZ2V0Q3VycmVudFNsaWRlKCk7XG5cbiAgICAgICAgaWYgKHNsaWRlTnVtICE9PSAtMSkge1xuICAgICAgICAgIHJldHVybiBfY3VycmVudEZpbGVzW3NsaWRlTnVtXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250YWluZXJcIiksXG4gICAgICBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcbiAgICAgIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICAgIGRldGFpbHMgPSBudWxsLFxuICAgICAgaXNTdG9yYWdlRmlsZTtcblxuICAgIC8vIGNyZWF0ZSBpbnN0YW5jZSBvZiBtZXNzYWdlXG4gICAgX21lc3NhZ2UgPSBuZXcgUmlzZVZpc2lvbi5Db21tb24uTWVzc2FnZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRhaW5lclwiKSxcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWVzc2FnZUNvbnRhaW5lclwiKSk7XG5cbiAgICAvLyBzaG93IHdhaXQgbWVzc2FnZVxuICAgIF9tZXNzYWdlLnNob3coXCJQbGVhc2Ugd2FpdCB3aGlsZSB5b3VyIGltYWdlIGlzIGRvd25sb2FkZWQuXCIpO1xuXG4gICAgLy8gbGVnYWN5XG4gICAgaWYgKF9wYXJhbXMuYmFja2dyb3VuZCAmJiBPYmplY3Qua2V5cyhfcGFyYW1zLmJhY2tncm91bmQpLmxlbmd0aCA+IDApIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZCA9IF9wYXJhbXMuYmFja2dyb3VuZC5jb2xvcjtcbiAgICB9XG5cbiAgICBpZiAoX21vZGUgPT09IFwiZmlsZVwiKSB7XG4gICAgICAvLyBjcmVhdGUgdGhlIGltYWdlIDxkaXY+IHdpdGhpbiB0aGUgY29udGFpbmVyIDxkaXY+XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImltYWdlXCIpO1xuICAgICAgZWwuY2xhc3NOYW1lID0gX3BhcmFtcy5wb3NpdGlvbjtcbiAgICAgIGVsLmNsYXNzTmFtZSA9IF9wYXJhbXMuc2NhbGVUb0ZpdCA/IGVsLmNsYXNzTmFtZSArIFwiIHNjYWxlLXRvLWZpdFwiIDogZWwuY2xhc3NOYW1lO1xuXG4gICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChlbCk7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuXG4gICAgICBpc1N0b3JhZ2VGaWxlID0gKE9iamVjdC5rZXlzKF9wYXJhbXMuc3RvcmFnZSkubGVuZ3RoICE9PSAwKTtcblxuICAgICAgaWYgKCFpc1N0b3JhZ2VGaWxlKSB7XG4gICAgICAgIGRldGFpbHMgPSBcImN1c3RvbVwiO1xuXG4gICAgICAgIF9ub25TdG9yYWdlID0gbmV3IFJpc2VWaXNpb24uSW1hZ2UuTm9uU3RvcmFnZShfcGFyYW1zKTtcbiAgICAgICAgX25vblN0b3JhZ2UuaW5pdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGV0YWlscyA9IFwic3RvcmFnZSBmaWxlXCI7XG5cbiAgICAgICAgLy8gY3JlYXRlIGFuZCBpbml0aWFsaXplIHRoZSBTdG9yYWdlIGZpbGUgaW5zdGFuY2VcbiAgICAgICAgX3N0b3JhZ2UgPSBuZXcgUmlzZVZpc2lvbi5JbWFnZS5TdG9yYWdlRmlsZShfcGFyYW1zKTtcbiAgICAgICAgX3N0b3JhZ2UuaW5pdCgpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChfbW9kZSA9PT0gXCJmb2xkZXJcIikge1xuICAgICAgLy8gY3JlYXRlIHRoZSBzbGlkZXIgY29udGFpbmVyIDxkaXY+IHdpdGhpbiB0aGUgY29udGFpbmVyIDxkaXY+XG4gICAgICBlbC5jbGFzc05hbWUgPSBcInRwLWJhbm5lci1jb250YWluZXJcIjtcblxuICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGZyYWdtZW50KTtcblxuICAgICAgZGV0YWlscyA9IFwic3RvcmFnZSBmb2xkZXJcIjtcblxuICAgICAgLy8gY3JlYXRlIGFuZCBpbml0aWFsaXplIHRoZSBTdG9yYWdlIGZvbGRlciBpbnN0YW5jZVxuICAgICAgX3N0b3JhZ2UgPSBuZXcgUmlzZVZpc2lvbi5JbWFnZS5TdG9yYWdlRm9sZGVyKF9wYXJhbXMpO1xuICAgICAgX3N0b3JhZ2UuaW5pdCgpO1xuICAgIH1cblxuICAgIFJpc2VWaXNpb24uQ29tbW9uLkxvZ2dlclV0aWxzLmxvZ0V2ZW50KGdldFRhYmxlTmFtZSgpLCB7IFwiZXZlbnRcIjogXCJjb25maWd1cmF0aW9uXCIsIFwiZXZlbnRfZGV0YWlsc1wiOiBkZXRhaWxzIH0pO1xuXG4gICAgX3JlYWR5KCk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRTaW5nbGVJbWFnZSh1cmwpIHtcbiAgICB2YXIgaW1hZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NvbnRhaW5lciAjaW1hZ2VcIik7XG4gICAgaW1hZ2Uuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gXCJ1cmwoXCIgKyB1cmwgKyBcIilcIjtcbiAgfVxuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gaGFzU3RvcmFnZUVycm9yKCkge1xuICAgIHJldHVybiBfc3RvcmFnZUVycm9yRmxhZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvZ0V2ZW50KHBhcmFtcywgaXNFcnJvcikge1xuICAgIGlmIChpc0Vycm9yKSB7XG4gICAgICBfZXJyb3JMb2cgPSBwYXJhbXM7XG4gICAgfVxuXG4gICAgUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyVXRpbHMubG9nRXZlbnQoZ2V0VGFibGVOYW1lKCksIHBhcmFtcyk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkZpbGVJbml0KHVybHMpIHtcbiAgICBpZiAoX21vZGUgPT09IFwiZmlsZVwiKSB7XG4gICAgICAvLyB1cmxzIHZhbHVlIHdpbGwgYmUgYSBzdHJpbmdcbiAgICAgIF9jdXJyZW50RmlsZXNbMF0gPSB1cmxzO1xuXG4gICAgICAvLyByZW1vdmUgYSBtZXNzYWdlIHByZXZpb3VzbHkgc2hvd25cbiAgICAgIF9tZXNzYWdlLmhpZGUoKTtcblxuICAgICAgc2V0U2luZ2xlSW1hZ2UoX2N1cnJlbnRGaWxlc1swXSk7XG5cbiAgICB9IGVsc2UgaWYgKF9tb2RlID09PSBcImZvbGRlclwiKSB7XG4gICAgICAvLyB1cmxzIHZhbHVlIHdpbGwgYmUgYW4gYXJyYXlcbiAgICAgIF9jdXJyZW50RmlsZXMgPSB1cmxzO1xuXG4gICAgICAvLyBjcmVhdGUgc2xpZGVyIGluc3RhbmNlXG4gICAgICBfc2xpZGVyID0gbmV3IFJpc2VWaXNpb24uSW1hZ2UuU2xpZGVyKF9wYXJhbXMpO1xuICAgICAgX3NsaWRlci5pbml0KHVybHMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRmlsZVJlZnJlc2godXJscykge1xuICAgIGlmIChfbW9kZSA9PT0gXCJmaWxlXCIpIHtcbiAgICAgIC8vIHVybHMgdmFsdWUgd2lsbCBiZSBhIHN0cmluZyBvZiBvbmUgdXJsXG4gICAgICBfY3VycmVudEZpbGVzWzBdID0gdXJscztcblxuICAgICAgc2V0U2luZ2xlSW1hZ2UoX2N1cnJlbnRGaWxlc1swXSk7XG5cbiAgICB9IGVsc2UgaWYgKF9tb2RlID09PSBcImZvbGRlclwiKSB7XG4gICAgICAvLyB1cmxzIHZhbHVlIHdpbGwgYmUgYW4gYXJyYXkgb2YgdXJsc1xuICAgICAgX2N1cnJlbnRGaWxlcyA9IHVybHM7XG5cbiAgICAgIF9zbGlkZXIucmVmcmVzaChfY3VycmVudEZpbGVzKTtcbiAgICB9XG5cbiAgICAvLyBpbiBjYXNlIHJlZnJlc2hlZCBmaWxlIGZpeGVzIGFuIGVycm9yIHdpdGggcHJldmlvdXMgZmlsZSwgZW5zdXJlIGZsYWcgaXMgcmVtb3ZlZCBzbyBwbGF5YmFjayBpcyBhdHRlbXB0ZWQgYWdhaW5cbiAgICBfZXJyb3JGbGFnID0gZmFsc2U7XG4gICAgX3N0b3JhZ2VFcnJvckZsYWcgPSBmYWxzZTtcbiAgICBfZXJyb3JMb2cgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0QWRkaXRpb25hbFBhcmFtcyhhZGRpdGlvbmFsUGFyYW1zLCBtb2RlVHlwZSkge1xuICAgIF9wYXJhbXMgPSBfLmNsb25lKGFkZGl0aW9uYWxQYXJhbXMpO1xuICAgIF9tb2RlID0gbW9kZVR5cGU7XG5cbiAgICBfcGFyYW1zLndpZHRoID0gX3ByZWZzLmdldEludChcInJzV1wiKTtcbiAgICBfcGFyYW1zLmhlaWdodCA9IF9wcmVmcy5nZXRJbnQoXCJyc0hcIik7XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRhaW5lclwiKS5zdHlsZS5oZWlnaHQgPSBfcHJlZnMuZ2V0SW50KFwicnNIXCIpICsgXCJweFwiO1xuICAgIGluaXQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uU2xpZGVyUmVhZHkoKSB7XG4gICAgX21lc3NhZ2UuaGlkZSgpO1xuXG4gICAgaWYgKCFfdmlld2VyUGF1c2VkKSB7XG4gICAgICBfc2xpZGVyLnBsYXkoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblNsaWRlckNvbXBsZXRlKCkge1xuICAgIF9kb25lKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICBfdmlld2VyUGF1c2VkID0gdHJ1ZTtcblxuICAgIC8vIGluIGNhc2UgZXJyb3IgdGltZXIgc3RpbGwgcnVubmluZyAobm8gY29uZGl0aW9uYWwgY2hlY2sgb24gZXJyb3JGbGFnLCBpdCBtYXkgaGF2ZSBiZWVuIHJlc2V0IGluIG9uRmlsZVJlZnJlc2gpXG4gICAgX2NsZWFyRXJyb3JUaW1lcigpO1xuXG4gICAgaWYgKF9tb2RlID09PSBcImZvbGRlclwiICYmIF9zbGlkZXIgJiYgX3NsaWRlci5pc1JlYWR5KCkpIHtcbiAgICAgIF9zbGlkZXIucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwbGF5KCkge1xuICAgIF92aWV3ZXJQYXVzZWQgPSBmYWxzZTtcblxuICAgIGxvZ0V2ZW50KHsgXCJldmVudFwiOiBcInBsYXlcIiwgXCJmaWxlX3VybFwiOiBfZ2V0Q3VycmVudEZpbGUoKSB9LCBmYWxzZSk7XG5cbiAgICBpZiAoX2Vycm9yRmxhZykge1xuICAgICAgX3N0YXJ0RXJyb3JUaW1lcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChfbW9kZSA9PT0gXCJmb2xkZXJcIiAmJiBfc2xpZGVyICYmIF9zbGlkZXIuaXNSZWFkeSgpKSB7XG4gICAgICBfc2xpZGVyLnBsYXkoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUYWJsZU5hbWUoKSB7XG4gICAgcmV0dXJuIFwiaW1hZ2VfZXZlbnRzXCI7XG4gIH1cblxuICBmdW5jdGlvbiBzaG93RXJyb3IobWVzc2FnZSwgaXNTdG9yYWdlRXJyb3IpIHtcbiAgICBfZXJyb3JGbGFnID0gdHJ1ZTtcbiAgICBfc3RvcmFnZUVycm9yRmxhZyA9IHR5cGVvZiBpc1N0b3JhZ2VFcnJvciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgIF9tZXNzYWdlLnNob3cobWVzc2FnZSk7XG5cbiAgICAvLyBkZXN0cm95IHNsaWRlciBpZiBpdCBleGlzdHMgYW5kIHByZXZpb3VzbHkgbm90aWZpZWQgcmVhZHlcbiAgICBpZiAoX21vZGUgPT09IFwiZm9sZGVyXCIgJiYgX3NsaWRlciAmJiBfc2xpZGVyLmlzUmVhZHkoKSkge1xuICAgICAgX3NsaWRlci5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgaWYgKCFfdmlld2VyUGF1c2VkKSB7XG4gICAgICBfc3RhcnRFcnJvclRpbWVyKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBwYXVzZSgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBcImhhc1N0b3JhZ2VFcnJvclwiOiBoYXNTdG9yYWdlRXJyb3IsXG4gICAgXCJsb2dFdmVudFwiOiBsb2dFdmVudCxcbiAgICBcIm9uRmlsZUluaXRcIjogb25GaWxlSW5pdCxcbiAgICBcIm9uRmlsZVJlZnJlc2hcIjogb25GaWxlUmVmcmVzaCxcbiAgICBcIm9uU2xpZGVyQ29tcGxldGVcIjogb25TbGlkZXJDb21wbGV0ZSxcbiAgICBcIm9uU2xpZGVyUmVhZHlcIjogb25TbGlkZXJSZWFkeSxcbiAgICBcInBhdXNlXCI6IHBhdXNlLFxuICAgIFwicGxheVwiOiBwbGF5LFxuICAgIFwic2V0QWRkaXRpb25hbFBhcmFtc1wiOiBzZXRBZGRpdGlvbmFsUGFyYW1zLFxuICAgIFwiZ2V0VGFibGVOYW1lXCI6IGdldFRhYmxlTmFtZSxcbiAgICBcInNob3dFcnJvclwiOiBzaG93RXJyb3IsXG4gICAgXCJzdG9wXCI6IHN0b3BcbiAgfTtcbn0pKGdhZGdldHMpO1xuXG4vKiBnbG9iYWwgXyAqL1xudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5JbWFnZSA9IFJpc2VWaXNpb24uSW1hZ2UgfHwge307XG5cblJpc2VWaXNpb24uSW1hZ2UuU2xpZGVyID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgdG90YWxTbGlkZXMgPSAwLFxuICAgICRhcGkgPSBudWxsLFxuICAgIGN1cnJlbnRGaWxlcyA9IG51bGwsXG4gICAgbmV3RmlsZXMgPSBudWxsLFxuICAgIG5hdlRpbWVyID0gbnVsbCxcbiAgICBzbGlkZVRpbWVyID0gbnVsbCxcbiAgICBpc0xhc3RTbGlkZSA9IGZhbHNlLFxuICAgIHJlZnJlc2hTbGlkZXIgPSBmYWxzZSxcbiAgICBpc0xvYWRpbmcgPSB0cnVlLFxuICAgIGlzUGxheWluZyA9IGZhbHNlLFxuICAgIGlzSW50ZXJhY3RpbmcgPSBmYWxzZSxcbiAgICBuYXZUaW1lb3V0ID0gMzAwMDtcblxuICAvKlxuICAgKiAgUHJpdmF0ZSBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBhZGRTbGlkZXMoKSB7XG4gICAgdmFyIGxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRwLWJhbm5lciB1bFwiKSxcbiAgICAgIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgICAgc2xpZGVzID0gW10sXG4gICAgICBzbGlkZSA9IG51bGwsXG4gICAgICBpbWFnZSA9IG51bGwsXG4gICAgICBwb3NpdGlvbiA9IFwiXCI7XG5cbiAgICB0b3RhbFNsaWRlcyA9IGN1cnJlbnRGaWxlcy5sZW5ndGg7XG5cbiAgICBjdXJyZW50RmlsZXMuZm9yRWFjaChmdW5jdGlvbihmaWxlKSB7XG4gICAgICBzbGlkZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICAgIGltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcblxuICAgICAgLy8gVHJhbnNpdGlvblxuICAgICAgc2xpZGUuc2V0QXR0cmlidXRlKFwiZGF0YS10cmFuc2l0aW9uXCIsIFwiZmFkZVwiKTtcbiAgICAgIHNsaWRlLnNldEF0dHJpYnV0ZShcImRhdGEtbWFzdGVyc3BlZWRcIiwgNTAwKTtcbiAgICAgIHNsaWRlLnNldEF0dHJpYnV0ZShcImRhdGEtZGVsYXlcIiwgcGFyYW1zLmR1cmF0aW9uICogMTAwMCk7XG5cbiAgICAgIGltYWdlLnNyYyA9IGZpbGUudXJsO1xuXG4gICAgICAvLyBBbGlnbm1lbnRcbiAgICAgIHN3aXRjaCAocGFyYW1zLnBvc2l0aW9uKSB7XG4gICAgICAgIGNhc2UgXCJ0b3AtbGVmdFwiOlxuICAgICAgICAgIHBvc2l0aW9uID0gXCJsZWZ0IHRvcFwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidG9wLWNlbnRlclwiOlxuICAgICAgICAgIHBvc2l0aW9uID0gXCJjZW50ZXIgdG9wXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ0b3AtcmlnaHRcIjpcbiAgICAgICAgICBwb3NpdGlvbiA9IFwicmlnaHQgdG9wXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtaWRkbGUtbGVmdFwiOlxuICAgICAgICAgIHBvc2l0aW9uID0gXCJsZWZ0IGNlbnRlclwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibWlkZGxlLWNlbnRlclwiOlxuICAgICAgICAgIHBvc2l0aW9uID0gXCJjZW50ZXIgY2VudGVyXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtaWRkbGUtcmlnaHRcIjpcbiAgICAgICAgICBwb3NpdGlvbiA9IFwicmlnaHQgY2VudGVyXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJib3R0b20tbGVmdFwiOlxuICAgICAgICAgIHBvc2l0aW9uID0gXCJsZWZ0IGJvdHRvbVwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYm90dG9tLWNlbnRlclwiOlxuICAgICAgICAgIHBvc2l0aW9uID0gXCJjZW50ZXIgYm90dG9tXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJib3R0b20tcmlnaHRcIjpcbiAgICAgICAgICBwb3NpdGlvbiA9IFwicmlnaHQgYm90dG9tXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcG9zaXRpb24gPSBcImxlZnQgdG9wXCI7XG4gICAgICB9XG5cbiAgICAgIGltYWdlLnNldEF0dHJpYnV0ZShcImRhdGEtYmdwb3NpdGlvblwiLCBwb3NpdGlvbik7XG5cbiAgICAgIC8vIFNjYWxlIHRvIEZpdFxuICAgICAgaWYgKHBhcmFtcy5zY2FsZVRvRml0KSB7XG4gICAgICAgIGltYWdlLnNldEF0dHJpYnV0ZShcImRhdGEtYmdmaXRcIiwgXCJjb250YWluXCIpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGltYWdlLnNldEF0dHJpYnV0ZShcImRhdGEtYmdmaXRcIiwgXCJub3JtYWxcIik7XG4gICAgICB9XG5cbiAgICAgIHNsaWRlLmFwcGVuZENoaWxkKGltYWdlKTtcbiAgICAgIHNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICB9KTtcblxuICAgIHNsaWRlcy5mb3JFYWNoKGZ1bmN0aW9uKHNsaWRlKSB7XG4gICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChzbGlkZSk7XG4gICAgfSk7XG5cbiAgICBsaXN0LmFwcGVuZENoaWxkKGZyYWdtZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uU2xpZGVDaGFuZ2VkKGRhdGEpIHtcbiAgICBpZiAoaXNJbnRlcmFjdGluZykge1xuICAgICAgcGF1c2UoKTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgY2FsbCBcImRvbmVcIiBpZiB1c2VyIGlzIGludGVyYWN0aW5nIHdpdGggdGhlIHNsaWRlc2hvdy5cbiAgICBlbHNlIHtcbiAgICAgIGlmIChpc0xhc3RTbGlkZSkge1xuICAgICAgICBpc0xhc3RTbGlkZSA9IGZhbHNlO1xuICAgICAgICBwYXVzZSgpO1xuICAgICAgICBSaXNlVmlzaW9uLkltYWdlLm9uU2xpZGVyQ29tcGxldGUoKTtcblxuICAgICAgICBpZiAocmVmcmVzaFNsaWRlcikge1xuICAgICAgICAgIC8vIERlc3Ryb3kgYW5kIHJlY3JlYXRlIHRoZSBzbGlkZXIgaWYgdGhlIGZpbGVzIGhhdmUgY2hhbmdlZC5cbiAgICAgICAgICBpZiAoJGFwaSkge1xuICAgICAgICAgICAgZGVzdHJveVNsaWRlcigpO1xuICAgICAgICAgICAgaW5pdChuZXdGaWxlcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVmcmVzaFNsaWRlciA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuc2xpZGVJbmRleCA9PT0gdG90YWxTbGlkZXMpIHtcbiAgICAgIGlzTGFzdFNsaWRlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95U2xpZGVyKCkge1xuICAgIC8vIFJlbW92ZSBldmVudCBoYW5kbGVycy5cbiAgICAkKFwiYm9keVwiKS5vZmYoXCJ0b3VjaGVuZFwiKTtcbiAgICAkYXBpLm9mZihcInJldm9sdXRpb24uc2xpZGUub25sb2FkZWRcIik7XG4gICAgJGFwaS5vZmYoXCJyZXZvbHV0aW9uLnNsaWRlLm9uY2hhbmdlXCIpO1xuXG4gICAgLy8gTGV0IHRoZSBzbGlkZXIgY2xlYW4gdXAgYWZ0ZXIgaXRzZWxmLlxuICAgICRhcGkucmV2a2lsbCgpO1xuICAgICRhcGkgPSBudWxsO1xuICB9XG5cbiAgLy8gVXNlciBoYXMgaW50ZXJhY3RlZCB3aXRoIHRoZSBzbGlkZXNob3cuXG4gIGZ1bmN0aW9uIGhhbmRsZVVzZXJBY3Rpdml0eSgpIHtcbiAgICBpc0ludGVyYWN0aW5nID0gdHJ1ZTtcbiAgICBjbGVhclRpbWVvdXQoc2xpZGVUaW1lcik7XG5cbiAgICAvLyBNb3ZlIHRvIG5leHQgc2xpZGUgYW5kIHJlc3VtZSB0aGUgc2xpZGVzaG93IGFmdGVyIGEgZGVsYXkuXG4gICAgc2xpZGVUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAkYXBpLnJldm5leHQoKTtcbiAgICAgICRhcGkucmV2cmVzdW1lKCk7XG5cbiAgICAgIGlzSW50ZXJhY3RpbmcgPSBmYWxzZTtcbiAgICAgIGlzUGxheWluZyA9IHRydWU7XG4gICAgfSwgcGFyYW1zLnBhdXNlICogMTAwMCk7XG5cbiAgICBoaWRlTmF2KCk7XG4gIH1cblxuICAvLyBIaWRlIHRoZSBuYXZpZ2F0aW9uIGFmdGVyIGEgZGVsYXkuXG4gIGZ1bmN0aW9uIGhpZGVOYXYoKSB7XG4gICAgaWYgKHBhcmFtcy5hdXRvSGlkZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KG5hdlRpbWVyKTtcblxuICAgICAgbmF2VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAkKFwiLnRwLWxlZnRhcnJvdywgLnRwLXJpZ2h0YXJyb3dcIikuYWRkQ2xhc3MoXCJoaWRlYXJyb3dzXCIpO1xuICAgICAgfSwgbmF2VGltZW91dCk7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogIFB1YmxpYyBNZXRob2RzXG4gICAqICBUT0RPOiBUZXN0IHdoYXQgaGFwcGVucyB3aGVuIGZvbGRlciBpc24ndCBmb3VuZC5cbiAgICovXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgaWYgKCRhcGkpIHtcbiAgICAgIGlzTGFzdFNsaWRlID0gZmFsc2U7XG4gICAgICBwYXVzZSgpO1xuICAgICAgZGVzdHJveVNsaWRlcigpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnRTbGlkZSgpIHtcbiAgICBpZiAoJGFwaSAmJiBjdXJyZW50RmlsZXMgJiYgY3VycmVudEZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiAkYXBpLnJldmN1cnJlbnRzbGlkZSgpO1xuICAgIH1cblxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoZmlsZXMpIHtcbiAgICB2YXIgdHBCYW5uZXJDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRwLWJhbm5lci1jb250YWluZXJcIiksXG4gICAgICBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcbiAgICAgIHRwQmFubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICAgIHVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuXG4gICAgdHBCYW5uZXIuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJ0cC1iYW5uZXJcIik7XG4gICAgdHBCYW5uZXIuYXBwZW5kQ2hpbGQodWwpO1xuICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHRwQmFubmVyKTtcbiAgICB0cEJhbm5lckNvbnRhaW5lci5hcHBlbmRDaGlsZChmcmFnbWVudCk7XG5cbiAgICBjdXJyZW50RmlsZXMgPSBfLmNsb25lKGZpbGVzKTtcblxuICAgIGFkZFNsaWRlcygpO1xuXG4gICAgaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICAkYXBpID0gJChcIi50cC1iYW5uZXJcIikucmV2b2x1dGlvbih7XG4gICAgICBcImhpZGVUaHVtYnNcIjogMCxcbiAgICAgIFwiaGlkZVRpbWVyQmFyXCI6IFwib25cIixcbiAgICAgIFwibmF2aWdhdGlvblR5cGVcIjogXCJub25lXCIsXG4gICAgICBcIm9uSG92ZXJTdG9wXCI6IFwib2ZmXCIsXG4gICAgICBcInN0YXJ0d2lkdGhcIjogcGFyYW1zLndpZHRoLFxuICAgICAgXCJzdGFydGhlaWdodFwiOiBwYXJhbXMuaGVpZ2h0XG4gICAgfSk7XG5cbiAgICAkYXBpLm9uKFwicmV2b2x1dGlvbi5zbGlkZS5vbmxvYWRlZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFBhdXNlIHNsaWRlc2hvdyBzaW5jZSBpdCB3aWxsIGF1dG9wbGF5IGFuZCB0aGlzIGlzIG5vdCBjb25maWd1cmFibGUuXG4gICAgICBwYXVzZSgpO1xuICAgICAgaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICBSaXNlVmlzaW9uLkltYWdlLm9uU2xpZGVyUmVhZHkoKTtcbiAgICB9KTtcblxuICAgICRhcGkub24oXCJyZXZvbHV0aW9uLnNsaWRlLm9uY2hhbmdlXCIsIGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICBvblNsaWRlQ2hhbmdlZChkYXRhKTtcbiAgICB9KTtcblxuICAgIC8vIFN3aXBlIHRoZSBzbGlkZXIuXG4gICAgJChcImJvZHlcIikub24oXCJ0b3VjaGVuZFwiLCBcIi50cC1iYW5uZXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICBoYW5kbGVVc2VyQWN0aXZpdHkoKTtcbiAgICAgICQoXCIudHAtbGVmdGFycm93LCAudHAtcmlnaHRhcnJvd1wiKS5yZW1vdmVDbGFzcyhcImhpZGVhcnJvd3NcIik7XG4gICAgfSk7XG5cbiAgICAvLyBUb3VjaCB0aGUgbmF2aWdhdGlvbiBhcnJvd3MuXG4gICAgJChcImJvZHlcIikub24oXCJ0b3VjaGVuZFwiLCBcIi50cC1sZWZ0YXJyb3csIC50cC1yaWdodGFycm93XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgaGFuZGxlVXNlckFjdGl2aXR5KCk7XG4gICAgfSk7XG5cbiAgICBoaWRlTmF2KCk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1JlYWR5KCkge1xuICAgIHJldHVybiAhaXNMb2FkaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gcGxheSgpIHtcbiAgICBpZiAoJGFwaSkge1xuICAgICAgLy8gUmVzZXQgc2xpZGVzaG93IHRvIGZpcnN0IHNsaWRlLlxuICAgICAgaWYgKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShcInJlc3VtZVwiKSAmJiAhcGFyYW1zLnJlc3VtZSkge1xuICAgICAgICAkYXBpLnJldnNob3dzbGlkZSgwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1BsYXlpbmcpIHtcbiAgICAgICAgJGFwaS5yZXZyZXN1bWUoKTtcbiAgICAgICAgaXNQbGF5aW5nID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICBpZiAoJGFwaSAmJiBpc1BsYXlpbmcpIHtcbiAgICAgICRhcGkucmV2cGF1c2UoKTtcbiAgICAgIGlzUGxheWluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZnJlc2goZmlsZXMpIHtcbiAgICAvLyBTdGFydCBwcmVsb2FkaW5nIGltYWdlcyByaWdodCBhd2F5LlxuICAgIFJpc2VWaXNpb24uQ29tbW9uLlV0aWxpdGllcy5wcmVsb2FkSW1hZ2VzKGZpbGVzKTtcbiAgICBuZXdGaWxlcyA9IF8uY2xvbmUoZmlsZXMpO1xuICAgIHJlZnJlc2hTbGlkZXIgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBcImdldEN1cnJlbnRTbGlkZVwiOiBnZXRDdXJyZW50U2xpZGUsXG4gICAgXCJkZXN0cm95XCI6IGRlc3Ryb3ksXG4gICAgXCJpbml0XCI6IGluaXQsXG4gICAgXCJpc1JlYWR5XCI6IGlzUmVhZHksXG4gICAgXCJwbGF5XCI6IHBsYXksXG4gICAgXCJwYXVzZVwiOiBwYXVzZSxcbiAgICBcInJlZnJlc2hcIjogcmVmcmVzaFxuICB9O1xufTtcblxuLyogZ2xvYmFsIGNvbmZpZyAqL1xudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5JbWFnZSA9IFJpc2VWaXNpb24uSW1hZ2UgfHwge307XG5cblJpc2VWaXNpb24uSW1hZ2UuU3RvcmFnZUZpbGUgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBfaW5pdGlhbExvYWQgPSB0cnVlO1xuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgc3RvcmFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJyaXNlLXN0b3JhZ2VcIik7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2UtcmVzcG9uc2VcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHVybDtcblxuICAgICAgaWYgKGUuZGV0YWlsICYmIGUuZGV0YWlsLnVybCkge1xuXG4gICAgICAgIHVybCA9IGUuZGV0YWlsLnVybC5yZXBsYWNlKFwiJ1wiLCBcIlxcXFwnXCIpO1xuXG4gICAgICAgIGlmIChfaW5pdGlhbExvYWQpIHtcbiAgICAgICAgICBfaW5pdGlhbExvYWQgPSBmYWxzZTtcblxuICAgICAgICAgIFJpc2VWaXNpb24uSW1hZ2Uub25GaWxlSW5pdCh1cmwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIC8vIGNoZWNrIGZvciBcImNoYW5nZWRcIiBwcm9wZXJ0eVxuICAgICAgICAgIGlmIChlLmRldGFpbC5oYXNPd25Qcm9wZXJ0eShcImNoYW5nZWRcIikpIHtcbiAgICAgICAgICAgIGlmIChlLmRldGFpbC5jaGFuZ2VkKSB7XG4gICAgICAgICAgICAgIFJpc2VWaXNpb24uSW1hZ2Uub25GaWxlUmVmcmVzaCh1cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGluIHRoZSBldmVudCBvZiBhIG5ldHdvcmsgZmFpbHVyZSBhbmQgcmVjb3ZlcnksIGNoZWNrIGlmIHRoZSBXaWRnZXQgaXMgaW4gYSBzdGF0ZSBvZiBzdG9yYWdlIGVycm9yXG4gICAgICAgICAgICAgIGlmIChSaXNlVmlzaW9uLkltYWdlLmhhc1N0b3JhZ2VFcnJvcigpKSB7XG4gICAgICAgICAgICAgICAgLy8gcHJvY2VlZCB3aXRoIHJlZnJlc2ggbG9naWMgc28gdGhlIFdpZGdldCBjYW4gZXZlbnR1YWxseSBwbGF5IHZpZGVvIGFnYWluIGZyb20gYSBuZXR3b3JrIHJlY292ZXJ5XG4gICAgICAgICAgICAgICAgUmlzZVZpc2lvbi5JbWFnZS5vbkZpbGVSZWZyZXNoKGUuZGV0YWlsLnVybCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2Utc3RvcmFnZS1uby1maWxlXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIFwiZXZlbnRcIjogXCJlcnJvclwiLFxuICAgICAgICBcImV2ZW50X2RldGFpbHNcIjogXCJzdG9yYWdlIGZpbGUgbm90IGZvdW5kXCIsXG4gICAgICAgIFwiZmlsZV91cmxcIjogZS5kZXRhaWxcbiAgICAgIH0sXG4gICAgICAgIGltZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW1hZ2VcIik7XG5cbiAgICAgIC8vIGNsZWFyIHRoZSBleGlzdGluZyBpbWFnZVxuICAgICAgaW1nLnN0eWxlLmJhY2tncm91bmQgPSBcIlwiO1xuXG4gICAgICBSaXNlVmlzaW9uLkltYWdlLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLkltYWdlLnNob3dFcnJvcihcIlRoZSBzZWxlY3RlZCBpbWFnZSBkb2VzIG5vdCBleGlzdCBvciBoYXMgYmVlbiBtb3ZlZCB0byBUcmFzaC5cIik7XG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2UtZmlsZS10aHJvdHRsZWRcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgXCJldmVudFwiOiBcImVycm9yXCIsXG4gICAgICAgIFwiZXZlbnRfZGV0YWlsc1wiOiBcInN0b3JhZ2UgZmlsZSB0aHJvdHRsZWRcIixcbiAgICAgICAgXCJmaWxlX3VybFwiOiBlLmRldGFpbFxuICAgICAgfTtcblxuICAgICAgUmlzZVZpc2lvbi5JbWFnZS5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuICAgICAgUmlzZVZpc2lvbi5JbWFnZS5zaG93RXJyb3IoXCJUaGUgc2VsZWN0ZWQgaW1hZ2UgaXMgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUuXCIpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1zdG9yYWdlLWVycm9yXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBmaWxlVXJsID0gKGUuZGV0YWlsICYmIGUuZGV0YWlsLnJlcXVlc3QgJiYgZS5kZXRhaWwucmVxdWVzdC51cmwpID8gZS5kZXRhaWwucmVxdWVzdC51cmwgOiBudWxsLFxuICAgICAgICBwYXJhbXMgPSB7XG4gICAgICAgICAgXCJldmVudFwiOiBcImVycm9yXCIsXG4gICAgICAgICAgXCJldmVudF9kZXRhaWxzXCI6IFwicmlzZSBzdG9yYWdlIGVycm9yXCIsXG4gICAgICAgICAgXCJlcnJvcl9kZXRhaWxzXCI6IFwiVGhlIHJlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGU6IFwiICsgZS5kZXRhaWwuZXJyb3IuY3VycmVudFRhcmdldC5zdGF0dXMsXG4gICAgICAgICAgXCJmaWxlX3VybFwiOiBmaWxlVXJsXG4gICAgICAgIH07XG5cbiAgICAgIFJpc2VWaXNpb24uSW1hZ2UubG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcbiAgICAgIFJpc2VWaXNpb24uSW1hZ2Uuc2hvd0Vycm9yKFwiU29ycnksIHRoZXJlIHdhcyBhIHByb2JsZW0gY29tbXVuaWNhdGluZyB3aXRoIFJpc2UgU3RvcmFnZS5cIiwgdHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLWNhY2hlLWVycm9yXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBmaWxlVXJsID0gKGUuZGV0YWlsICYmIGUuZGV0YWlsLnJlcXVlc3QgJiYgZS5kZXRhaWwucmVxdWVzdC51cmwpID8gZS5kZXRhaWwucmVxdWVzdC51cmwgOiBudWxsLFxuICAgICAgICBwYXJhbXMgPSB7XG4gICAgICAgICAgXCJldmVudFwiOiBcImVycm9yXCIsXG4gICAgICAgICAgXCJldmVudF9kZXRhaWxzXCI6IFwicmlzZSBjYWNoZSBlcnJvclwiLFxuICAgICAgICAgIFwiZXJyb3JfZGV0YWlsc1wiOiBcIlRoZSByZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlOiBcIiArIGUuZGV0YWlsLmVycm9yLmN1cnJlbnRUYXJnZXQuc3RhdHVzLFxuICAgICAgICAgIFwiZmlsZV91cmxcIjogZmlsZVVybFxuICAgICAgICB9O1xuXG4gICAgICBSaXNlVmlzaW9uLkltYWdlLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLkltYWdlLnNob3dFcnJvcihcIlRoZXJlIHdhcyBhIHByb2JsZW0gcmV0cmlldmluZyB0aGUgZmlsZSBmcm9tIFJpc2UgQ2FjaGUuXCIpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5zZXRBdHRyaWJ1dGUoXCJmb2xkZXJcIiwgcGFyYW1zLnN0b3JhZ2UuZm9sZGVyKTtcbiAgICBzdG9yYWdlLnNldEF0dHJpYnV0ZShcImZpbGVOYW1lXCIsIHBhcmFtcy5zdG9yYWdlLmZpbGVOYW1lKTtcbiAgICBzdG9yYWdlLnNldEF0dHJpYnV0ZShcImNvbXBhbnlJZFwiLCBwYXJhbXMuc3RvcmFnZS5jb21wYW55SWQpO1xuICAgIHN0b3JhZ2Uuc2V0QXR0cmlidXRlKFwiZW52XCIsIGNvbmZpZy5TVE9SQUdFX0VOVik7XG4gICAgc3RvcmFnZS5nbygpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBcImluaXRcIjogaW5pdFxuICB9O1xufTtcblxuLyogZ2xvYmFsIGNvbmZpZywgXyAqL1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLkltYWdlID0gUmlzZVZpc2lvbi5JbWFnZSB8fCB7fTtcblxuUmlzZVZpc2lvbi5JbWFnZS5TdG9yYWdlRm9sZGVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIF9pc0xvYWRpbmcgPSB0cnVlLFxuICAgIF9maWxlcyA9IFtdLFxuICAgIF90aW1lciA9IG51bGw7XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc1VybChlKSB7XG4gICAgdmFyIGZpbGU7XG5cbiAgICBpZiAoZS5kZXRhaWwpIHtcblxuICAgICAgLy8gSW1hZ2UgaGFzIGJlZW4gYWRkZWQuXG4gICAgICBpZiAoZS5kZXRhaWwuYWRkZWQpIHtcbiAgICAgICAgX2ZpbGVzLnB1c2goe1xuICAgICAgICAgIFwibmFtZVwiOiBlLmRldGFpbC5uYW1lLFxuICAgICAgICAgIFwidXJsXCI6IGUuZGV0YWlsLnVybFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gSW1hZ2UgaGFzIGJlZW4gY2hhbmdlZC5cbiAgICAgIGlmIChlLmRldGFpbC5jaGFuZ2VkKSB7XG4gICAgICAgIGZpbGUgPSBfLmZpbmQoX2ZpbGVzLCBmdW5jdGlvbiAoZmlsZSkge1xuICAgICAgICAgIHJldHVybiBmaWxlLm5hbWUgPT09IGUuZGV0YWlsLm5hbWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZpbGUudXJsID0gZS5kZXRhaWwudXJsO1xuICAgICAgfVxuXG4gICAgICAvLyBJbWFnZSBoYXMgYmVlbiBkZWxldGVkLlxuICAgICAgaWYgKGUuZGV0YWlsLmRlbGV0ZWQpIHtcbiAgICAgICAgX2ZpbGVzID0gXy5yZWplY3QoX2ZpbGVzLCBmdW5jdGlvbihmaWxlKSB7XG4gICAgICAgICAgcmV0dXJuIGZpbGUubmFtZSA9PT0gZS5kZXRhaWwubmFtZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX2ZpbGVzID0gXy5zb3J0QnkoX2ZpbGVzLCBmdW5jdGlvbihmaWxlKSB7XG4gICAgICByZXR1cm4gZmlsZS5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVSZXNwb25zZShlKSB7XG4gICAgcHJvY2Vzc1VybChlKTtcblxuICAgIC8vIEltYWdlIGhhcyBiZWVuIGFkZGVkLlxuICAgIGlmIChlLmRldGFpbC5hZGRlZCkge1xuICAgICAgaWYgKF9pc0xvYWRpbmcpIHtcbiAgICAgICAgLy8gTmVlZCB0byB3YWl0IGZvciBhdCBsZWFzdCAyIGltYWdlcyB0byBsb2FkIGJlZm9yZSBpbml0aWFsaXppbmcgdGhlIHNsaWRlci5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB0aGUgcmV2b2x1dGlvbi5zbGlkZS5vbmNoYW5nZSBldmVudCB3aWxsIG5ldmVyIGZpcmUsIGFuZCB0aGlzIGV2ZW50IGlzIHVzZWRcbiAgICAgICAgLy8gdG8gY2hlY2sgd2hldGhlciBvciBub3QgdGhlIHNsaWRlciBzaG91bGQgcmVmcmVzaC5cbiAgICAgICAgaWYgKF9maWxlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgX2lzTG9hZGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KF90aW1lcik7XG4gICAgICAgICAgUmlzZVZpc2lvbi5JbWFnZS5vbkZpbGVJbml0KF9maWxlcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IGEgdGltZW91dCBpbiBjYXNlIHRoZXJlIGlzIG9ubHkgb25lIGltYWdlIGluIHRoZSBmb2xkZXIuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIF90aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBfaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBSaXNlVmlzaW9uLkltYWdlLm9uRmlsZUluaXQoX2ZpbGVzKTtcbiAgICAgICAgICB9LCA1MDAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVbmNoYW5nZWRcbiAgICBpZiAoZS5kZXRhaWwuaGFzT3duUHJvcGVydHkoXCJjaGFuZ2VkXCIpICYmICFlLmRldGFpbC5jaGFuZ2VkKSB7XG4gICAgICAvLyBpbiB0aGUgZXZlbnQgb2YgYSBuZXR3b3JrIGZhaWx1cmUgYW5kIHJlY292ZXJ5LCBjaGVjayBpZiB0aGUgV2lkZ2V0IGlzIGluIGEgc3RhdGUgb2Ygc3RvcmFnZSBlcnJvclxuICAgICAgaWYgKCFSaXNlVmlzaW9uLkltYWdlLmhhc1N0b3JhZ2VFcnJvcigpKSB7XG4gICAgICAgIC8vIG9ubHkgcHJvY2VlZCB3aXRoIHJlZnJlc2ggbG9naWMgYmVsb3cgaWYgdGhlcmUncyBiZWVuIGEgc3RvcmFnZSBlcnJvciwgb3RoZXJ3aXNlIGRvIG5vdGhpbmdcbiAgICAgICAgLy8gdGhpcyBpcyBzbyB0aGUgV2lkZ2V0IGNhbiBldmVudHVhbGx5IHBsYXkgc2xpZGVzaG93IGFnYWluIGZyb20gYSBuZXR3b3JrIHJlY292ZXJ5XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBSaXNlVmlzaW9uLkltYWdlLm9uRmlsZVJlZnJlc2goX2ZpbGVzKTtcbiAgfVxuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgc3RvcmFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJyaXNlLXN0b3JhZ2VcIik7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2UtcmVzcG9uc2VcIiwgaGFuZGxlUmVzcG9uc2UpO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1zdG9yYWdlLWVtcHR5LWZvbGRlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBcImV2ZW50XCI6IFwiZXJyb3JcIixcbiAgICAgICAgXCJldmVudF9kZXRhaWxzXCI6IFwic3RvcmFnZSBmb2xkZXIgZW1wdHlcIlxuICAgICAgfTtcblxuICAgICAgUmlzZVZpc2lvbi5JbWFnZS5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuICAgICAgUmlzZVZpc2lvbi5JbWFnZS5zaG93RXJyb3IoXCJUaGUgc2VsZWN0ZWQgZm9sZGVyIGRvZXMgbm90IGNvbnRhaW4gYW55IGltYWdlcy5cIik7XG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2Utbm8tZm9sZGVyXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBcImV2ZW50XCI6IFwiZXJyb3JcIixcbiAgICAgICAgXCJldmVudF9kZXRhaWxzXCI6IFwic3RvcmFnZSBmb2xkZXIgZG9lc24ndCBleGlzdFwiLFxuICAgICAgICBcImVycm9yX2RldGFpbHNcIjogZS5kZXRhaWxcbiAgICAgIH07XG5cbiAgICAgIFJpc2VWaXNpb24uSW1hZ2UubG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcbiAgICAgIFJpc2VWaXNpb24uSW1hZ2Uuc2hvd0Vycm9yKFwiVGhlIHNlbGVjdGVkIGZvbGRlciBkb2VzIG5vdCBleGlzdC5cIik7XG4gICAgfSk7XG5cblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2Utc3RvcmFnZS1mb2xkZXItaW52YWxpZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyYW1zID0geyBcImV2ZW50XCI6IFwic3RvcmFnZSBmb2xkZXIgZm9ybWF0KHMpIGludmFsaWRcIiB9O1xuXG4gICAgICBSaXNlVmlzaW9uLkltYWdlLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLkltYWdlLnNob3dFcnJvcihcIlRoZSBzZWxlY3RlZCBmb2xkZXIgZG9lcyBub3QgY29udGFpbiBhbnkgc3VwcG9ydGVkIGltYWdlIGZvcm1hdHMuXCIpO1xuICAgIH0pO1xuXG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2UtZXJyb3JcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgXCJldmVudFwiOiBcInJpc2Ugc3RvcmFnZSBlcnJvclwiLFxuICAgICAgICBcImV2ZW50X2RldGFpbHNcIjogXCJUaGUgcmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZTogXCIgKyBlLmRldGFpbC5lcnJvci5jdXJyZW50VGFyZ2V0LnN0YXR1c1xuICAgICAgfTtcblxuICAgICAgUmlzZVZpc2lvbi5JbWFnZS5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuICAgICAgUmlzZVZpc2lvbi5JbWFnZS5zaG93RXJyb3IoXCJTb3JyeSwgdGhlcmUgd2FzIGEgcHJvYmxlbSBjb21tdW5pY2F0aW5nIHdpdGggUmlzZSBTdG9yYWdlLlwiLCB0cnVlKTtcbiAgICB9KTtcblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2UtY2FjaGUtZXJyb3JcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgXCJldmVudFwiOiBcInJpc2UgY2FjaGUgZXJyb3JcIixcbiAgICAgICAgXCJldmVudF9kZXRhaWxzXCI6IFwiVGhlIHJlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGU6IFwiICsgZS5kZXRhaWwuZXJyb3IuY3VycmVudFRhcmdldC5zdGF0dXNcbiAgICAgIH07XG5cbiAgICAgIFJpc2VWaXNpb24uSW1hZ2UubG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcbiAgICAgIFJpc2VWaXNpb24uSW1hZ2Uuc2hvd0Vycm9yKFwiVGhlcmUgd2FzIGEgcHJvYmxlbSByZXRyaWV2aW5nIHRoZSBmaWxlIGZyb20gUmlzZSBDYWNoZS5cIik7XG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLnNldEF0dHJpYnV0ZShcImZpbGVUeXBlXCIsIFwiaW1hZ2VcIik7XG4gICAgc3RvcmFnZS5zZXRBdHRyaWJ1dGUoXCJjb21wYW55SWRcIiwgZGF0YS5zdG9yYWdlLmNvbXBhbnlJZCk7XG4gICAgc3RvcmFnZS5zZXRBdHRyaWJ1dGUoXCJmb2xkZXJcIiwgZGF0YS5zdG9yYWdlLmZvbGRlcik7XG4gICAgc3RvcmFnZS5zZXRBdHRyaWJ1dGUoXCJlbnZcIiwgY29uZmlnLlNUT1JBR0VfRU5WKTtcblxuICAgIHN0b3JhZ2UuZ28oKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgXCJpbml0XCI6IGluaXRcbiAgfTtcbn07XG5cbnZhciBSaXNlVmlzaW9uID0gUmlzZVZpc2lvbiB8fCB7fTtcblJpc2VWaXNpb24uSW1hZ2UgPSBSaXNlVmlzaW9uLkltYWdlIHx8IHt9O1xuXG5SaXNlVmlzaW9uLkltYWdlLk5vblN0b3JhZ2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgcmlzZUNhY2hlID0gUmlzZVZpc2lvbi5Db21tb24uUmlzZUNhY2hlO1xuXG4gIHZhciBfcmVmcmVzaER1cmF0aW9uID0gMzAwMDAwLCAgLy8gNSBtaW51dGVzXG4gICAgX3JlZnJlc2hJbnRlcnZhbElkID0gbnVsbDtcblxuICB2YXIgX2lzTG9hZGluZyA9IHRydWU7XG5cbiAgdmFyIF91cmwgPSBcIlwiO1xuXG4gIGZ1bmN0aW9uIF9nZXRGaWxlKG9taXRDYWNoZUJ1c3Rlcikge1xuICAgIHZhciBwYXJhbXM7XG5cbiAgICByaXNlQ2FjaGUuZ2V0RmlsZShfdXJsLCBmdW5jdGlvbiAocmVzcG9uc2UsIGVycm9yKSB7XG4gICAgICBpZiAoIWVycm9yKSB7XG5cbiAgICAgICAgaWYgKF9pc0xvYWRpbmcpIHtcbiAgICAgICAgICBfaXNMb2FkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICBSaXNlVmlzaW9uLkltYWdlLm9uRmlsZUluaXQocmVzcG9uc2UudXJsKTtcblxuICAgICAgICAgIC8vIHN0YXJ0IHRoZSByZWZyZXNoIGludGVydmFsXG4gICAgICAgICAgX3N0YXJ0UmVmcmVzaEludGVydmFsKCk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBSaXNlVmlzaW9uLkltYWdlLm9uRmlsZVJlZnJlc2gocmVzcG9uc2UudXJsKTtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIC8vIGVycm9yIG9jY3VycmVkXG4gICAgICAgIHBhcmFtcyA9IHtcbiAgICAgICAgICBcImV2ZW50XCI6IFwiZXJyb3JcIixcbiAgICAgICAgICBcImV2ZW50X2RldGFpbHNcIjogXCJub24tc3RvcmFnZSBlcnJvclwiLFxuICAgICAgICAgIFwiZXJyb3JfZGV0YWlsc1wiOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgIFwiZmlsZV91cmxcIjogcmVzcG9uc2UudXJsXG4gICAgICAgIH07XG5cbiAgICAgICAgUmlzZVZpc2lvbi5JbWFnZS5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuICAgICAgICBSaXNlVmlzaW9uLkltYWdlLnNob3dFcnJvcihcIlRoZXJlIHdhcyBhIHByb2JsZW0gcmV0cmlldmluZyB0aGUgZmlsZSBmcm9tIFJpc2UgQ2FjaGUuXCIpO1xuICAgICAgfVxuICAgIH0sIG9taXRDYWNoZUJ1c3Rlcik7XG4gIH1cblxuICBmdW5jdGlvbiBfc3RhcnRSZWZyZXNoSW50ZXJ2YWwoKSB7XG4gICAgaWYgKF9yZWZyZXNoSW50ZXJ2YWxJZCA9PT0gbnVsbCkge1xuICAgICAgX3JlZnJlc2hJbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICBfZ2V0RmlsZShmYWxzZSk7XG4gICAgICB9LCBfcmVmcmVzaER1cmF0aW9uKTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgLy8gSGFuZGxlIHByZS1tZXJnZSB1c2Ugb2YgXCJ1cmxcIiBzZXR0aW5nIHByb3BlcnR5XG4gICAgX3VybCA9IChkYXRhLnVybCAmJiBkYXRhLnVybCAhPT0gXCJcIikgPyBkYXRhLnVybCA6IGRhdGEuc2VsZWN0b3IudXJsO1xuXG4gICAgX2dldEZpbGUodHJ1ZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFwiaW5pdFwiOiBpbml0XG4gIH07XG59O1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLkNvbW1vbiA9IFJpc2VWaXNpb24uQ29tbW9uIHx8IHt9O1xuXG5SaXNlVmlzaW9uLkNvbW1vbi5NZXNzYWdlID0gZnVuY3Rpb24gKG1haW5Db250YWluZXIsIG1lc3NhZ2VDb250YWluZXIpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIF9hY3RpdmUgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICB0cnkge1xuICAgICAgbWVzc2FnZUNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBtYWluQ29udGFpbmVyLnN0eWxlLmhlaWdodDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJDYW4ndCBpbml0aWFsaXplIE1lc3NhZ2UgLSBcIiwgZS5tZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgaWYgKF9hY3RpdmUpIHtcbiAgICAgIC8vIGNsZWFyIGNvbnRlbnQgb2YgbWVzc2FnZSBjb250YWluZXJcbiAgICAgIHdoaWxlIChtZXNzYWdlQ29udGFpbmVyLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgbWVzc2FnZUNvbnRhaW5lci5yZW1vdmVDaGlsZChtZXNzYWdlQ29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuXG4gICAgICAvLyBoaWRlIG1lc3NhZ2UgY29udGFpbmVyXG4gICAgICBtZXNzYWdlQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuICAgICAgLy8gc2hvdyBtYWluIGNvbnRhaW5lclxuICAgICAgbWFpbkNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG5cbiAgICAgIF9hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzaG93KG1lc3NhZ2UpIHtcbiAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG4gICAgICBwO1xuXG4gICAgaWYgKCFfYWN0aXZlKSB7XG4gICAgICAvLyBoaWRlIG1haW4gY29udGFpbmVyXG4gICAgICBtYWluQ29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuXG4gICAgICBtZXNzYWdlQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgICAgIC8vIGNyZWF0ZSBtZXNzYWdlIGVsZW1lbnRcbiAgICAgIHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgIHAuaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgICAgIHAuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJtZXNzYWdlXCIpO1xuXG4gICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChwKTtcbiAgICAgIG1lc3NhZ2VDb250YWluZXIuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuXG4gICAgICBfYWN0aXZlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbWVzc2FnZSBhbHJlYWR5IGJlaW5nIHNob3duLCB1cGRhdGUgbWVzc2FnZSB0ZXh0XG4gICAgICBwID0gbWVzc2FnZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLm1lc3NhZ2VcIik7XG4gICAgICBwLmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgfVxuICB9XG5cbiAgX2luaXQoKTtcblxuICByZXR1cm4ge1xuICAgIFwiaGlkZVwiOiBoaWRlLFxuICAgIFwic2hvd1wiOiBzaG93XG4gIH07XG59O1xuXG4vKiBnbG9iYWwgUmlzZVZpc2lvbiwgZ2FkZ2V0cyAqL1xuKGZ1bmN0aW9uICh3aW5kb3csIGRvY3VtZW50LCBnYWRnZXRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBpZCA9IG5ldyBnYWRnZXRzLlByZWZzKCkuZ2V0U3RyaW5nKFwiaWRcIik7XG5cbiAgd2luZG93Lm9uY29udGV4dG1lbnUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGRvY3VtZW50LmJvZHkub25tb3VzZWRvd24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgZnVuY3Rpb24gY29uZmlndXJlKG5hbWVzLCB2YWx1ZXMpIHtcbiAgICB2YXIgYWRkaXRpb25hbFBhcmFtcywgbW9kZTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KG5hbWVzKSAmJiBuYW1lcy5sZW5ndGggPiAwICYmIG5hbWVzWzBdID09PSBcImFkZGl0aW9uYWxQYXJhbXNcIikge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzKSAmJiB2YWx1ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBhZGRpdGlvbmFsUGFyYW1zID0gSlNPTi5wYXJzZSh2YWx1ZXNbMF0pO1xuXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhhZGRpdGlvbmFsUGFyYW1zLnN0b3JhZ2UpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIC8vIHN0b3JhZ2UgZmlsZSBvciBmb2xkZXIgc2VsZWN0ZWRcbiAgICAgICAgICBpZiAoIWFkZGl0aW9uYWxQYXJhbXMuc3RvcmFnZS5maWxlTmFtZSkge1xuICAgICAgICAgICAgLy8gZm9sZGVyIHdhcyBzZWxlY3RlZFxuICAgICAgICAgICAgbW9kZSA9IFwiZm9sZGVyXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGZpbGUgd2FzIHNlbGVjdGVkXG4gICAgICAgICAgICBtb2RlID0gXCJmaWxlXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG5vbi1zdG9yYWdlIGZpbGUgd2FzIHNlbGVjdGVkXG4gICAgICAgICAgbW9kZSA9IFwiZmlsZVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgUmlzZVZpc2lvbi5JbWFnZS5zZXRBZGRpdGlvbmFsUGFyYW1zKGFkZGl0aW9uYWxQYXJhbXMsIG1vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgIFJpc2VWaXNpb24uSW1hZ2UucGF1c2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgUmlzZVZpc2lvbi5JbWFnZS5wbGF5KCk7XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIFJpc2VWaXNpb24uSW1hZ2Uuc3RvcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9seW1lclJlYWR5KCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiV2ViQ29tcG9uZW50c1JlYWR5XCIsIHBvbHltZXJSZWFkeSk7XG5cbiAgICBpZiAoaWQgJiYgaWQgIT09IFwiXCIpIHtcbiAgICAgIGdhZGdldHMucnBjLnJlZ2lzdGVyKFwicnNjbWRfcGxheV9cIiArIGlkLCBwbGF5KTtcbiAgICAgIGdhZGdldHMucnBjLnJlZ2lzdGVyKFwicnNjbWRfcGF1c2VfXCIgKyBpZCwgcGF1c2UpO1xuICAgICAgZ2FkZ2V0cy5ycGMucmVnaXN0ZXIoXCJyc2NtZF9zdG9wX1wiICsgaWQsIHN0b3ApO1xuICAgICAgZ2FkZ2V0cy5ycGMucmVnaXN0ZXIoXCJyc3BhcmFtX3NldF9cIiArIGlkLCBjb25maWd1cmUpO1xuICAgICAgZ2FkZ2V0cy5ycGMuY2FsbChcIlwiLCBcInJzcGFyYW1fZ2V0XCIsIG51bGwsIGlkLCBbXCJhZGRpdGlvbmFsUGFyYW1zXCJdKTtcbiAgICB9XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIldlYkNvbXBvbmVudHNSZWFkeVwiLCBwb2x5bWVyUmVhZHkpO1xuXG59KSh3aW5kb3csIGRvY3VtZW50LCBnYWRnZXRzKTtcblxuLyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xudmFyIF9nYXEgPSBfZ2FxIHx8IFtdO1xuXG5fZ2FxLnB1c2goWydfc2V0QWNjb3VudCcsICdVQS01NzA5MjE1OS0zJ10pO1xuX2dhcS5wdXNoKFsnX3RyYWNrUGFnZXZpZXcnXSk7XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIGdhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7IGdhLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JzsgZ2EuYXN5bmMgPSB0cnVlO1xuICBnYS5zcmMgPSAoJ2h0dHBzOicgPT0gZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wgPyAnaHR0cHM6Ly9zc2wnIDogJ2h0dHA6Ly93d3cnKSArICcuZ29vZ2xlLWFuYWx5dGljcy5jb20vZ2EuanMnO1xuICB2YXIgcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsgcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnYSwgcyk7XG59KSgpO1xuLyoganNoaW50IGlnbm9yZTplbmQgKi9cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
