var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(e){"use strict";function t(e,t){Array.isArray(e)&&e.length>0&&Array.isArray(t)&&t.length>0&&("companyId"===e[0]&&(d=t[0]),"displayId"===e[1]&&(u=t[1]?t[1]:"preview"),c(d,u))}function n(e,t){var n=null;e.event?(n=e,n.file_url&&(n.file_format=o(n.file_url)),i(function(e,i){n.company_id=e,n.display_id=i,t(n)})):t(n)}function i(n){n&&"function"==typeof n&&(c=n,d&&u?c(d,u):l&&""!==l&&(e.rpc.register("rsparam_set_"+l,t),e.rpc.call("","rsparam_get",null,l,["companyId","displayId"])))}function o(e){var t,n=/[?#&]/;return e&&"string"==typeof e?(t=e.substr(e.lastIndexOf(".")+1),n.test(t)&&(t=t.substr(0,-1!==t.indexOf("?")?t.indexOf("?"):t.length),t=t.substr(0,-1!==t.indexOf("#")?t.indexOf("#"):t.length),t=t.substr(0,-1!==t.indexOf("&")?t.indexOf("&"):t.length)),t.toLowerCase()):null}function r(e){var t=JSON.parse(JSON.stringify(g));return t.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),t.rows[0].json=JSON.parse(JSON.stringify(e)),t.rows[0].json.ts=(new Date).toISOString(),t}function s(e){var t=new Date,n=t.getUTCFullYear(),i=t.getUTCMonth()+1,o=t.getUTCDate();return 10>i&&(i="0"+i),10>o&&(o="0"+o),e+n+i+o}function a(e,t){n(t,function(t){null!==t&&RiseVision.Common.Logger.log(e,t)})}var l=(new e.Prefs).getString("id"),u="",d="",c=null,g={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,rows:[{insertId:""}]};return{getIds:i,getInsertData:r,getFileFormat:o,getTable:s,logEvent:a}}(gadgets),RiseVision.Common.Logger=function(e){"use strict";function t(e){var t=new XMLHttpRequest;return new Date-u<358e4?e({}):(t.open("POST",o,!0),t.onloadend=function(){var n=JSON.parse(t.response);e({token:n.access_token,refreshedAt:new Date})},t.send(),void 0)}function n(e){return s&&l===e}function i(i,o){function c(t){var n,s,a=new XMLHttpRequest;s=r.replace("TABLE_ID",e.getTable(i)),u=t.refreshedAt||u,d=t.token||d,n=e.getInsertData(o),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+d),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!i||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&n(o.event)))return s=!0,l=o.event,setTimeout(function(){s=!1},a),t(c)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",u=0,d="";return{log:i}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var t=new XMLHttpRequest;e&&"function"==typeof e&&(t.open("GET",n+"ping?callback=_",!0),t.onreadystatechange=function(){try{4===t.readyState&&(i=!0,200===t.status?(o=!0,e(!0,t.responseText)):(console.debug("Rise Cache is not running"),o=!1,e(!1,null)))}catch(n){console.debug("Caught exception: ",n.description)}},t.send())}function t(e,t,r){function s(t){var i,o,s;t?i=r?n+"?url="+encodeURIComponent(e):n+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):r?i=e:(o=e.split("?"),s=1===o.length?"?":"&",i=e+s+"cb="+(new Date).getTime()),a("HEAD",i)}function a(e,n){var i=new XMLHttpRequest,r={xhr:i,url:n};i.open(e,n,!0),i.addEventListener("loadend",function(){var s=i.status||0;s>=200&&300>s?t(r):"HEAD"===e?a("GET",n):o?t(r,new Error("The request failed with status code: "+s)):t(r)}),i.send()}if(e&&t&&"function"==typeof t)return i?s(o):this.ping(s)}var n="http://localhost:9494/",i=!1,o=!1;return{getFile:t,ping:e}}();var RiseVision=RiseVision||{};if(RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,t){var n="font-family:"+t.font.family+"; ",i="color: "+t.color+"; ",o="font-size: "+t.size+"px; ",r="font-weight: "+(t.bold?"bold":"normal")+"; ",s="font-style: "+(t.italic?"italic":"normal")+"; ",a="text-decoration: "+(t.underline?"underline":"none")+"; ",l="background-color: "+t.highlightColor+"; ";return"."+e+" {"+n+i+o+r+s+a+l+"}"}function t(e){for(var t=document.createElement("style"),n=0,i=e.length;i>n;n++)t.appendChild(document.createTextNode(e[n]));document.head.appendChild(t)}function n(n,r){n.forEach(function(n){n.class&&n.fontSetting&&t([e(n.class,n.fontSetting)]),n.fontSetting.font.type&&("custom"===n.fontSetting.font.type&&n.fontSetting.font.family&&n.fontSetting.font.url?i(n.fontSetting.font.family,n.fontSetting.font.url,r):"google"===n.fontSetting.font.type&&n.fontSetting.font.family&&o(n.fontSetting.font.family,r))})}function i(e,t,n){var i=null,o="font-family: "+e+"; src: url('"+t+"');";n=n||document,i=n.styleSheets[0],null!==i&&i.addRule("@font-face",o)}function o(e,t){var n=document.createElement("link");t=t||document,n.setAttribute("rel","stylesheet"),n.setAttribute("type","text/css"),n.setAttribute("href","https://fonts.googleapis.com/css?family="+e),null!==n&&t.getElementsByTagName("head")[0].appendChild(n)}function r(e){for(var t=e.length,n=[],i=0;t>i;i++)n[i]=new Image,n[i].src=e[i]}function s(e){for(var t,n=window.location.search.substring(1),i=n.split("&"),o=0;o<i.length;o++)if(t=i[o].split("="),t[0]==e)return decodeURIComponent(t[1]);return""}return{getQueryParameter:s,getFontCssStyle:e,addCSSRules:t,loadFonts:n,loadCustomFont:i,loadGoogleFont:o,preloadImages:r}}(),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json"),"undefined"==typeof config)var config={STORAGE_ENV:"prod"};var RiseVision=RiseVision||{};RiseVision.Image={},RiseVision.Image=function(e){"use strict";function t(){e.rpc.call("","rsevent_ready",null,E.getString("id"),!0,!0,!0,!0,!0)}function n(){e.rpc.call("","rsevent_done",null,E.getString("id")),null!==O&&u(O,!0),u({event:"done",file_url:r()},!1)}function i(){clearTimeout(L),L=null}function o(){i(),L=setTimeout(function(){n()},5e3)}function r(){var e=-1;if(S&&S.length>0){if("file"===I)return S[0];if("folder"===I&&T&&T.isReady()&&(e=T.getCurrentSlide(),-1!==e))return S[e]}return null}function s(){var e,n=document.getElementById("container"),i=document.createDocumentFragment(),o=document.createElement("div");b=new RiseVision.Common.Message(document.getElementById("container"),document.getElementById("messageContainer")),b.show("Please wait while your image is downloaded."),V.background&&Object.keys(V.background).length>0&&(document.body.style.background=V.background.color),"file"===I?(o.setAttribute("id","image"),o.className=V.position,o.className=V.scaleToFit?o.className+" scale-to-fit":o.className,i.appendChild(o),n.appendChild(i),e=0!==Object.keys(V.storage).length,e?(A="storage file",w=new RiseVision.Image.StorageFile(V),w.init()):(A="custom",C=new RiseVision.Image.NonStorage(V),C.init())):"folder"===I&&(o.className="tp-banner-container",i.appendChild(o),n.appendChild(i),A="storage folder",w=new RiseVision.Image.StorageFolder(V),w.init()),t()}function a(e){var t=document.querySelector("#container #image");t.style.backgroundImage="url("+e+")"}function l(){return k}function u(e,t){t&&(O=e),RiseVision.Common.LoggerUtils.logEvent(v(),e)}function d(e){"file"===I?(S[0]=e,b.hide(),a(S[0])):"folder"===I&&(S=e,T=new RiseVision.Image.Slider(V),T.init(e))}function c(e){"file"===I?(S[0]=e,a(S[0])):"folder"===I&&(S=e,T.refresh(S)),N=!1,k=!1,O=null}function g(e,t){V=_.clone(e),I=t,V.width=E.getInt("rsW"),V.height=E.getInt("rsH"),document.getElementById("container").style.height=E.getInt("rsH")+"px",s()}function f(){b.hide(),q||T.play()}function m(){n()}function p(){q=!0,i(),"folder"===I&&T&&T.isReady()&&T.pause()}function h(){return q=!1,F||(u({event:"configuration",event_details:A},!1),F=!0),u({event:"play",file_url:r()},!1),N?(o(),void 0):("folder"===I&&T&&T.isReady()&&T.play(),void 0)}function v(){return"image_events"}function R(e,t){N=!0,k="undefined"!=typeof t,b.show(e),"folder"===I&&T&&T.isReady()&&T.destroy(),q||o()}function y(){p()}var I,E=new e.Prefs,b=null,V=null,w=null,C=null,T=null,S=[],O=null,A=null,L=null,N=!1,k=!1,F=!1,q=!0;return{hasStorageError:l,logEvent:u,onFileInit:d,onFileRefresh:c,onSliderComplete:m,onSliderReady:f,pause:p,play:h,setAdditionalParams:g,getTableName:v,showError:R,stop:y}}(gadgets);var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.Slider=function(e){"use strict";function t(){var t=document.querySelector(".tp-banner ul"),n=document.createDocumentFragment(),i=[],o=null,r=null,s="";f=p.length,p.forEach(function(t){switch(o=document.createElement("li"),r=document.createElement("img"),o.setAttribute("data-transition","fade"),o.setAttribute("data-masterspeed",500),o.setAttribute("data-delay",1e3*e.duration),r.src=t.url,e.position){case"top-left":s="left top";break;case"top-center":s="center top";break;case"top-right":s="right top";break;case"middle-left":s="left center";break;case"middle-center":s="center center";break;case"middle-right":s="right center";break;case"bottom-left":s="left bottom";break;case"bottom-center":s="center bottom";break;case"bottom-right":s="right bottom";break;default:s="left top"}r.setAttribute("data-bgposition",s),e.scaleToFit?r.setAttribute("data-bgfit","contain"):r.setAttribute("data-bgfit","normal"),o.appendChild(r),i.push(o)}),i.forEach(function(e){n.appendChild(e)}),t.appendChild(n)}function n(e){V?c():y&&(y=!1,c(),RiseVision.Image.onSliderComplete(),I&&(m&&(i(),l(h)),I=!1)),e.slideIndex===f&&(y=!0)}function i(){$("body").off("touchend"),m.off("revolution.slide.onloaded"),m.off("revolution.slide.onchange"),m.revkill(),m=null}function o(){V=!0,clearTimeout(R),R=setTimeout(function(){m.revnext(),m.revresume(),V=!1,b=!0},1e3*e.pause),r()}function r(){e.autoHide&&(clearTimeout(v),v=setTimeout(function(){$(".tp-leftarrow, .tp-rightarrow").addClass("hidearrows")},w))}function s(){m&&(y=!1,c(),i())}function a(){return m&&p&&p.length>0?m.revcurrentslide():-1}function l(i){var s=document.querySelector(".tp-banner-container"),a=document.createDocumentFragment(),l=document.createElement("div"),u=document.createElement("ul");l.setAttribute("class","tp-banner"),l.appendChild(u),a.appendChild(l),s.appendChild(a),p=_.clone(i),t(),E=!0,m=$(".tp-banner").revolution({hideThumbs:0,hideTimerBar:"on",navigationType:"none",onHoverStop:"off",startwidth:e.width,startheight:e.height}),m.on("revolution.slide.onloaded",function(){c(),E=!1,RiseVision.Image.onSliderReady()}),m.on("revolution.slide.onchange",function(e,t){n(t)}),$("body").on("touchend",".tp-banner",function(){o(),$(".tp-leftarrow, .tp-rightarrow").removeClass("hidearrows")}),$("body").on("touchend",".tp-leftarrow, .tp-rightarrow",function(){o()}),r()}function u(){return!E}function d(){m&&(e.hasOwnProperty("resume")&&!e.resume&&m.revshowslide(0),b||(m.revresume(),b=!0))}function c(){m&&b&&(m.revpause(),b=!1)}function g(e){RiseVision.Common.Utilities.preloadImages(e),h=_.clone(e),I=!0}var f=0,m=null,p=null,h=null,v=null,R=null,y=!1,I=!1,E=!0,b=!1,V=!1,w=3e3;return{getCurrentSlide:a,destroy:s,init:l,isReady:u,play:d,pause:c,refresh:g}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.StorageFile=function(e){"use strict";function t(){var t=document.querySelector("rise-storage");t.addEventListener("rise-storage-response",function(e){var t;e.detail&&e.detail.url&&(t=e.detail.url.replace("'","\\'"),n?(n=!1,RiseVision.Image.onFileInit(t)):e.detail.hasOwnProperty("changed")&&(e.detail.changed?RiseVision.Image.onFileRefresh(t):RiseVision.Image.hasStorageError()&&RiseVision.Image.onFileRefresh(e.detail.url)))}),t.addEventListener("rise-storage-no-file",function(e){var t={event:"error",event_details:"storage file not found",file_url:e.detail},n=document.getElementById("image");n.style.background="",RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected image does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-file-throttled",function(e){var t={event:"error",event_details:"storage file throttled",file_url:e.detail};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected image is temporarily unavailable.")}),t.addEventListener("rise-storage-error",function(e){var t=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,n={event:"error",event_details:"rise storage error",error_details:"The request failed with status code: "+e.detail.error.currentTarget.status,file_url:t};RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var t=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,n={event:"error",event_details:"rise cache error",error_details:"The request failed with status code: "+e.detail.error.currentTarget.status,file_url:t};RiseVision.Image.logEvent(n,!0);var i=e.detail.error.currentTarget.status,o="There was a problem retrieving the file from Rise Cache.";404===i&&(o="The image does not exist or cannot be accessed."),RiseVision.Image.showError(o)}),t.setAttribute("folder",e.storage.folder),t.setAttribute("fileName",e.storage.fileName),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("env",config.STORAGE_ENV),t.go()}var n=!0;return{init:t}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.StorageFolder=function(e){"use strict";function t(e){var t;e.detail&&(e.detail.added&&r.push({name:e.detail.name,url:e.detail.url}),e.detail.changed&&(t=_.find(r,function(t){return t.name===e.detail.name}),t.url=e.detail.url),e.detail.deleted&&(r=_.reject(r,function(t){return t.name===e.detail.name}))),r=_.sortBy(r,function(e){return e.name.toLowerCase()})}function n(e){return t(e),e.detail.added&&o?(r.length>1?(o=!1,clearTimeout(s),RiseVision.Image.onFileInit(r)):s=setTimeout(function(){o=!1,RiseVision.Image.onFileInit(r)},5e3),void 0):((!e.detail.hasOwnProperty("changed")||e.detail.changed||RiseVision.Image.hasStorageError())&&RiseVision.Image.onFileRefresh(r),void 0)}function i(){var t=document.querySelector("rise-storage");t.addEventListener("rise-storage-response",n),t.addEventListener("rise-storage-empty-folder",function(){var e={event:"error",event_details:"storage folder empty"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("The selected folder does not contain any images.")}),t.addEventListener("rise-storage-no-folder",function(e){var t={event:"error",event_details:"storage folder doesn't exist",error_details:e.detail};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected folder does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-folder-invalid",function(){var e={event:"error",event_details:"storage folder format(s) invalid"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("The selected folder does not contain any supported image formats.")}),t.addEventListener("rise-storage-error",function(e){var t={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var t={event:"rise cache error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Image.logEvent(t,!0);var n=e.detail.error.currentTarget.status,i="There was a problem retrieving the file from Rise Cache.";404===n&&(i="The image does not exist or cannot be accessed."),RiseVision.Image.showError(i)}),t.setAttribute("fileType","image"),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("folder",e.storage.folder),t.setAttribute("env",config.STORAGE_ENV),t.go()}var o=!0,r=[],s=null;return{init:i}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.NonStorage=function(e){"use strict";function t(e){var t;o.getFile(l,function(e,i){if(i){t={event:"error",event_details:"non-storage error",error_details:i.message,file_url:e.url},RiseVision.Image.logEvent(t,!0);var o=i.message.substring(i.message.indexOf(":")+2),r="There was a problem retrieving the file from Rise Cache.";"404"===o&&(r="The image does not exist or cannot be accessed."),RiseVision.Image.showError(r)}else a?(a=!1,RiseVision.Image.onFileInit(e.url),n()):RiseVision.Image.onFileRefresh(e.url)},e)}function n(){null===s&&(s=setInterval(function(){t(!1)},r))}function i(){l=e.url&&""!==e.url?e.url:e.selector.url,t(!0)}var o=RiseVision.Common.RiseCache,r=3e5,s=null,a=!0,l="";return{init:i}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,t){"use strict";function n(){try{t.style.height=e.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function i(){if(r){for(;t.firstChild;)t.removeChild(t.firstChild);t.style.display="none",e.style.visibility="visible",r=!1}}function o(n){var i,o=document.createDocumentFragment();r?(i=t.querySelector(".message"),i.innerHTML=n):(e.style.visibility="hidden",t.style.display="block",i=document.createElement("p"),i.innerHTML=n,i.setAttribute("class","message"),o.appendChild(i),t.appendChild(o),r=!0)}var r=!1;return n(),{hide:i,show:o}},function(e,t,n){"use strict";function i(e,t){var n,i;Array.isArray(e)&&e.length>0&&"additionalParams"===e[0]&&Array.isArray(t)&&t.length>0&&(n=JSON.parse(t[0]),i=0!==Object.keys(n.storage).length?n.storage.fileName?"file":"folder":"file",RiseVision.Image.setAdditionalParams(n,i))}function o(){RiseVision.Image.pause()}function r(){RiseVision.Image.play()}function s(){RiseVision.Image.stop()}function a(){e.removeEventListener("WebComponentsReady",a),l&&""!==l&&(n.rpc.register("rscmd_play_"+l,r),n.rpc.register("rscmd_pause_"+l,o),n.rpc.register("rscmd_stop_"+l,s),n.rpc.register("rsparam_set_"+l,i),n.rpc.call("","rsparam_get",null,l,["additionalParams"]))}var l=(new n.Prefs).getString("id");e.oncontextmenu=function(){return!1},t.body.onmousedown=function(){return!1},e.addEventListener("WebComponentsReady",a)}(window,document,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-3"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL3dpZGdldC5taW4uanMiXSwibmFtZXMiOlsiV0lER0VUX0NPTU1PTl9DT05GSUciLCJBVVRIX1BBVEhfVVJMIiwiTE9HR0VSX0NMSUVOVF9JRCIsIkxPR0dFUl9DTElFTlRfU0VDUkVUIiwiTE9HR0VSX1JFRlJFU0hfVE9LRU4iLCJTVE9SQUdFX0VOViIsIlNUT1JFX1VSTCIsIlJpc2VWaXNpb24iLCJDb21tb24iLCJMb2dnZXJVdGlscyIsImdhZGdldHMiLCJzZXRJZHMiLCJuYW1lcyIsInZhbHVlcyIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImNvbXBhbnlJZCIsImRpc3BsYXlJZCIsImNhbGxiYWNrIiwiZ2V0RXZlbnRQYXJhbXMiLCJwYXJhbXMiLCJjYiIsImpzb24iLCJldmVudCIsImZpbGVfdXJsIiwiZmlsZV9mb3JtYXQiLCJnZXRGaWxlRm9ybWF0IiwiZ2V0SWRzIiwiY29tcGFueV9pZCIsImRpc3BsYXlfaWQiLCJpZCIsInJwYyIsInJlZ2lzdGVyIiwiY2FsbCIsInVybCIsInN0ciIsImhhc1BhcmFtcyIsInN1YnN0ciIsImxhc3RJbmRleE9mIiwidGVzdCIsImluZGV4T2YiLCJ0b0xvd2VyQ2FzZSIsImdldEluc2VydERhdGEiLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiQkFTRV9JTlNFUlRfU0NIRU1BIiwicm93cyIsImluc2VydElkIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwidG9VcHBlckNhc2UiLCJ0cyIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImdldFRhYmxlIiwibmFtZSIsImRhdGUiLCJ5ZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJtb250aCIsImdldFVUQ01vbnRoIiwiZGF5IiwiZ2V0VVRDRGF0ZSIsImxvZ0V2ZW50IiwidGFibGUiLCJMb2dnZXIiLCJsb2ciLCJQcmVmcyIsImdldFN0cmluZyIsImtpbmQiLCJza2lwSW52YWxpZFJvd3MiLCJpZ25vcmVVbmtub3duVmFsdWVzIiwidXRpbHMiLCJyZWZyZXNoVG9rZW4iLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInJlZnJlc2hEYXRlIiwib3BlbiIsIlJFRlJFU0hfVVJMIiwib25sb2FkZW5kIiwicmVzcCIsInJlc3BvbnNlIiwidG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJyZWZyZXNoZWRBdCIsInNlbmQiLCJpc1Rocm90dGxlZCIsInRocm90dGxlIiwibGFzdEV2ZW50IiwidGFibGVOYW1lIiwiaW5zZXJ0V2l0aFRva2VuIiwicmVmcmVzaERhdGEiLCJpbnNlcnREYXRhIiwic2VydmljZVVybCIsInJlcGxhY2UiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiaGFzT3duUHJvcGVydHkiLCJzZXRUaW1lb3V0IiwidGhyb3R0bGVEZWxheSIsIlJpc2VDYWNoZSIsInBpbmciLCJyIiwiQkFTRV9DQUNIRV9VUkwiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiX3BpbmdSZWNlaXZlZCIsInN0YXR1cyIsIl9pc0NhY2hlUnVubmluZyIsInJlc3BvbnNlVGV4dCIsImNvbnNvbGUiLCJkZWJ1ZyIsImUiLCJkZXNjcmlwdGlvbiIsImdldEZpbGUiLCJmaWxlVXJsIiwibm9jYWNoZWJ1c3RlciIsImZpbGVSZXF1ZXN0IiwiaXNDYWNoZVJ1bm5pbmciLCJzZXBhcmF0b3IiLCJlbmNvZGVVUklDb21wb25lbnQiLCJnZXRUaW1lIiwic3BsaXQiLCJtYWtlUmVxdWVzdCIsIm1ldGhvZCIsInJlcXVlc3QiLCJhZGRFdmVudExpc3RlbmVyIiwiRXJyb3IiLCJ0aGlzIiwiVXRpbGl0aWVzIiwiZ2V0Rm9udENzc1N0eWxlIiwiY2xhc3NOYW1lIiwiZm9udE9iaiIsImZhbWlseSIsImZvbnQiLCJjb2xvciIsInNpemUiLCJ3ZWlnaHQiLCJib2xkIiwiaXRhbGljIiwidW5kZXJsaW5lIiwiaGlnaGxpZ2h0IiwiaGlnaGxpZ2h0Q29sb3IiLCJhZGRDU1NSdWxlcyIsInJ1bGVzIiwic3R5bGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImhlYWQiLCJsb2FkRm9udHMiLCJzZXR0aW5ncyIsImNvbnRlbnREb2MiLCJmb3JFYWNoIiwiaXRlbSIsImNsYXNzIiwiZm9udFNldHRpbmciLCJ0eXBlIiwibG9hZEN1c3RvbUZvbnQiLCJsb2FkR29vZ2xlRm9udCIsInNoZWV0IiwicnVsZSIsInN0eWxlU2hlZXRzIiwiYWRkUnVsZSIsInN0eWxlc2hlZXQiLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInByZWxvYWRJbWFnZXMiLCJ1cmxzIiwiaW1hZ2VzIiwiSW1hZ2UiLCJzcmMiLCJnZXRRdWVyeVBhcmFtZXRlciIsInBhcmFtIiwicGFpciIsInF1ZXJ5Iiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJzdWJzdHJpbmciLCJ2YXJzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbnN0YW50IiwiY29uZmlnIiwiX3JlYWR5IiwiX3ByZWZzIiwiX2RvbmUiLCJfZXJyb3JMb2ciLCJfZ2V0Q3VycmVudEZpbGUiLCJfY2xlYXJFcnJvclRpbWVyIiwiY2xlYXJUaW1lb3V0IiwiX2Vycm9yVGltZXIiLCJfc3RhcnRFcnJvclRpbWVyIiwic2xpZGVOdW0iLCJfY3VycmVudEZpbGVzIiwiX21vZGUiLCJfc2xpZGVyIiwiaXNSZWFkeSIsImdldEN1cnJlbnRTbGlkZSIsImluaXQiLCJpc1N0b3JhZ2VGaWxlIiwiY29udGFpbmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJlbCIsIl9tZXNzYWdlIiwiTWVzc2FnZSIsInNob3ciLCJfcGFyYW1zIiwiYmFja2dyb3VuZCIsIk9iamVjdCIsImtleXMiLCJib2R5IiwicG9zaXRpb24iLCJzY2FsZVRvRml0Iiwic3RvcmFnZSIsIl9jb25maWd1cmF0aW9uVHlwZSIsIl9zdG9yYWdlIiwiU3RvcmFnZUZpbGUiLCJfbm9uU3RvcmFnZSIsIk5vblN0b3JhZ2UiLCJTdG9yYWdlRm9sZGVyIiwic2V0U2luZ2xlSW1hZ2UiLCJpbWFnZSIsInF1ZXJ5U2VsZWN0b3IiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJoYXNTdG9yYWdlRXJyb3IiLCJfc3RvcmFnZUVycm9yRmxhZyIsImlzRXJyb3IiLCJnZXRUYWJsZU5hbWUiLCJvbkZpbGVJbml0IiwiaGlkZSIsIlNsaWRlciIsIm9uRmlsZVJlZnJlc2giLCJyZWZyZXNoIiwiX2Vycm9yRmxhZyIsInNldEFkZGl0aW9uYWxQYXJhbXMiLCJhZGRpdGlvbmFsUGFyYW1zIiwibW9kZVR5cGUiLCJfIiwiY2xvbmUiLCJ3aWR0aCIsImdldEludCIsImhlaWdodCIsIm9uU2xpZGVyUmVhZHkiLCJfdmlld2VyUGF1c2VkIiwicGxheSIsIm9uU2xpZGVyQ29tcGxldGUiLCJwYXVzZSIsIl9jb25maWd1cmF0aW9uTG9nZ2VkIiwiZXZlbnRfZGV0YWlscyIsInNob3dFcnJvciIsIm1lc3NhZ2UiLCJpc1N0b3JhZ2VFcnJvciIsImRlc3Ryb3kiLCJzdG9wIiwiYWRkU2xpZGVzIiwibGlzdCIsInNsaWRlcyIsInNsaWRlIiwidG90YWxTbGlkZXMiLCJjdXJyZW50RmlsZXMiLCJmaWxlIiwiZHVyYXRpb24iLCJwdXNoIiwib25TbGlkZUNoYW5nZWQiLCJpc0ludGVyYWN0aW5nIiwiaXNMYXN0U2xpZGUiLCJyZWZyZXNoU2xpZGVyIiwiJGFwaSIsImRlc3Ryb3lTbGlkZXIiLCJuZXdGaWxlcyIsInNsaWRlSW5kZXgiLCIkIiwib2ZmIiwicmV2a2lsbCIsImhhbmRsZVVzZXJBY3Rpdml0eSIsInNsaWRlVGltZXIiLCJyZXZuZXh0IiwicmV2cmVzdW1lIiwiaXNQbGF5aW5nIiwiaGlkZU5hdiIsImF1dG9IaWRlIiwibmF2VGltZXIiLCJhZGRDbGFzcyIsIm5hdlRpbWVvdXQiLCJyZXZjdXJyZW50c2xpZGUiLCJmaWxlcyIsInRwQmFubmVyQ29udGFpbmVyIiwidHBCYW5uZXIiLCJ1bCIsImlzTG9hZGluZyIsInJldm9sdXRpb24iLCJoaWRlVGh1bWJzIiwiaGlkZVRpbWVyQmFyIiwibmF2aWdhdGlvblR5cGUiLCJvbkhvdmVyU3RvcCIsInN0YXJ0d2lkdGgiLCJzdGFydGhlaWdodCIsIm9uIiwicmVtb3ZlQ2xhc3MiLCJyZXN1bWUiLCJyZXZzaG93c2xpZGUiLCJyZXZwYXVzZSIsImRldGFpbCIsIl9pbml0aWFsTG9hZCIsImNoYW5nZWQiLCJpbWciLCJlcnJvcl9kZXRhaWxzIiwiZXJyb3IiLCJjdXJyZW50VGFyZ2V0Iiwic3RhdHVzQ29kZSIsImVycm9yTWVzc2FnZSIsImZvbGRlciIsImZpbGVOYW1lIiwiZ28iLCJwcm9jZXNzVXJsIiwiYWRkZWQiLCJfZmlsZXMiLCJmaW5kIiwiZGVsZXRlZCIsInJlamVjdCIsInNvcnRCeSIsImhhbmRsZVJlc3BvbnNlIiwiX2lzTG9hZGluZyIsIl90aW1lciIsIl9nZXRGaWxlIiwib21pdENhY2hlQnVzdGVyIiwicmlzZUNhY2hlIiwiX3VybCIsIl9zdGFydFJlZnJlc2hJbnRlcnZhbCIsIl9yZWZyZXNoSW50ZXJ2YWxJZCIsInNldEludGVydmFsIiwiX3JlZnJlc2hEdXJhdGlvbiIsInNlbGVjdG9yIiwibWFpbkNvbnRhaW5lciIsIm1lc3NhZ2VDb250YWluZXIiLCJfaW5pdCIsIndhcm4iLCJfYWN0aXZlIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiZGlzcGxheSIsInZpc2liaWxpdHkiLCJwIiwiaW5uZXJIVE1MIiwiY29uZmlndXJlIiwibW9kZSIsInBvbHltZXJSZWFkeSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvbmNvbnRleHRtZW51Iiwib25tb3VzZWRvd24iLCJfZ2FxIiwiZ2EiLCJhc3luYyIsInByb3RvY29sIiwicyIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiXSwibWFwcGluZ3MiOiJBQUFBLEdBQUlBLHVCQUNGQyxjQUFlLGlCQUNmQyxpQkFBa0IsNEVBQ2xCQyxxQkFBc0IsMkJBQ3RCQyxxQkFBc0IscUVBQ3RCQyxZQUFhLE9BQ2JDLFVBQVcsNkNBSVRDLFdBQWFBLGNB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T0FHbkIsUUFBU1MsS0FDUGhRLFdBQVd3SyxNQUFNd0YsT0FHbkIsUUFBUzZGLEtBQ1AvSyxFQUFPZ0wsb0JBQW9CLHFCQUFzQkQsR0FFN0NyVSxHQUFhLEtBQVBBLElBQ1JyQixFQUFRc0IsSUFBSUMsU0FBUyxjQUFnQkYsRUFBSStOLEdBQ3pDcFAsRUFBUXNCLElBQUlDLFNBQVMsZUFBaUJGLEVBQUlpTyxHQUMxQ3RQLEVBQVFzQixJQUFJQyxTQUFTLGNBQWdCRixFQUFJd08sR0FDekM3UCxFQUFRc0IsSUFBSUMsU0FBUyxlQUFpQkYsRUFBSW1VLEdBQzFDeFYsRUFBUXNCLElBQUlFLEtBQUssR0FBSSxjQUFlLEtBQU1ILEdBQUssc0JBeERuRCxHQUFJQSxJQUFLLEdBQUlyQixHQUFRNkQsT0FBUUMsVUFBVSxLQUV2QzZHLEdBQU9pTCxjQUFnQixXQUNyQixPQUFPLEdBR1RqTixFQUFTdUUsS0FBSzJJLFlBQWMsV0FDMUIsT0FBTyxHQXFEVGxMLEVBQU9wRCxpQkFBaUIscUJBQXNCbU8sSUFFN0MvSyxPQUFRaEMsU0FBVTNJLFFBR3JCLElBQUk4VixNQUFPQSxRQUVYQSxNQUFLeEYsTUFBTSxjQUFlLGtCQUMxQndGLEtBQUt4RixNQUFNLG1CQUVYLFdBQ0UsR0FBSXlGLEdBQUtwTixTQUFTQyxjQUFjLFNBQVdtTixHQUFHdk0sS0FBTyxrQkFBbUJ1TSxFQUFHQyxPQUFRLEVBQ25GRCxFQUFHekwsS0FBTyxVQUFZM0IsU0FBU2lDLFNBQVNxTCxTQUFXLGNBQWdCLGNBQWdCLDZCQUNuRixJQUFJQyxHQUFJdk4sU0FBU3NCLHFCQUFxQixVQUFVLEVBQUlpTSxHQUFFQyxXQUFXQyxhQUFhTCxFQUFJRyIsImZpbGUiOiJqcy93aWRnZXQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFdJREdFVF9DT01NT05fQ09ORklHID0ge1xuICBBVVRIX1BBVEhfVVJMOiBcInYxL3dpZGdldC9hdXRoXCIsXG4gIExPR0dFUl9DTElFTlRfSUQ6IFwiMTA4ODUyNzE0NzEwOS02cTFvMnZ0aWhuMzQyOTJwanQ0Y2tobWhjazByazBvNy5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbVwiLFxuICBMT0dHRVJfQ0xJRU5UX1NFQ1JFVDogXCJubFp5cmNQTGc2b0V3TzlmOVdmbjI5V2hcIixcbiAgTE9HR0VSX1JFRlJFU0hfVE9LRU46IFwiMS94enQ0a3d6RTFIN1c5Vm5LQjhjQWFDeDZ6YjRFczRuS0VvcWFZSGRURDE1SWdPckpEdGR1bjZ6SzZYaUFUQ0tUXCIsXG4gIFNUT1JBR0VfRU5WOiBcInByb2RcIixcbiAgU1RPUkVfVVJMOiBcImh0dHBzOi8vc3RvcmUtZG90LXJ2YXNlcnZlcjIuYXBwc3BvdC5jb20vXCJcbn07XG4vKiBnbG9iYWwgZ2FkZ2V0cyAqL1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLkNvbW1vbiA9IFJpc2VWaXNpb24uQ29tbW9uIHx8IHt9O1xuXG5SaXNlVmlzaW9uLkNvbW1vbi5Mb2dnZXJVdGlscyA9IChmdW5jdGlvbihnYWRnZXRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gICB2YXIgaWQgPSBuZXcgZ2FkZ2V0cy5QcmVmcygpLmdldFN0cmluZyhcImlkXCIpLFxuICAgIGRpc3BsYXlJZCA9IFwiXCIsXG4gICAgY29tcGFueUlkID0gXCJcIixcbiAgICBjYWxsYmFjayA9IG51bGw7XG5cbiAgdmFyIEJBU0VfSU5TRVJUX1NDSEVNQSA9XG4gIHtcbiAgICBcImtpbmRcIjogXCJiaWdxdWVyeSN0YWJsZURhdGFJbnNlcnRBbGxSZXF1ZXN0XCIsXG4gICAgXCJza2lwSW52YWxpZFJvd3NcIjogZmFsc2UsXG4gICAgXCJpZ25vcmVVbmtub3duVmFsdWVzXCI6IGZhbHNlLFxuICAgIFwicm93c1wiOiBbe1xuICAgICAgXCJpbnNlcnRJZFwiOiBcIlwiXG4gICAgfV1cbiAgfTtcblxuICAvKlxuICAgKiAgUHJpdmF0ZSBNZXRob2RzXG4gICAqL1xuXG4gIC8qIFNldCB0aGUgQ29tcGFueSBhbmQgRGlzcGxheSBJRHMuICovXG4gIGZ1bmN0aW9uIHNldElkcyhuYW1lcywgdmFsdWVzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobmFtZXMpICYmIG5hbWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlcykgJiYgdmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKG5hbWVzWzBdID09PSBcImNvbXBhbnlJZFwiKSB7XG4gICAgICAgICAgY29tcGFueUlkID0gdmFsdWVzWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5hbWVzWzFdID09PSBcImRpc3BsYXlJZFwiKSB7XG4gICAgICAgICAgaWYgKHZhbHVlc1sxXSkge1xuICAgICAgICAgICAgZGlzcGxheUlkID0gdmFsdWVzWzFdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRpc3BsYXlJZCA9IFwicHJldmlld1wiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNhbGxiYWNrKGNvbXBhbnlJZCwgZGlzcGxheUlkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiBSZXRyaWV2ZSBwYXJhbWV0ZXJzIHRvIHBhc3MgdG8gdGhlIGV2ZW50IGxvZ2dlci4gKi9cbiAgZnVuY3Rpb24gZ2V0RXZlbnRQYXJhbXMocGFyYW1zLCBjYikge1xuICAgIHZhciBqc29uID0gbnVsbDtcblxuICAgIC8vIGV2ZW50IGlzIHJlcXVpcmVkLlxuICAgIGlmIChwYXJhbXMuZXZlbnQpIHtcbiAgICAgIGpzb24gPSBwYXJhbXM7XG5cbiAgICAgIGlmIChqc29uLmZpbGVfdXJsKSB7XG4gICAgICAgIGpzb24uZmlsZV9mb3JtYXQgPSBnZXRGaWxlRm9ybWF0KGpzb24uZmlsZV91cmwpO1xuICAgICAgfVxuXG4gICAgICBnZXRJZHMoZnVuY3Rpb24oY29tcGFueUlkLCBkaXNwbGF5SWQpIHtcbiAgICAgICAganNvbi5jb21wYW55X2lkID0gY29tcGFueUlkO1xuICAgICAgICBqc29uLmRpc3BsYXlfaWQgPSBkaXNwbGF5SWQ7XG5cbiAgICAgICAgY2IoanNvbik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjYihqc29uKTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGdldElkcyhjYikge1xuICAgIGlmICghY2IgfHwgdHlwZW9mIGNiICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjYWxsYmFjayA9IGNiO1xuICAgIH1cblxuICAgIGlmIChjb21wYW55SWQgJiYgZGlzcGxheUlkKSB7XG4gICAgICBjYWxsYmFjayhjb21wYW55SWQsIGRpc3BsYXlJZCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKGlkICYmIGlkICE9PSBcIlwiKSB7XG4gICAgICAgIGdhZGdldHMucnBjLnJlZ2lzdGVyKFwicnNwYXJhbV9zZXRfXCIgKyBpZCwgc2V0SWRzKTtcbiAgICAgICAgZ2FkZ2V0cy5ycGMuY2FsbChcIlwiLCBcInJzcGFyYW1fZ2V0XCIsIG51bGwsIGlkLCBbXCJjb21wYW55SWRcIiwgXCJkaXNwbGF5SWRcIl0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEZpbGVGb3JtYXQodXJsKSB7XG4gICAgdmFyIGhhc1BhcmFtcyA9IC9bPyMmXS8sXG4gICAgICBzdHI7XG5cbiAgICBpZiAoIXVybCB8fCB0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzdHIgPSB1cmwuc3Vic3RyKHVybC5sYXN0SW5kZXhPZihcIi5cIikgKyAxKTtcblxuICAgIC8vIGRvbid0IGluY2x1ZGUgYW55IHBhcmFtcyBhZnRlciB0aGUgZmlsZW5hbWVcbiAgICBpZiAoaGFzUGFyYW1zLnRlc3Qoc3RyKSkge1xuICAgICAgc3RyID0gc3RyLnN1YnN0cigwICwoc3RyLmluZGV4T2YoXCI/XCIpICE9PSAtMSkgPyBzdHIuaW5kZXhPZihcIj9cIikgOiBzdHIubGVuZ3RoKTtcblxuICAgICAgc3RyID0gc3RyLnN1YnN0cigwLCAoc3RyLmluZGV4T2YoXCIjXCIpICE9PSAtMSkgPyBzdHIuaW5kZXhPZihcIiNcIikgOiBzdHIubGVuZ3RoKTtcblxuICAgICAgc3RyID0gc3RyLnN1YnN0cigwLCAoc3RyLmluZGV4T2YoXCImXCIpICE9PSAtMSkgPyBzdHIuaW5kZXhPZihcIiZcIikgOiBzdHIubGVuZ3RoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbnNlcnREYXRhKHBhcmFtcykge1xuICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShCQVNFX0lOU0VSVF9TQ0hFTUEpKTtcblxuICAgIGRhdGEucm93c1swXS5pbnNlcnRJZCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyKS50b1VwcGVyQ2FzZSgpO1xuICAgIGRhdGEucm93c1swXS5qc29uID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShwYXJhbXMpKTtcbiAgICBkYXRhLnJvd3NbMF0uanNvbi50cyA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcblxuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VGFibGUobmFtZSkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoKSxcbiAgICAgIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKSArIDEsXG4gICAgICBkYXkgPSBkYXRlLmdldFVUQ0RhdGUoKTtcblxuICAgIGlmIChtb250aCA8IDEwKSB7XG4gICAgICBtb250aCA9IFwiMFwiICsgbW9udGg7XG4gICAgfVxuXG4gICAgaWYgKGRheSA8IDEwKSB7XG4gICAgICBkYXkgPSBcIjBcIiArIGRheTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmFtZSArIHllYXIgKyBtb250aCArIGRheTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvZ0V2ZW50KHRhYmxlLCBwYXJhbXMpIHtcbiAgICBnZXRFdmVudFBhcmFtcyhwYXJhbXMsIGZ1bmN0aW9uKGpzb24pIHtcbiAgICAgIGlmIChqc29uICE9PSBudWxsKSB7XG4gICAgICAgIFJpc2VWaXNpb24uQ29tbW9uLkxvZ2dlci5sb2codGFibGUsIGpzb24pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBcImdldElkc1wiOiBnZXRJZHMsXG4gICAgXCJnZXRJbnNlcnREYXRhXCI6IGdldEluc2VydERhdGEsXG4gICAgXCJnZXRGaWxlRm9ybWF0XCI6IGdldEZpbGVGb3JtYXQsXG4gICAgXCJnZXRUYWJsZVwiOiBnZXRUYWJsZSxcbiAgICBcImxvZ0V2ZW50XCI6IGxvZ0V2ZW50XG4gIH07XG59KShnYWRnZXRzKTtcblxuUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyID0gKGZ1bmN0aW9uKHV0aWxzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBSRUZSRVNIX1VSTCA9IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3Rva2VuP2NsaWVudF9pZD1cIiArIFdJREdFVF9DT01NT05fQ09ORklHLkxPR0dFUl9DTElFTlRfSUQgK1xuICAgICAgXCImY2xpZW50X3NlY3JldD1cIiArIFdJREdFVF9DT01NT05fQ09ORklHLkxPR0dFUl9DTElFTlRfU0VDUkVUICtcbiAgICAgIFwiJnJlZnJlc2hfdG9rZW49XCIgKyBXSURHRVRfQ09NTU9OX0NPTkZJRy5MT0dHRVJfUkVGUkVTSF9UT0tFTiArXG4gICAgICBcIiZncmFudF90eXBlPXJlZnJlc2hfdG9rZW5cIjtcblxuICB2YXIgc2VydmljZVVybCA9IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYmlncXVlcnkvdjIvcHJvamVjdHMvY2xpZW50LXNpZGUtZXZlbnRzL2RhdGFzZXRzL1dpZGdldF9FdmVudHMvdGFibGVzL1RBQkxFX0lEL2luc2VydEFsbFwiLFxuICAgIHRocm90dGxlID0gZmFsc2UsXG4gICAgdGhyb3R0bGVEZWxheSA9IDEwMDAsXG4gICAgbGFzdEV2ZW50ID0gXCJcIixcbiAgICByZWZyZXNoRGF0ZSA9IDAsXG4gICAgdG9rZW4gPSBcIlwiO1xuXG4gIC8qXG4gICAqICBQcml2YXRlIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIHJlZnJlc2hUb2tlbihjYikge1xuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIGlmIChuZXcgRGF0ZSgpIC0gcmVmcmVzaERhdGUgPCAzNTgwMDAwKSB7XG4gICAgICByZXR1cm4gY2Ioe30pO1xuICAgIH1cblxuICAgIHhoci5vcGVuKFwiUE9TVFwiLCBSRUZSRVNIX1VSTCwgdHJ1ZSk7XG4gICAgeGhyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlc3AgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZSk7XG5cbiAgICAgIGNiKHsgdG9rZW46IHJlc3AuYWNjZXNzX3Rva2VuLCByZWZyZXNoZWRBdDogbmV3IERhdGUoKSB9KTtcbiAgICB9O1xuXG4gICAgeGhyLnNlbmQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVGhyb3R0bGVkKGV2ZW50KSB7XG4gICAgcmV0dXJuIHRocm90dGxlICYmIChsYXN0RXZlbnQgPT09IGV2ZW50KTtcbiAgfVxuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gbG9nKHRhYmxlTmFtZSwgcGFyYW1zKSB7XG4gICAgaWYgKCF0YWJsZU5hbWUgfHwgIXBhcmFtcyB8fCAocGFyYW1zLmhhc093blByb3BlcnR5KFwiZXZlbnRcIikgJiYgIXBhcmFtcy5ldmVudCkgfHxcbiAgICAgIChwYXJhbXMuaGFzT3duUHJvcGVydHkoXCJldmVudFwiKSAmJiBpc1Rocm90dGxlZChwYXJhbXMuZXZlbnQpKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRocm90dGxlID0gdHJ1ZTtcbiAgICBsYXN0RXZlbnQgPSBwYXJhbXMuZXZlbnQ7XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm90dGxlID0gZmFsc2U7XG4gICAgfSwgdGhyb3R0bGVEZWxheSk7XG5cbiAgICBmdW5jdGlvbiBpbnNlcnRXaXRoVG9rZW4ocmVmcmVzaERhdGEpIHtcbiAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgICAgICAgaW5zZXJ0RGF0YSwgdXJsO1xuXG4gICAgICB1cmwgPSBzZXJ2aWNlVXJsLnJlcGxhY2UoXCJUQUJMRV9JRFwiLCB1dGlscy5nZXRUYWJsZSh0YWJsZU5hbWUpKTtcbiAgICAgIHJlZnJlc2hEYXRlID0gcmVmcmVzaERhdGEucmVmcmVzaGVkQXQgfHwgcmVmcmVzaERhdGU7XG4gICAgICB0b2tlbiA9IHJlZnJlc2hEYXRhLnRva2VuIHx8IHRva2VuO1xuICAgICAgaW5zZXJ0RGF0YSA9IHV0aWxzLmdldEluc2VydERhdGEocGFyYW1zKTtcblxuICAgICAgLy8gSW5zZXJ0IHRoZSBkYXRhLlxuICAgICAgeGhyLm9wZW4oXCJQT1NUXCIsIHVybCwgdHJ1ZSk7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkF1dGhvcml6YXRpb25cIiwgXCJCZWFyZXIgXCIgKyB0b2tlbik7XG5cbiAgICAgIGlmIChwYXJhbXMuY2IgJiYgdHlwZW9mIHBhcmFtcy5jYiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHhoci5vbmxvYWRlbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBwYXJhbXMuY2IoeGhyLnJlc3BvbnNlKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgeGhyLnNlbmQoSlNPTi5zdHJpbmdpZnkoaW5zZXJ0RGF0YSkpO1xuICAgIH1cblxuICAgIHJldHVybiByZWZyZXNoVG9rZW4oaW5zZXJ0V2l0aFRva2VuKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgXCJsb2dcIjogbG9nXG4gIH07XG59KShSaXNlVmlzaW9uLkNvbW1vbi5Mb2dnZXJVdGlscyk7XG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLkNvbW1vbiA9IFJpc2VWaXNpb24uQ29tbW9uIHx8IHt9O1xuXG5SaXNlVmlzaW9uLkNvbW1vbi5SaXNlQ2FjaGUgPSAoZnVuY3Rpb24gKCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgQkFTRV9DQUNIRV9VUkwgPSBcImh0dHA6Ly9sb2NhbGhvc3Q6OTQ5NC9cIjtcblxuICB2YXIgX3BpbmdSZWNlaXZlZCA9IGZhbHNlLFxuICAgIF9pc0NhY2hlUnVubmluZyA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIHBpbmcoY2FsbGJhY2spIHtcbiAgICB2YXIgciA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgaWYgKCFjYWxsYmFjayB8fCB0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHIub3BlbihcIkdFVFwiLCBCQVNFX0NBQ0hFX1VSTCArIFwicGluZz9jYWxsYmFjaz1fXCIsIHRydWUpO1xuICAgIHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcbiAgICAgICAgICAvLyBzYXZlIHRoaXMgcmVzdWx0IGZvciB1c2UgaW4gZ2V0RmlsZSgpXG4gICAgICAgICAgX3BpbmdSZWNlaXZlZCA9IHRydWU7XG5cbiAgICAgICAgICBpZihyLnN0YXR1cyA9PT0gMjAwKXtcbiAgICAgICAgICAgIF9pc0NhY2hlUnVubmluZyA9IHRydWU7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKHRydWUsIHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhcIlJpc2UgQ2FjaGUgaXMgbm90IHJ1bm5pbmdcIik7XG4gICAgICAgICAgICBfaXNDYWNoZVJ1bm5pbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UsIG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIkNhdWdodCBleGNlcHRpb246IFwiLCBlLmRlc2NyaXB0aW9uKTtcbiAgICAgIH1cblxuICAgIH07XG4gICAgci5zZW5kKCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRGaWxlKGZpbGVVcmwsIGNhbGxiYWNrLCBub2NhY2hlYnVzdGVyKSB7XG4gICAgaWYgKCFmaWxlVXJsIHx8ICFjYWxsYmFjayB8fCB0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbGVSZXF1ZXN0KGlzQ2FjaGVSdW5uaW5nKSB7XG4gICAgICB2YXIgdXJsLCBzdHIsIHNlcGFyYXRvcjtcblxuICAgICAgaWYgKGlzQ2FjaGVSdW5uaW5nKSB7XG4gICAgICAgIC8vIGNvbmZpZ3VyZSB1cmwgd2l0aCBjYWNoZWJ1c3RlciBvciBub3RcbiAgICAgICAgdXJsID0gKG5vY2FjaGVidXN0ZXIpID8gQkFTRV9DQUNIRV9VUkwgKyBcIj91cmw9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoZmlsZVVybCkgOlxuICAgICAgICAgIEJBU0VfQ0FDSEVfVVJMICsgXCJjYj1cIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgXCI/dXJsPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGZpbGVVcmwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG5vY2FjaGVidXN0ZXIpIHtcbiAgICAgICAgICB1cmwgPSBmaWxlVXJsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9IGZpbGVVcmwuc3BsaXQoXCI/XCIpO1xuICAgICAgICAgIHNlcGFyYXRvciA9IChzdHIubGVuZ3RoID09PSAxKSA/IFwiP1wiIDogXCImXCI7XG4gICAgICAgICAgdXJsID0gZmlsZVVybCArIHNlcGFyYXRvciArIFwiY2I9XCIgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtYWtlUmVxdWVzdChcIkhFQURcIiwgdXJsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlUmVxdWVzdChtZXRob2QsIHVybCkge1xuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLFxuICAgICAgICByZXF1ZXN0ID0ge1xuICAgICAgICAgIHhocjogeGhyLFxuICAgICAgICAgIHVybDogdXJsXG4gICAgICAgIH07XG5cbiAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcblxuICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkZW5kXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0YXR1cyA9IHhoci5zdGF0dXMgfHwgMDtcblxuICAgICAgICBpZiAoc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDApIHtcbiAgICAgICAgICBjYWxsYmFjayhyZXF1ZXN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBTZXJ2ZXIgbWF5IG5vdCBzdXBwb3J0IEhFQUQgcmVxdWVzdC4gRmFsbGJhY2sgdG8gYSBHRVQgcmVxdWVzdC5cbiAgICAgICAgICBpZiAobWV0aG9kID09PSBcIkhFQURcIikge1xuICAgICAgICAgICAgbWFrZVJlcXVlc3QoXCJHRVRcIiwgdXJsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKF9pc0NhY2hlUnVubmluZykge1xuICAgICAgICAgICAgICBjYWxsYmFjayhyZXF1ZXN0LCBuZXcgRXJyb3IoXCJUaGUgcmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZTogXCIgKyBzdGF0dXMpKTtcbiAgICAgICAgICAgIH0gZWxzZXtcbiAgICAgICAgICAgICAgLy8gVGhpcyBpcyB0byBhdm9pZCB0aHJvd2luZyBhbiBlcnJvciB3aGVuIHRoZXJlIGlzIGEgY3Jvc3MgZG9tYWluIGlzc3VlXG4gICAgICAgICAgICAgIGNhbGxiYWNrKHJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHhoci5zZW5kKCk7XG4gICAgfVxuXG4gICAgaWYgKCFfcGluZ1JlY2VpdmVkKSB7XG4gICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgICByZXR1cm4gdGhpcy5waW5nKGZpbGVSZXF1ZXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZpbGVSZXF1ZXN0KF9pc0NhY2hlUnVubmluZyk7XG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldEZpbGU6IGdldEZpbGUsXG4gICAgcGluZzogcGluZ1xuICB9O1xuXG59KSgpO1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5cblJpc2VWaXNpb24uQ29tbW9uID0gUmlzZVZpc2lvbi5Db21tb24gfHwge307XG5cblJpc2VWaXNpb24uQ29tbW9uLlV0aWxpdGllcyA9IChmdW5jdGlvbigpIHtcblxuICBmdW5jdGlvbiBnZXRGb250Q3NzU3R5bGUoY2xhc3NOYW1lLCBmb250T2JqKSB7XG4gICAgdmFyIGZhbWlseSA9IFwiZm9udC1mYW1pbHk6XCIgKyBmb250T2JqLmZvbnQuZmFtaWx5ICsgXCI7IFwiO1xuICAgIHZhciBjb2xvciA9IFwiY29sb3I6IFwiICsgZm9udE9iai5jb2xvciArIFwiOyBcIjtcbiAgICB2YXIgc2l6ZSA9IFwiZm9udC1zaXplOiBcIiArIGZvbnRPYmouc2l6ZSArIFwicHg7IFwiO1xuICAgIHZhciB3ZWlnaHQgPSBcImZvbnQtd2VpZ2h0OiBcIiArIChmb250T2JqLmJvbGQgPyBcImJvbGRcIiA6IFwibm9ybWFsXCIpICsgXCI7IFwiO1xuICAgIHZhciBpdGFsaWMgPSBcImZvbnQtc3R5bGU6IFwiICsgKGZvbnRPYmouaXRhbGljID8gXCJpdGFsaWNcIiA6IFwibm9ybWFsXCIpICsgXCI7IFwiO1xuICAgIHZhciB1bmRlcmxpbmUgPSBcInRleHQtZGVjb3JhdGlvbjogXCIgKyAoZm9udE9iai51bmRlcmxpbmUgPyBcInVuZGVybGluZVwiIDogXCJub25lXCIpICsgXCI7IFwiO1xuICAgIHZhciBoaWdobGlnaHQgPSBcImJhY2tncm91bmQtY29sb3I6IFwiICsgZm9udE9iai5oaWdobGlnaHRDb2xvciArIFwiOyBcIjtcblxuICAgIHJldHVybiBcIi5cIiArIGNsYXNzTmFtZSArIFwiIHtcIiArIGZhbWlseSArIGNvbG9yICsgc2l6ZSArIHdlaWdodCArIGl0YWxpYyArIHVuZGVybGluZSArIGhpZ2hsaWdodCArIFwifVwiO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkQ1NTUnVsZXMocnVsZXMpIHtcbiAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gcnVsZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGVzW2ldKSk7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICAvKlxuICAgKiBMb2FkcyBHb29nbGUgb3IgY3VzdG9tIGZvbnRzLCBpZiBhcHBsaWNhYmxlLCBhbmQgaW5qZWN0cyBDU1Mgc3R5bGVzXG4gICAqIGludG8gdGhlIGhlYWQgb2YgdGhlIGRvY3VtZW50LlxuICAgKlxuICAgKiBAcGFyYW0gICAgYXJyYXkgICAgc2V0dGluZ3MgICAgQXJyYXkgb2Ygb2JqZWN0cyB3aXRoIHRoZSBmb2xsb3dpbmcgZm9ybTpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbe1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBcImRhdGVcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZm9udFNldHRpbmdcIjoge1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvbGQ6IHRydWUsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiYmxhY2tcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250OiB7XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYW1pbHk6IFwiQWtyb25pbVwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udDogXCJBa3JvbmltXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlZlcmRhbmFcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZ29vZ2xlXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cDovL2N1c3RvbS1mb250LXVybFwiXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRDb2xvcjogXCJ0cmFuc3BhcmVudFwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0YWxpYzogZmFsc2UsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogXCIyMFwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVybGluZTogZmFsc2VcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XVxuICAgKlxuICAgKiAgICAgICAgICAgb2JqZWN0ICAgY29udGVudERvYyAgICBEb2N1bWVudCBvYmplY3QgaW50byB3aGljaCB0byBpbmplY3Qgc3R5bGVzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBsb2FkIGZvbnRzIChvcHRpb25hbCkuXG4gICAqL1xuICBmdW5jdGlvbiBsb2FkRm9udHMoc2V0dGluZ3MsIGNvbnRlbnREb2MpIHtcbiAgICBzZXR0aW5ncy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGlmIChpdGVtLmNsYXNzICYmIGl0ZW0uZm9udFNldHRpbmcpIHtcbiAgICAgICAgYWRkQ1NTUnVsZXMoWyBnZXRGb250Q3NzU3R5bGUoaXRlbS5jbGFzcywgaXRlbS5mb250U2V0dGluZykgXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtLmZvbnRTZXR0aW5nLmZvbnQudHlwZSkge1xuICAgICAgICBpZiAoaXRlbS5mb250U2V0dGluZy5mb250LnR5cGUgPT09IFwiY3VzdG9tXCIgJiYgaXRlbS5mb250U2V0dGluZy5mb250LmZhbWlseSAmJlxuICAgICAgICAgIGl0ZW0uZm9udFNldHRpbmcuZm9udC51cmwpIHtcbiAgICAgICAgICBsb2FkQ3VzdG9tRm9udChpdGVtLmZvbnRTZXR0aW5nLmZvbnQuZmFtaWx5LCBpdGVtLmZvbnRTZXR0aW5nLmZvbnQudXJsLFxuICAgICAgICAgICAgY29udGVudERvYyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXRlbS5mb250U2V0dGluZy5mb250LnR5cGUgPT09IFwiZ29vZ2xlXCIgJiYgaXRlbS5mb250U2V0dGluZy5mb250LmZhbWlseSkge1xuICAgICAgICAgIGxvYWRHb29nbGVGb250KGl0ZW0uZm9udFNldHRpbmcuZm9udC5mYW1pbHksIGNvbnRlbnREb2MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkQ3VzdG9tRm9udChmYW1pbHksIHVybCwgY29udGVudERvYykge1xuICAgIHZhciBzaGVldCA9IG51bGw7XG4gICAgdmFyIHJ1bGUgPSBcImZvbnQtZmFtaWx5OiBcIiArIGZhbWlseSArIFwiOyBcIiArIFwic3JjOiB1cmwoJ1wiICsgdXJsICsgXCInKTtcIjtcblxuICAgIGNvbnRlbnREb2MgPSBjb250ZW50RG9jIHx8IGRvY3VtZW50O1xuXG4gICAgc2hlZXQgPSBjb250ZW50RG9jLnN0eWxlU2hlZXRzWzBdO1xuXG4gICAgaWYgKHNoZWV0ICE9PSBudWxsKSB7XG4gICAgICBzaGVldC5hZGRSdWxlKFwiQGZvbnQtZmFjZVwiLCBydWxlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkR29vZ2xlRm9udChmYW1pbHksIGNvbnRlbnREb2MpIHtcbiAgICB2YXIgc3R5bGVzaGVldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG4gICAgY29udGVudERvYyA9IGNvbnRlbnREb2MgfHwgZG9jdW1lbnQ7XG5cbiAgICBzdHlsZXNoZWV0LnNldEF0dHJpYnV0ZShcInJlbFwiLCBcInN0eWxlc2hlZXRcIik7XG4gICAgc3R5bGVzaGVldC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dC9jc3NcIik7XG4gICAgc3R5bGVzaGVldC5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIFwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVwiICtcbiAgICAgIGZhbWlseSk7XG5cbiAgICBpZiAoc3R5bGVzaGVldCAhPT0gbnVsbCkge1xuICAgICAgY29udGVudERvYy5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0uYXBwZW5kQ2hpbGQoc3R5bGVzaGVldCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJlbG9hZEltYWdlcyh1cmxzKSB7XG4gICAgdmFyIGxlbmd0aCA9IHVybHMubGVuZ3RoLFxuICAgICAgaW1hZ2VzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpbWFnZXNbaV0gPSBuZXcgSW1hZ2UoKTtcbiAgICAgIGltYWdlc1tpXS5zcmMgPSB1cmxzW2ldO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFF1ZXJ5UGFyYW1ldGVyKHBhcmFtKSB7XG4gICAgdmFyIHF1ZXJ5ID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSksXG4gICAgICB2YXJzID0gcXVlcnkuc3BsaXQoXCImXCIpLFxuICAgICAgcGFpcjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFycy5sZW5ndGg7IGkrKykge1xuICAgICAgcGFpciA9IHZhcnNbaV0uc3BsaXQoXCI9XCIpO1xuXG4gICAgICBpZiAocGFpclswXSA9PSBwYXJhbSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRRdWVyeVBhcmFtZXRlcjogZ2V0UXVlcnlQYXJhbWV0ZXIsXG4gICAgZ2V0Rm9udENzc1N0eWxlOiAgZ2V0Rm9udENzc1N0eWxlLFxuICAgIGFkZENTU1J1bGVzOiAgICAgIGFkZENTU1J1bGVzLFxuICAgIGxvYWRGb250czogICAgICAgIGxvYWRGb250cyxcbiAgICBsb2FkQ3VzdG9tRm9udDogICBsb2FkQ3VzdG9tRm9udCxcbiAgICBsb2FkR29vZ2xlRm9udDogICBsb2FkR29vZ2xlRm9udCxcbiAgICBwcmVsb2FkSW1hZ2VzOiAgICBwcmVsb2FkSW1hZ2VzXG4gIH07XG59KSgpO1xuXG4vKiBnbG9iYWwgY29uZmlnOiB0cnVlICovXG4vKiBleHBvcnRlZCBjb25maWcgKi9cbmlmICh0eXBlb2YgYW5ndWxhciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBhbmd1bGFyLm1vZHVsZShcInJpc2V2aXNpb24uY29tbW9uLmkxOG4uY29uZmlnXCIsIFtdKVxuICAgIC5jb25zdGFudChcIkxPQ0FMRVNfUFJFRklYXCIsIFwibG9jYWxlcy90cmFuc2xhdGlvbl9cIilcbiAgICAuY29uc3RhbnQoXCJMT0NBTEVTX1NVRklYXCIsIFwiLmpzb25cIik7XG59XG5cbmlmICh0eXBlb2YgY29uZmlnID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIHZhciBjb25maWcgPSB7XG4gICAgU1RPUkFHRV9FTlY6IFwicHJvZFwiXG4gIH07XG59XG5cbi8qIGdsb2JhbCBnYWRnZXRzLCBfICovXG5cbnZhciBSaXNlVmlzaW9uID0gUmlzZVZpc2lvbiB8fCB7fTtcblJpc2VWaXNpb24uSW1hZ2UgPSB7fTtcblxuUmlzZVZpc2lvbi5JbWFnZSA9IChmdW5jdGlvbiAoZ2FkZ2V0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgX21vZGU7XG5cbiAgdmFyIF9wcmVmcyA9IG5ldyBnYWRnZXRzLlByZWZzKCksXG4gICAgX21lc3NhZ2UgPSBudWxsLFxuICAgIF9wYXJhbXMgPSBudWxsO1xuXG4gIHZhciBfc3RvcmFnZSA9IG51bGwsXG4gICAgX25vblN0b3JhZ2UgPSBudWxsLFxuICAgIF9zbGlkZXIgPSBudWxsO1xuXG4gIHZhciBfY3VycmVudEZpbGVzID0gW107XG5cbiAgdmFyIF9lcnJvckxvZyA9IG51bGwsXG4gICAgX2NvbmZpZ3VyYXRpb25UeXBlID0gbnVsbCxcbiAgICBfZXJyb3JUaW1lciA9IG51bGwsXG4gICAgX2Vycm9yRmxhZyA9IGZhbHNlLFxuICAgIF9zdG9yYWdlRXJyb3JGbGFnID0gZmFsc2UsXG4gICAgX2NvbmZpZ3VyYXRpb25Mb2dnZWQgPSBmYWxzZTtcblxuICB2YXIgX3ZpZXdlclBhdXNlZCA9IHRydWU7XG5cbiAgLypcbiAgICogIFByaXZhdGUgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gX3JlYWR5KCkge1xuICAgIGdhZGdldHMucnBjLmNhbGwoXCJcIiwgXCJyc2V2ZW50X3JlYWR5XCIsIG51bGwsIF9wcmVmcy5nZXRTdHJpbmcoXCJpZFwiKSxcbiAgICAgIHRydWUsIHRydWUsIHRydWUsIHRydWUsIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2RvbmUoKSB7XG4gICAgZ2FkZ2V0cy5ycGMuY2FsbChcIlwiLCBcInJzZXZlbnRfZG9uZVwiLCBudWxsLCBfcHJlZnMuZ2V0U3RyaW5nKFwiaWRcIikpO1xuXG4gICAgLy8gQW55IGVycm9ycyBuZWVkIHRvIGJlIGxvZ2dlZCBiZWZvcmUgdGhlIGRvbmUgZXZlbnQuXG4gICAgaWYgKF9lcnJvckxvZyAhPT0gbnVsbCkge1xuICAgICAgbG9nRXZlbnQoX2Vycm9yTG9nLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvLyBsb2cgXCJkb25lXCIgZXZlbnRcbiAgICBsb2dFdmVudCh7IFwiZXZlbnRcIjogXCJkb25lXCIsIFwiZmlsZV91cmxcIjogX2dldEN1cnJlbnRGaWxlKCkgfSwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsZWFyRXJyb3JUaW1lcigpIHtcbiAgICBjbGVhclRpbWVvdXQoX2Vycm9yVGltZXIpO1xuICAgIF9lcnJvclRpbWVyID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9zdGFydEVycm9yVGltZXIoKSB7XG4gICAgX2NsZWFyRXJyb3JUaW1lcigpO1xuXG4gICAgX2Vycm9yVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIG5vdGlmeSBWaWV3ZXIgd2lkZ2V0IGlzIGRvbmVcbiAgICAgIF9kb25lKCk7XG4gICAgfSwgNTAwMCk7XG4gIH1cblxuICBmdW5jdGlvbiBfZ2V0Q3VycmVudEZpbGUoKSB7XG4gICAgdmFyIHNsaWRlTnVtID0gLTE7XG5cbiAgICBpZiAoX2N1cnJlbnRGaWxlcyAmJiBfY3VycmVudEZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChfbW9kZSA9PT0gXCJmaWxlXCIpIHtcbiAgICAgICAgcmV0dXJuIF9jdXJyZW50RmlsZXNbMF07XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChfbW9kZSA9PT0gXCJmb2xkZXJcIiAmJiBfc2xpZGVyICYmIF9zbGlkZXIuaXNSZWFkeSgpKSB7XG4gICAgICAgIC8vIHJldHJpZXZlIHRoZSBjdXJyZW50bHkgcGxheWVkIHNsaWRlXG4gICAgICAgIHNsaWRlTnVtID0gX3NsaWRlci5nZXRDdXJyZW50U2xpZGUoKTtcblxuICAgICAgICBpZiAoc2xpZGVOdW0gIT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIF9jdXJyZW50RmlsZXNbc2xpZGVOdW1dO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRhaW5lclwiKSxcbiAgICAgIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuICAgICAgaXNTdG9yYWdlRmlsZTtcblxuICAgIC8vIGNyZWF0ZSBpbnN0YW5jZSBvZiBtZXNzYWdlXG4gICAgX21lc3NhZ2UgPSBuZXcgUmlzZVZpc2lvbi5Db21tb24uTWVzc2FnZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRhaW5lclwiKSxcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWVzc2FnZUNvbnRhaW5lclwiKSk7XG5cbiAgICAvLyBzaG93IHdhaXQgbWVzc2FnZVxuICAgIF9tZXNzYWdlLnNob3coXCJQbGVhc2Ugd2FpdCB3aGlsZSB5b3VyIGltYWdlIGlzIGRvd25sb2FkZWQuXCIpO1xuXG4gICAgLy8gbGVnYWN5XG4gICAgaWYgKF9wYXJhbXMuYmFja2dyb3VuZCAmJiBPYmplY3Qua2V5cyhfcGFyYW1zLmJhY2tncm91bmQpLmxlbmd0aCA+IDApIHtcbiAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuYmFja2dyb3VuZCA9IF9wYXJhbXMuYmFja2dyb3VuZC5jb2xvcjtcbiAgICB9XG5cbiAgICBpZiAoX21vZGUgPT09IFwiZmlsZVwiKSB7XG4gICAgICAvLyBjcmVhdGUgdGhlIGltYWdlIDxkaXY+IHdpdGhpbiB0aGUgY29udGFpbmVyIDxkaXY+XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcImltYWdlXCIpO1xuICAgICAgZWwuY2xhc3NOYW1lID0gX3BhcmFtcy5wb3NpdGlvbjtcbiAgICAgIGVsLmNsYXNzTmFtZSA9IF9wYXJhbXMuc2NhbGVUb0ZpdCA/IGVsLmNsYXNzTmFtZSArIFwiIHNjYWxlLXRvLWZpdFwiIDogZWwuY2xhc3NOYW1lO1xuXG4gICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChlbCk7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuXG4gICAgICBpc1N0b3JhZ2VGaWxlID0gKE9iamVjdC5rZXlzKF9wYXJhbXMuc3RvcmFnZSkubGVuZ3RoICE9PSAwKTtcblxuICAgICAgaWYgKCFpc1N0b3JhZ2VGaWxlKSB7XG4gICAgICAgIF9jb25maWd1cmF0aW9uVHlwZSA9IFwiY3VzdG9tXCI7XG5cbiAgICAgICAgX25vblN0b3JhZ2UgPSBuZXcgUmlzZVZpc2lvbi5JbWFnZS5Ob25TdG9yYWdlKF9wYXJhbXMpO1xuICAgICAgICBfbm9uU3RvcmFnZS5pbml0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfY29uZmlndXJhdGlvblR5cGUgPSBcInN0b3JhZ2UgZmlsZVwiO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBhbmQgaW5pdGlhbGl6ZSB0aGUgU3RvcmFnZSBmaWxlIGluc3RhbmNlXG4gICAgICAgIF9zdG9yYWdlID0gbmV3IFJpc2VWaXNpb24uSW1hZ2UuU3RvcmFnZUZpbGUoX3BhcmFtcyk7XG4gICAgICAgIF9zdG9yYWdlLmluaXQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoX21vZGUgPT09IFwiZm9sZGVyXCIpIHtcbiAgICAgIC8vIGNyZWF0ZSB0aGUgc2xpZGVyIGNvbnRhaW5lciA8ZGl2PiB3aXRoaW4gdGhlIGNvbnRhaW5lciA8ZGl2PlxuICAgICAgZWwuY2xhc3NOYW1lID0gXCJ0cC1iYW5uZXItY29udGFpbmVyXCI7XG5cbiAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGVsKTtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChmcmFnbWVudCk7XG5cbiAgICAgIF9jb25maWd1cmF0aW9uVHlwZSA9IFwic3RvcmFnZSBmb2xkZXJcIjtcblxuICAgICAgLy8gY3JlYXRlIGFuZCBpbml0aWFsaXplIHRoZSBTdG9yYWdlIGZvbGRlciBpbnN0YW5jZVxuICAgICAgX3N0b3JhZ2UgPSBuZXcgUmlzZVZpc2lvbi5JbWFnZS5TdG9yYWdlRm9sZGVyKF9wYXJhbXMpO1xuICAgICAgX3N0b3JhZ2UuaW5pdCgpO1xuICAgIH1cblxuICAgIF9yZWFkeSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0U2luZ2xlSW1hZ2UodXJsKSB7XG4gICAgdmFyIGltYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjb250YWluZXIgI2ltYWdlXCIpO1xuICAgIGltYWdlLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IFwidXJsKFwiICsgdXJsICsgXCIpXCI7XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGhhc1N0b3JhZ2VFcnJvcigpIHtcbiAgICByZXR1cm4gX3N0b3JhZ2VFcnJvckZsYWc7XG4gIH1cblxuICBmdW5jdGlvbiBsb2dFdmVudChwYXJhbXMsIGlzRXJyb3IpIHtcbiAgICBpZiAoaXNFcnJvcikge1xuICAgICAgX2Vycm9yTG9nID0gcGFyYW1zO1xuICAgIH1cblxuICAgIFJpc2VWaXNpb24uQ29tbW9uLkxvZ2dlclV0aWxzLmxvZ0V2ZW50KGdldFRhYmxlTmFtZSgpLCBwYXJhbXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25GaWxlSW5pdCh1cmxzKSB7XG4gICAgaWYgKF9tb2RlID09PSBcImZpbGVcIikge1xuICAgICAgLy8gdXJscyB2YWx1ZSB3aWxsIGJlIGEgc3RyaW5nXG4gICAgICBfY3VycmVudEZpbGVzWzBdID0gdXJscztcblxuICAgICAgLy8gcmVtb3ZlIGEgbWVzc2FnZSBwcmV2aW91c2x5IHNob3duXG4gICAgICBfbWVzc2FnZS5oaWRlKCk7XG5cbiAgICAgIHNldFNpbmdsZUltYWdlKF9jdXJyZW50RmlsZXNbMF0pO1xuXG4gICAgfSBlbHNlIGlmIChfbW9kZSA9PT0gXCJmb2xkZXJcIikge1xuICAgICAgLy8gdXJscyB2YWx1ZSB3aWxsIGJlIGFuIGFycmF5XG4gICAgICBfY3VycmVudEZpbGVzID0gdXJscztcblxuICAgICAgLy8gY3JlYXRlIHNsaWRlciBpbnN0YW5jZVxuICAgICAgX3NsaWRlciA9IG5ldyBSaXNlVmlzaW9uLkltYWdlLlNsaWRlcihfcGFyYW1zKTtcbiAgICAgIF9zbGlkZXIuaW5pdCh1cmxzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkZpbGVSZWZyZXNoKHVybHMpIHtcbiAgICBpZiAoX21vZGUgPT09IFwiZmlsZVwiKSB7XG4gICAgICAvLyB1cmxzIHZhbHVlIHdpbGwgYmUgYSBzdHJpbmcgb2Ygb25lIHVybFxuICAgICAgX2N1cnJlbnRGaWxlc1swXSA9IHVybHM7XG5cbiAgICAgIHNldFNpbmdsZUltYWdlKF9jdXJyZW50RmlsZXNbMF0pO1xuXG4gICAgfSBlbHNlIGlmIChfbW9kZSA9PT0gXCJmb2xkZXJcIikge1xuICAgICAgLy8gdXJscyB2YWx1ZSB3aWxsIGJlIGFuIGFycmF5IG9mIHVybHNcbiAgICAgIF9jdXJyZW50RmlsZXMgPSB1cmxzO1xuXG4gICAgICBfc2xpZGVyLnJlZnJlc2goX2N1cnJlbnRGaWxlcyk7XG4gICAgfVxuXG4gICAgLy8gaW4gY2FzZSByZWZyZXNoZWQgZmlsZSBmaXhlcyBhbiBlcnJvciB3aXRoIHByZXZpb3VzIGZpbGUsIGVuc3VyZSBmbGFnIGlzIHJlbW92ZWQgc28gcGxheWJhY2sgaXMgYXR0ZW1wdGVkIGFnYWluXG4gICAgX2Vycm9yRmxhZyA9IGZhbHNlO1xuICAgIF9zdG9yYWdlRXJyb3JGbGFnID0gZmFsc2U7XG4gICAgX2Vycm9yTG9nID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEFkZGl0aW9uYWxQYXJhbXMoYWRkaXRpb25hbFBhcmFtcywgbW9kZVR5cGUpIHtcbiAgICBfcGFyYW1zID0gXy5jbG9uZShhZGRpdGlvbmFsUGFyYW1zKTtcbiAgICBfbW9kZSA9IG1vZGVUeXBlO1xuXG4gICAgX3BhcmFtcy53aWR0aCA9IF9wcmVmcy5nZXRJbnQoXCJyc1dcIik7XG4gICAgX3BhcmFtcy5oZWlnaHQgPSBfcHJlZnMuZ2V0SW50KFwicnNIXCIpO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250YWluZXJcIikuc3R5bGUuaGVpZ2h0ID0gX3ByZWZzLmdldEludChcInJzSFwiKSArIFwicHhcIjtcbiAgICBpbml0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBvblNsaWRlclJlYWR5KCkge1xuICAgIF9tZXNzYWdlLmhpZGUoKTtcblxuICAgIGlmICghX3ZpZXdlclBhdXNlZCkge1xuICAgICAgX3NsaWRlci5wbGF5KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25TbGlkZXJDb21wbGV0ZSgpIHtcbiAgICBfZG9uZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgX3ZpZXdlclBhdXNlZCA9IHRydWU7XG5cbiAgICAvLyBpbiBjYXNlIGVycm9yIHRpbWVyIHN0aWxsIHJ1bm5pbmcgKG5vIGNvbmRpdGlvbmFsIGNoZWNrIG9uIGVycm9yRmxhZywgaXQgbWF5IGhhdmUgYmVlbiByZXNldCBpbiBvbkZpbGVSZWZyZXNoKVxuICAgIF9jbGVhckVycm9yVGltZXIoKTtcblxuICAgIGlmIChfbW9kZSA9PT0gXCJmb2xkZXJcIiAmJiBfc2xpZGVyICYmIF9zbGlkZXIuaXNSZWFkeSgpKSB7XG4gICAgICBfc2xpZGVyLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGxheSgpIHtcbiAgICBfdmlld2VyUGF1c2VkID0gZmFsc2U7XG5cbiAgICBpZiAoIV9jb25maWd1cmF0aW9uTG9nZ2VkKSB7XG4gICAgICBsb2dFdmVudCh7IFwiZXZlbnRcIjogXCJjb25maWd1cmF0aW9uXCIsIFwiZXZlbnRfZGV0YWlsc1wiOiBfY29uZmlndXJhdGlvblR5cGUgfSwgZmFsc2UpO1xuICAgICAgX2NvbmZpZ3VyYXRpb25Mb2dnZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGxvZ0V2ZW50KHsgXCJldmVudFwiOiBcInBsYXlcIiwgXCJmaWxlX3VybFwiOiBfZ2V0Q3VycmVudEZpbGUoKSB9LCBmYWxzZSk7XG5cbiAgICBpZiAoX2Vycm9yRmxhZykge1xuICAgICAgX3N0YXJ0RXJyb3JUaW1lcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChfbW9kZSA9PT0gXCJmb2xkZXJcIiAmJiBfc2xpZGVyICYmIF9zbGlkZXIuaXNSZWFkeSgpKSB7XG4gICAgICBfc2xpZGVyLnBsYXkoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUYWJsZU5hbWUoKSB7XG4gICAgcmV0dXJuIFwiaW1hZ2VfZXZlbnRzXCI7XG4gIH1cblxuICBmdW5jdGlvbiBzaG93RXJyb3IobWVzc2FnZSwgaXNTdG9yYWdlRXJyb3IpIHtcbiAgICBfZXJyb3JGbGFnID0gdHJ1ZTtcbiAgICBfc3RvcmFnZUVycm9yRmxhZyA9IHR5cGVvZiBpc1N0b3JhZ2VFcnJvciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgIF9tZXNzYWdlLnNob3cobWVzc2FnZSk7XG5cbiAgICAvLyBkZXN0cm95IHNsaWRlciBpZiBpdCBleGlzdHMgYW5kIHByZXZpb3VzbHkgbm90aWZpZWQgcmVhZHlcbiAgICBpZiAoX21vZGUgPT09IFwiZm9sZGVyXCIgJiYgX3NsaWRlciAmJiBfc2xpZGVyLmlzUmVhZHkoKSkge1xuICAgICAgX3NsaWRlci5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgaWYgKCFfdmlld2VyUGF1c2VkKSB7XG4gICAgICBfc3RhcnRFcnJvclRpbWVyKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBwYXVzZSgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBcImhhc1N0b3JhZ2VFcnJvclwiOiBoYXNTdG9yYWdlRXJyb3IsXG4gICAgXCJsb2dFdmVudFwiOiBsb2dFdmVudCxcbiAgICBcIm9uRmlsZUluaXRcIjogb25GaWxlSW5pdCxcbiAgICBcIm9uRmlsZVJlZnJlc2hcIjogb25GaWxlUmVmcmVzaCxcbiAgICBcIm9uU2xpZGVyQ29tcGxldGVcIjogb25TbGlkZXJDb21wbGV0ZSxcbiAgICBcIm9uU2xpZGVyUmVhZHlcIjogb25TbGlkZXJSZWFkeSxcbiAgICBcInBhdXNlXCI6IHBhdXNlLFxuICAgIFwicGxheVwiOiBwbGF5LFxuICAgIFwic2V0QWRkaXRpb25hbFBhcmFtc1wiOiBzZXRBZGRpdGlvbmFsUGFyYW1zLFxuICAgIFwiZ2V0VGFibGVOYW1lXCI6IGdldFRhYmxlTmFtZSxcbiAgICBcInNob3dFcnJvclwiOiBzaG93RXJyb3IsXG4gICAgXCJzdG9wXCI6IHN0b3BcbiAgfTtcbn0pKGdhZGdldHMpO1xuXG4vKiBnbG9iYWwgXyAqL1xudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5JbWFnZSA9IFJpc2VWaXNpb24uSW1hZ2UgfHwge307XG5cblJpc2VWaXNpb24uSW1hZ2UuU2xpZGVyID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgdG90YWxTbGlkZXMgPSAwLFxuICAgICRhcGkgPSBudWxsLFxuICAgIGN1cnJlbnRGaWxlcyA9IG51bGwsXG4gICAgbmV3RmlsZXMgPSBudWxsLFxuICAgIG5hdlRpbWVyID0gbnVsbCxcbiAgICBzbGlkZVRpbWVyID0gbnVsbCxcbiAgICBpc0xhc3RTbGlkZSA9IGZhbHNlLFxuICAgIHJlZnJlc2hTbGlkZXIgPSBmYWxzZSxcbiAgICBpc0xvYWRpbmcgPSB0cnVlLFxuICAgIGlzUGxheWluZyA9IGZhbHNlLFxuICAgIGlzSW50ZXJhY3RpbmcgPSBmYWxzZSxcbiAgICBuYXZUaW1lb3V0ID0gMzAwMDtcblxuICAvKlxuICAgKiAgUHJpdmF0ZSBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBhZGRTbGlkZXMoKSB7XG4gICAgdmFyIGxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRwLWJhbm5lciB1bFwiKSxcbiAgICAgIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgICAgc2xpZGVzID0gW10sXG4gICAgICBzbGlkZSA9IG51bGwsXG4gICAgICBpbWFnZSA9IG51bGwsXG4gICAgICBwb3NpdGlvbiA9IFwiXCI7XG5cbiAgICB0b3RhbFNsaWRlcyA9IGN1cnJlbnRGaWxlcy5sZW5ndGg7XG5cbiAgICBjdXJyZW50RmlsZXMuZm9yRWFjaChmdW5jdGlvbihmaWxlKSB7XG4gICAgICBzbGlkZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICAgIGltYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcblxuICAgICAgLy8gVHJhbnNpdGlvblxuICAgICAgc2xpZGUuc2V0QXR0cmlidXRlKFwiZGF0YS10cmFuc2l0aW9uXCIsIFwiZmFkZVwiKTtcbiAgICAgIHNsaWRlLnNldEF0dHJpYnV0ZShcImRhdGEtbWFzdGVyc3BlZWRcIiwgNTAwKTtcbiAgICAgIHNsaWRlLnNldEF0dHJpYnV0ZShcImRhdGEtZGVsYXlcIiwgcGFyYW1zLmR1cmF0aW9uICogMTAwMCk7XG5cbiAgICAgIGltYWdlLnNyYyA9IGZpbGUudXJsO1xuXG4gICAgICAvLyBBbGlnbm1lbnRcbiAgICAgIHN3aXRjaCAocGFyYW1zLnBvc2l0aW9uKSB7XG4gICAgICAgIGNhc2UgXCJ0b3AtbGVmdFwiOlxuICAgICAgICAgIHBvc2l0aW9uID0gXCJsZWZ0IHRvcFwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidG9wLWNlbnRlclwiOlxuICAgICAgICAgIHBvc2l0aW9uID0gXCJjZW50ZXIgdG9wXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ0b3AtcmlnaHRcIjpcbiAgICAgICAgICBwb3NpdGlvbiA9IFwicmlnaHQgdG9wXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtaWRkbGUtbGVmdFwiOlxuICAgICAgICAgIHBvc2l0aW9uID0gXCJsZWZ0IGNlbnRlclwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibWlkZGxlLWNlbnRlclwiOlxuICAgICAgICAgIHBvc2l0aW9uID0gXCJjZW50ZXIgY2VudGVyXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtaWRkbGUtcmlnaHRcIjpcbiAgICAgICAgICBwb3NpdGlvbiA9IFwicmlnaHQgY2VudGVyXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJib3R0b20tbGVmdFwiOlxuICAgICAgICAgIHBvc2l0aW9uID0gXCJsZWZ0IGJvdHRvbVwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiYm90dG9tLWNlbnRlclwiOlxuICAgICAgICAgIHBvc2l0aW9uID0gXCJjZW50ZXIgYm90dG9tXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJib3R0b20tcmlnaHRcIjpcbiAgICAgICAgICBwb3NpdGlvbiA9IFwicmlnaHQgYm90dG9tXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcG9zaXRpb24gPSBcImxlZnQgdG9wXCI7XG4gICAgICB9XG5cbiAgICAgIGltYWdlLnNldEF0dHJpYnV0ZShcImRhdGEtYmdwb3NpdGlvblwiLCBwb3NpdGlvbik7XG5cbiAgICAgIC8vIFNjYWxlIHRvIEZpdFxuICAgICAgaWYgKHBhcmFtcy5zY2FsZVRvRml0KSB7XG4gICAgICAgIGltYWdlLnNldEF0dHJpYnV0ZShcImRhdGEtYmdmaXRcIiwgXCJjb250YWluXCIpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGltYWdlLnNldEF0dHJpYnV0ZShcImRhdGEtYmdmaXRcIiwgXCJub3JtYWxcIik7XG4gICAgICB9XG5cbiAgICAgIHNsaWRlLmFwcGVuZENoaWxkKGltYWdlKTtcbiAgICAgIHNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICB9KTtcblxuICAgIHNsaWRlcy5mb3JFYWNoKGZ1bmN0aW9uKHNsaWRlKSB7XG4gICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChzbGlkZSk7XG4gICAgfSk7XG5cbiAgICBsaXN0LmFwcGVuZENoaWxkKGZyYWdtZW50KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uU2xpZGVDaGFuZ2VkKGRhdGEpIHtcbiAgICBpZiAoaXNJbnRlcmFjdGluZykge1xuICAgICAgcGF1c2UoKTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgY2FsbCBcImRvbmVcIiBpZiB1c2VyIGlzIGludGVyYWN0aW5nIHdpdGggdGhlIHNsaWRlc2hvdy5cbiAgICBlbHNlIHtcbiAgICAgIGlmIChpc0xhc3RTbGlkZSkge1xuICAgICAgICBpc0xhc3RTbGlkZSA9IGZhbHNlO1xuICAgICAgICBwYXVzZSgpO1xuICAgICAgICBSaXNlVmlzaW9uLkltYWdlLm9uU2xpZGVyQ29tcGxldGUoKTtcblxuICAgICAgICBpZiAocmVmcmVzaFNsaWRlcikge1xuICAgICAgICAgIC8vIERlc3Ryb3kgYW5kIHJlY3JlYXRlIHRoZSBzbGlkZXIgaWYgdGhlIGZpbGVzIGhhdmUgY2hhbmdlZC5cbiAgICAgICAgICBpZiAoJGFwaSkge1xuICAgICAgICAgICAgZGVzdHJveVNsaWRlcigpO1xuICAgICAgICAgICAgaW5pdChuZXdGaWxlcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmVmcmVzaFNsaWRlciA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuc2xpZGVJbmRleCA9PT0gdG90YWxTbGlkZXMpIHtcbiAgICAgIGlzTGFzdFNsaWRlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95U2xpZGVyKCkge1xuICAgIC8vIFJlbW92ZSBldmVudCBoYW5kbGVycy5cbiAgICAkKFwiYm9keVwiKS5vZmYoXCJ0b3VjaGVuZFwiKTtcbiAgICAkYXBpLm9mZihcInJldm9sdXRpb24uc2xpZGUub25sb2FkZWRcIik7XG4gICAgJGFwaS5vZmYoXCJyZXZvbHV0aW9uLnNsaWRlLm9uY2hhbmdlXCIpO1xuXG4gICAgLy8gTGV0IHRoZSBzbGlkZXIgY2xlYW4gdXAgYWZ0ZXIgaXRzZWxmLlxuICAgICRhcGkucmV2a2lsbCgpO1xuICAgICRhcGkgPSBudWxsO1xuICB9XG5cbiAgLy8gVXNlciBoYXMgaW50ZXJhY3RlZCB3aXRoIHRoZSBzbGlkZXNob3cuXG4gIGZ1bmN0aW9uIGhhbmRsZVVzZXJBY3Rpdml0eSgpIHtcbiAgICBpc0ludGVyYWN0aW5nID0gdHJ1ZTtcbiAgICBjbGVhclRpbWVvdXQoc2xpZGVUaW1lcik7XG5cbiAgICAvLyBNb3ZlIHRvIG5leHQgc2xpZGUgYW5kIHJlc3VtZSB0aGUgc2xpZGVzaG93IGFmdGVyIGEgZGVsYXkuXG4gICAgc2xpZGVUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAkYXBpLnJldm5leHQoKTtcbiAgICAgICRhcGkucmV2cmVzdW1lKCk7XG5cbiAgICAgIGlzSW50ZXJhY3RpbmcgPSBmYWxzZTtcbiAgICAgIGlzUGxheWluZyA9IHRydWU7XG4gICAgfSwgcGFyYW1zLnBhdXNlICogMTAwMCk7XG5cbiAgICBoaWRlTmF2KCk7XG4gIH1cblxuICAvLyBIaWRlIHRoZSBuYXZpZ2F0aW9uIGFmdGVyIGEgZGVsYXkuXG4gIGZ1bmN0aW9uIGhpZGVOYXYoKSB7XG4gICAgaWYgKHBhcmFtcy5hdXRvSGlkZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KG5hdlRpbWVyKTtcblxuICAgICAgbmF2VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAkKFwiLnRwLWxlZnRhcnJvdywgLnRwLXJpZ2h0YXJyb3dcIikuYWRkQ2xhc3MoXCJoaWRlYXJyb3dzXCIpO1xuICAgICAgfSwgbmF2VGltZW91dCk7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogIFB1YmxpYyBNZXRob2RzXG4gICAqICBUT0RPOiBUZXN0IHdoYXQgaGFwcGVucyB3aGVuIGZvbGRlciBpc24ndCBmb3VuZC5cbiAgICovXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgaWYgKCRhcGkpIHtcbiAgICAgIGlzTGFzdFNsaWRlID0gZmFsc2U7XG4gICAgICBwYXVzZSgpO1xuICAgICAgZGVzdHJveVNsaWRlcigpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEN1cnJlbnRTbGlkZSgpIHtcbiAgICBpZiAoJGFwaSAmJiBjdXJyZW50RmlsZXMgJiYgY3VycmVudEZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiAkYXBpLnJldmN1cnJlbnRzbGlkZSgpO1xuICAgIH1cblxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoZmlsZXMpIHtcbiAgICB2YXIgdHBCYW5uZXJDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRwLWJhbm5lci1jb250YWluZXJcIiksXG4gICAgICBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcbiAgICAgIHRwQmFubmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICAgIHVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuXG4gICAgdHBCYW5uZXIuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJ0cC1iYW5uZXJcIik7XG4gICAgdHBCYW5uZXIuYXBwZW5kQ2hpbGQodWwpO1xuICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHRwQmFubmVyKTtcbiAgICB0cEJhbm5lckNvbnRhaW5lci5hcHBlbmRDaGlsZChmcmFnbWVudCk7XG5cbiAgICBjdXJyZW50RmlsZXMgPSBfLmNsb25lKGZpbGVzKTtcblxuICAgIGFkZFNsaWRlcygpO1xuXG4gICAgaXNMb2FkaW5nID0gdHJ1ZTtcbiAgICAkYXBpID0gJChcIi50cC1iYW5uZXJcIikucmV2b2x1dGlvbih7XG4gICAgICBcImhpZGVUaHVtYnNcIjogMCxcbiAgICAgIFwiaGlkZVRpbWVyQmFyXCI6IFwib25cIixcbiAgICAgIFwibmF2aWdhdGlvblR5cGVcIjogXCJub25lXCIsXG4gICAgICBcIm9uSG92ZXJTdG9wXCI6IFwib2ZmXCIsXG4gICAgICBcInN0YXJ0d2lkdGhcIjogcGFyYW1zLndpZHRoLFxuICAgICAgXCJzdGFydGhlaWdodFwiOiBwYXJhbXMuaGVpZ2h0XG4gICAgfSk7XG5cbiAgICAkYXBpLm9uKFwicmV2b2x1dGlvbi5zbGlkZS5vbmxvYWRlZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgIC8vIFBhdXNlIHNsaWRlc2hvdyBzaW5jZSBpdCB3aWxsIGF1dG9wbGF5IGFuZCB0aGlzIGlzIG5vdCBjb25maWd1cmFibGUuXG4gICAgICBwYXVzZSgpO1xuICAgICAgaXNMb2FkaW5nID0gZmFsc2U7XG4gICAgICBSaXNlVmlzaW9uLkltYWdlLm9uU2xpZGVyUmVhZHkoKTtcbiAgICB9KTtcblxuICAgICRhcGkub24oXCJyZXZvbHV0aW9uLnNsaWRlLm9uY2hhbmdlXCIsIGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICBvblNsaWRlQ2hhbmdlZChkYXRhKTtcbiAgICB9KTtcblxuICAgIC8vIFN3aXBlIHRoZSBzbGlkZXIuXG4gICAgJChcImJvZHlcIikub24oXCJ0b3VjaGVuZFwiLCBcIi50cC1iYW5uZXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICBoYW5kbGVVc2VyQWN0aXZpdHkoKTtcbiAgICAgICQoXCIudHAtbGVmdGFycm93LCAudHAtcmlnaHRhcnJvd1wiKS5yZW1vdmVDbGFzcyhcImhpZGVhcnJvd3NcIik7XG4gICAgfSk7XG5cbiAgICAvLyBUb3VjaCB0aGUgbmF2aWdhdGlvbiBhcnJvd3MuXG4gICAgJChcImJvZHlcIikub24oXCJ0b3VjaGVuZFwiLCBcIi50cC1sZWZ0YXJyb3csIC50cC1yaWdodGFycm93XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgaGFuZGxlVXNlckFjdGl2aXR5KCk7XG4gICAgfSk7XG5cbiAgICBoaWRlTmF2KCk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1JlYWR5KCkge1xuICAgIHJldHVybiAhaXNMb2FkaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gcGxheSgpIHtcbiAgICBpZiAoJGFwaSkge1xuICAgICAgLy8gUmVzZXQgc2xpZGVzaG93IHRvIGZpcnN0IHNsaWRlLlxuICAgICAgaWYgKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShcInJlc3VtZVwiKSAmJiAhcGFyYW1zLnJlc3VtZSkge1xuICAgICAgICAkYXBpLnJldnNob3dzbGlkZSgwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1BsYXlpbmcpIHtcbiAgICAgICAgJGFwaS5yZXZyZXN1bWUoKTtcbiAgICAgICAgaXNQbGF5aW5nID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICBpZiAoJGFwaSAmJiBpc1BsYXlpbmcpIHtcbiAgICAgICRhcGkucmV2cGF1c2UoKTtcbiAgICAgIGlzUGxheWluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlZnJlc2goZmlsZXMpIHtcbiAgICAvLyBTdGFydCBwcmVsb2FkaW5nIGltYWdlcyByaWdodCBhd2F5LlxuICAgIFJpc2VWaXNpb24uQ29tbW9uLlV0aWxpdGllcy5wcmVsb2FkSW1hZ2VzKGZpbGVzKTtcbiAgICBuZXdGaWxlcyA9IF8uY2xvbmUoZmlsZXMpO1xuICAgIHJlZnJlc2hTbGlkZXIgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBcImdldEN1cnJlbnRTbGlkZVwiOiBnZXRDdXJyZW50U2xpZGUsXG4gICAgXCJkZXN0cm95XCI6IGRlc3Ryb3ksXG4gICAgXCJpbml0XCI6IGluaXQsXG4gICAgXCJpc1JlYWR5XCI6IGlzUmVhZHksXG4gICAgXCJwbGF5XCI6IHBsYXksXG4gICAgXCJwYXVzZVwiOiBwYXVzZSxcbiAgICBcInJlZnJlc2hcIjogcmVmcmVzaFxuICB9O1xufTtcblxuLyogZ2xvYmFsIGNvbmZpZyAqL1xudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5JbWFnZSA9IFJpc2VWaXNpb24uSW1hZ2UgfHwge307XG5cblJpc2VWaXNpb24uSW1hZ2UuU3RvcmFnZUZpbGUgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBfaW5pdGlhbExvYWQgPSB0cnVlO1xuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgc3RvcmFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJyaXNlLXN0b3JhZ2VcIik7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2UtcmVzcG9uc2VcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHVybDtcblxuICAgICAgaWYgKGUuZGV0YWlsICYmIGUuZGV0YWlsLnVybCkge1xuXG4gICAgICAgIHVybCA9IGUuZGV0YWlsLnVybC5yZXBsYWNlKFwiJ1wiLCBcIlxcXFwnXCIpO1xuXG4gICAgICAgIGlmIChfaW5pdGlhbExvYWQpIHtcbiAgICAgICAgICBfaW5pdGlhbExvYWQgPSBmYWxzZTtcblxuICAgICAgICAgIFJpc2VWaXNpb24uSW1hZ2Uub25GaWxlSW5pdCh1cmwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIC8vIGNoZWNrIGZvciBcImNoYW5nZWRcIiBwcm9wZXJ0eVxuICAgICAgICAgIGlmIChlLmRldGFpbC5oYXNPd25Qcm9wZXJ0eShcImNoYW5nZWRcIikpIHtcbiAgICAgICAgICAgIGlmIChlLmRldGFpbC5jaGFuZ2VkKSB7XG4gICAgICAgICAgICAgIFJpc2VWaXNpb24uSW1hZ2Uub25GaWxlUmVmcmVzaCh1cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGluIHRoZSBldmVudCBvZiBhIG5ldHdvcmsgZmFpbHVyZSBhbmQgcmVjb3ZlcnksIGNoZWNrIGlmIHRoZSBXaWRnZXQgaXMgaW4gYSBzdGF0ZSBvZiBzdG9yYWdlIGVycm9yXG4gICAgICAgICAgICAgIGlmIChSaXNlVmlzaW9uLkltYWdlLmhhc1N0b3JhZ2VFcnJvcigpKSB7XG4gICAgICAgICAgICAgICAgLy8gcHJvY2VlZCB3aXRoIHJlZnJlc2ggbG9naWMgc28gdGhlIFdpZGdldCBjYW4gZXZlbnR1YWxseSBwbGF5IHZpZGVvIGFnYWluIGZyb20gYSBuZXR3b3JrIHJlY292ZXJ5XG4gICAgICAgICAgICAgICAgUmlzZVZpc2lvbi5JbWFnZS5vbkZpbGVSZWZyZXNoKGUuZGV0YWlsLnVybCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2Utc3RvcmFnZS1uby1maWxlXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIFwiZXZlbnRcIjogXCJlcnJvclwiLFxuICAgICAgICBcImV2ZW50X2RldGFpbHNcIjogXCJzdG9yYWdlIGZpbGUgbm90IGZvdW5kXCIsXG4gICAgICAgIFwiZmlsZV91cmxcIjogZS5kZXRhaWxcbiAgICAgIH0sXG4gICAgICAgIGltZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaW1hZ2VcIik7XG5cbiAgICAgIC8vIGNsZWFyIHRoZSBleGlzdGluZyBpbWFnZVxuICAgICAgaW1nLnN0eWxlLmJhY2tncm91bmQgPSBcIlwiO1xuXG4gICAgICBSaXNlVmlzaW9uLkltYWdlLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLkltYWdlLnNob3dFcnJvcihcIlRoZSBzZWxlY3RlZCBpbWFnZSBkb2VzIG5vdCBleGlzdCBvciBoYXMgYmVlbiBtb3ZlZCB0byBUcmFzaC5cIik7XG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2UtZmlsZS10aHJvdHRsZWRcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgXCJldmVudFwiOiBcImVycm9yXCIsXG4gICAgICAgIFwiZXZlbnRfZGV0YWlsc1wiOiBcInN0b3JhZ2UgZmlsZSB0aHJvdHRsZWRcIixcbiAgICAgICAgXCJmaWxlX3VybFwiOiBlLmRldGFpbFxuICAgICAgfTtcblxuICAgICAgUmlzZVZpc2lvbi5JbWFnZS5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuICAgICAgUmlzZVZpc2lvbi5JbWFnZS5zaG93RXJyb3IoXCJUaGUgc2VsZWN0ZWQgaW1hZ2UgaXMgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUuXCIpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1zdG9yYWdlLWVycm9yXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBmaWxlVXJsID0gKGUuZGV0YWlsICYmIGUuZGV0YWlsLnJlcXVlc3QgJiYgZS5kZXRhaWwucmVxdWVzdC51cmwpID8gZS5kZXRhaWwucmVxdWVzdC51cmwgOiBudWxsLFxuICAgICAgICBwYXJhbXMgPSB7XG4gICAgICAgICAgXCJldmVudFwiOiBcImVycm9yXCIsXG4gICAgICAgICAgXCJldmVudF9kZXRhaWxzXCI6IFwicmlzZSBzdG9yYWdlIGVycm9yXCIsXG4gICAgICAgICAgXCJlcnJvcl9kZXRhaWxzXCI6IFwiVGhlIHJlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGU6IFwiICsgZS5kZXRhaWwuZXJyb3IuY3VycmVudFRhcmdldC5zdGF0dXMsXG4gICAgICAgICAgXCJmaWxlX3VybFwiOiBmaWxlVXJsXG4gICAgICAgIH07XG5cbiAgICAgIFJpc2VWaXNpb24uSW1hZ2UubG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcbiAgICAgIFJpc2VWaXNpb24uSW1hZ2Uuc2hvd0Vycm9yKFwiU29ycnksIHRoZXJlIHdhcyBhIHByb2JsZW0gY29tbXVuaWNhdGluZyB3aXRoIFJpc2UgU3RvcmFnZS5cIiwgdHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLWNhY2hlLWVycm9yXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBmaWxlVXJsID0gKGUuZGV0YWlsICYmIGUuZGV0YWlsLnJlcXVlc3QgJiYgZS5kZXRhaWwucmVxdWVzdC51cmwpID8gZS5kZXRhaWwucmVxdWVzdC51cmwgOiBudWxsLFxuICAgICAgICBwYXJhbXMgPSB7XG4gICAgICAgICAgXCJldmVudFwiOiBcImVycm9yXCIsXG4gICAgICAgICAgXCJldmVudF9kZXRhaWxzXCI6IFwicmlzZSBjYWNoZSBlcnJvclwiLFxuICAgICAgICAgIFwiZXJyb3JfZGV0YWlsc1wiOiBcIlRoZSByZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlOiBcIiArIGUuZGV0YWlsLmVycm9yLmN1cnJlbnRUYXJnZXQuc3RhdHVzLFxuICAgICAgICAgIFwiZmlsZV91cmxcIjogZmlsZVVybFxuICAgICAgICB9O1xuXG4gICAgICBSaXNlVmlzaW9uLkltYWdlLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG5cbiAgICAgIC8vIFNob3cgYSBkaWZmZXJlbnQgbWVzc2FnZSBpZiB0aGVyZSBpcyBhIDQwNCBjb21pbmcgZnJvbSByaXNlIGNhY2hlXG4gICAgICB2YXIgc3RhdHVzQ29kZSA9IGUuZGV0YWlsLmVycm9yLmN1cnJlbnRUYXJnZXQuc3RhdHVzO1xuXG4gICAgICB2YXIgZXJyb3JNZXNzYWdlID0gXCJUaGVyZSB3YXMgYSBwcm9ibGVtIHJldHJpZXZpbmcgdGhlIGZpbGUgZnJvbSBSaXNlIENhY2hlLlwiO1xuICAgICAgaWYoc3RhdHVzQ29kZSA9PT0gNDA0KXtcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJUaGUgaW1hZ2UgZG9lcyBub3QgZXhpc3Qgb3IgY2Fubm90IGJlIGFjY2Vzc2VkLlwiO1xuICAgICAgfVxuICAgICAgUmlzZVZpc2lvbi5JbWFnZS5zaG93RXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICB9KTtcblxuICAgIHN0b3JhZ2Uuc2V0QXR0cmlidXRlKFwiZm9sZGVyXCIsIHBhcmFtcy5zdG9yYWdlLmZvbGRlcik7XG4gICAgc3RvcmFnZS5zZXRBdHRyaWJ1dGUoXCJmaWxlTmFtZVwiLCBwYXJhbXMuc3RvcmFnZS5maWxlTmFtZSk7XG4gICAgc3RvcmFnZS5zZXRBdHRyaWJ1dGUoXCJjb21wYW55SWRcIiwgcGFyYW1zLnN0b3JhZ2UuY29tcGFueUlkKTtcbiAgICBzdG9yYWdlLnNldEF0dHJpYnV0ZShcImVudlwiLCBjb25maWcuU1RPUkFHRV9FTlYpO1xuICAgIHN0b3JhZ2UuZ28oKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgXCJpbml0XCI6IGluaXRcbiAgfTtcbn07XG5cbi8qIGdsb2JhbCBjb25maWcsIF8gKi9cblxudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5JbWFnZSA9IFJpc2VWaXNpb24uSW1hZ2UgfHwge307XG5cblJpc2VWaXNpb24uSW1hZ2UuU3RvcmFnZUZvbGRlciA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBfaXNMb2FkaW5nID0gdHJ1ZSxcbiAgICBfZmlsZXMgPSBbXSxcbiAgICBfdGltZXIgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHByb2Nlc3NVcmwoZSkge1xuICAgIHZhciBmaWxlO1xuXG4gICAgaWYgKGUuZGV0YWlsKSB7XG5cbiAgICAgIC8vIEltYWdlIGhhcyBiZWVuIGFkZGVkLlxuICAgICAgaWYgKGUuZGV0YWlsLmFkZGVkKSB7XG4gICAgICAgIF9maWxlcy5wdXNoKHtcbiAgICAgICAgICBcIm5hbWVcIjogZS5kZXRhaWwubmFtZSxcbiAgICAgICAgICBcInVybFwiOiBlLmRldGFpbC51cmxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEltYWdlIGhhcyBiZWVuIGNoYW5nZWQuXG4gICAgICBpZiAoZS5kZXRhaWwuY2hhbmdlZCkge1xuICAgICAgICBmaWxlID0gXy5maW5kKF9maWxlcywgZnVuY3Rpb24gKGZpbGUpIHtcbiAgICAgICAgICByZXR1cm4gZmlsZS5uYW1lID09PSBlLmRldGFpbC5uYW1lO1xuICAgICAgICB9KTtcblxuICAgICAgICBmaWxlLnVybCA9IGUuZGV0YWlsLnVybDtcbiAgICAgIH1cblxuICAgICAgLy8gSW1hZ2UgaGFzIGJlZW4gZGVsZXRlZC5cbiAgICAgIGlmIChlLmRldGFpbC5kZWxldGVkKSB7XG4gICAgICAgIF9maWxlcyA9IF8ucmVqZWN0KF9maWxlcywgZnVuY3Rpb24oZmlsZSkge1xuICAgICAgICAgIHJldHVybiBmaWxlLm5hbWUgPT09IGUuZGV0YWlsLm5hbWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIF9maWxlcyA9IF8uc29ydEJ5KF9maWxlcywgZnVuY3Rpb24oZmlsZSkge1xuICAgICAgcmV0dXJuIGZpbGUubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUmVzcG9uc2UoZSkge1xuICAgIHByb2Nlc3NVcmwoZSk7XG5cbiAgICAvLyBJbWFnZSBoYXMgYmVlbiBhZGRlZC5cbiAgICBpZiAoZS5kZXRhaWwuYWRkZWQpIHtcbiAgICAgIGlmIChfaXNMb2FkaW5nKSB7XG4gICAgICAgIC8vIE5lZWQgdG8gd2FpdCBmb3IgYXQgbGVhc3QgMiBpbWFnZXMgdG8gbG9hZCBiZWZvcmUgaW5pdGlhbGl6aW5nIHRoZSBzbGlkZXIuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgdGhlIHJldm9sdXRpb24uc2xpZGUub25jaGFuZ2UgZXZlbnQgd2lsbCBuZXZlciBmaXJlLCBhbmQgdGhpcyBldmVudCBpcyB1c2VkXG4gICAgICAgIC8vIHRvIGNoZWNrIHdoZXRoZXIgb3Igbm90IHRoZSBzbGlkZXIgc2hvdWxkIHJlZnJlc2guXG4gICAgICAgIGlmIChfZmlsZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIF9pc0xvYWRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgIGNsZWFyVGltZW91dChfdGltZXIpO1xuICAgICAgICAgIFJpc2VWaXNpb24uSW1hZ2Uub25GaWxlSW5pdChfZmlsZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldCBhIHRpbWVvdXQgaW4gY2FzZSB0aGVyZSBpcyBvbmx5IG9uZSBpbWFnZSBpbiB0aGUgZm9sZGVyLlxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBfdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX2lzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgUmlzZVZpc2lvbi5JbWFnZS5vbkZpbGVJbml0KF9maWxlcyk7XG4gICAgICAgICAgfSwgNTAwMCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVW5jaGFuZ2VkXG4gICAgaWYgKGUuZGV0YWlsLmhhc093blByb3BlcnR5KFwiY2hhbmdlZFwiKSAmJiAhZS5kZXRhaWwuY2hhbmdlZCkge1xuICAgICAgLy8gaW4gdGhlIGV2ZW50IG9mIGEgbmV0d29yayBmYWlsdXJlIGFuZCByZWNvdmVyeSwgY2hlY2sgaWYgdGhlIFdpZGdldCBpcyBpbiBhIHN0YXRlIG9mIHN0b3JhZ2UgZXJyb3JcbiAgICAgIGlmICghUmlzZVZpc2lvbi5JbWFnZS5oYXNTdG9yYWdlRXJyb3IoKSkge1xuICAgICAgICAvLyBvbmx5IHByb2NlZWQgd2l0aCByZWZyZXNoIGxvZ2ljIGJlbG93IGlmIHRoZXJlJ3MgYmVlbiBhIHN0b3JhZ2UgZXJyb3IsIG90aGVyd2lzZSBkbyBub3RoaW5nXG4gICAgICAgIC8vIHRoaXMgaXMgc28gdGhlIFdpZGdldCBjYW4gZXZlbnR1YWxseSBwbGF5IHNsaWRlc2hvdyBhZ2FpbiBmcm9tIGEgbmV0d29yayByZWNvdmVyeVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgUmlzZVZpc2lvbi5JbWFnZS5vbkZpbGVSZWZyZXNoKF9maWxlcyk7XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIHN0b3JhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwicmlzZS1zdG9yYWdlXCIpO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1zdG9yYWdlLXJlc3BvbnNlXCIsIGhhbmRsZVJlc3BvbnNlKTtcblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2Utc3RvcmFnZS1lbXB0eS1mb2xkZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgXCJldmVudFwiOiBcImVycm9yXCIsXG4gICAgICAgIFwiZXZlbnRfZGV0YWlsc1wiOiBcInN0b3JhZ2UgZm9sZGVyIGVtcHR5XCJcbiAgICAgIH07XG5cbiAgICAgIFJpc2VWaXNpb24uSW1hZ2UubG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcbiAgICAgIFJpc2VWaXNpb24uSW1hZ2Uuc2hvd0Vycm9yKFwiVGhlIHNlbGVjdGVkIGZvbGRlciBkb2VzIG5vdCBjb250YWluIGFueSBpbWFnZXMuXCIpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1zdG9yYWdlLW5vLWZvbGRlclwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgXCJldmVudFwiOiBcImVycm9yXCIsXG4gICAgICAgIFwiZXZlbnRfZGV0YWlsc1wiOiBcInN0b3JhZ2UgZm9sZGVyIGRvZXNuJ3QgZXhpc3RcIixcbiAgICAgICAgXCJlcnJvcl9kZXRhaWxzXCI6IGUuZGV0YWlsXG4gICAgICB9O1xuXG4gICAgICBSaXNlVmlzaW9uLkltYWdlLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLkltYWdlLnNob3dFcnJvcihcIlRoZSBzZWxlY3RlZCBmb2xkZXIgZG9lcyBub3QgZXhpc3Qgb3IgaGFzIGJlZW4gbW92ZWQgdG8gVHJhc2guXCIpO1xuICAgIH0pO1xuXG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2UtZm9sZGVyLWludmFsaWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgXCJldmVudFwiOiBcImVycm9yXCIsXG4gICAgICAgIFwiZXZlbnRfZGV0YWlsc1wiOiBcInN0b3JhZ2UgZm9sZGVyIGZvcm1hdChzKSBpbnZhbGlkXCJcbiAgICAgIH07XG5cbiAgICAgIFJpc2VWaXNpb24uSW1hZ2UubG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcbiAgICAgIFJpc2VWaXNpb24uSW1hZ2Uuc2hvd0Vycm9yKFwiVGhlIHNlbGVjdGVkIGZvbGRlciBkb2VzIG5vdCBjb250YWluIGFueSBzdXBwb3J0ZWQgaW1hZ2UgZm9ybWF0cy5cIik7XG4gICAgfSk7XG5cblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2Utc3RvcmFnZS1lcnJvclwiLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBcImV2ZW50XCI6IFwicmlzZSBzdG9yYWdlIGVycm9yXCIsXG4gICAgICAgIFwiZXZlbnRfZGV0YWlsc1wiOiBcIlRoZSByZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlOiBcIiArIGUuZGV0YWlsLmVycm9yLmN1cnJlbnRUYXJnZXQuc3RhdHVzXG4gICAgICB9O1xuXG4gICAgICBSaXNlVmlzaW9uLkltYWdlLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLkltYWdlLnNob3dFcnJvcihcIlNvcnJ5LCB0aGVyZSB3YXMgYSBwcm9ibGVtIGNvbW11bmljYXRpbmcgd2l0aCBSaXNlIFN0b3JhZ2UuXCIsIHRydWUpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1jYWNoZS1lcnJvclwiLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBcImV2ZW50XCI6IFwicmlzZSBjYWNoZSBlcnJvclwiLFxuICAgICAgICBcImV2ZW50X2RldGFpbHNcIjogXCJUaGUgcmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZTogXCIgKyBlLmRldGFpbC5lcnJvci5jdXJyZW50VGFyZ2V0LnN0YXR1c1xuICAgICAgfTtcblxuICAgICAgUmlzZVZpc2lvbi5JbWFnZS5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuXG4gICAgICAvLyBTaG93IGEgZGlmZmVyZW50IG1lc3NhZ2UgaWYgdGhlcmUgaXMgYSA0MDQgY29taW5nIGZyb20gcmlzZSBjYWNoZVxuICAgICAgdmFyIHN0YXR1c0NvZGUgPSBlLmRldGFpbC5lcnJvci5jdXJyZW50VGFyZ2V0LnN0YXR1cztcblxuICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IFwiVGhlcmUgd2FzIGEgcHJvYmxlbSByZXRyaWV2aW5nIHRoZSBmaWxlIGZyb20gUmlzZSBDYWNoZS5cIjtcbiAgICAgIGlmKHN0YXR1c0NvZGUgPT09IDQwNCl7XG4gICAgICAgIGVycm9yTWVzc2FnZSA9IFwiVGhlIGltYWdlIGRvZXMgbm90IGV4aXN0IG9yIGNhbm5vdCBiZSBhY2Nlc3NlZC5cIjtcbiAgICAgIH1cbiAgICAgIFJpc2VWaXNpb24uSW1hZ2Uuc2hvd0Vycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLnNldEF0dHJpYnV0ZShcImZpbGVUeXBlXCIsIFwiaW1hZ2VcIik7XG4gICAgc3RvcmFnZS5zZXRBdHRyaWJ1dGUoXCJjb21wYW55SWRcIiwgZGF0YS5zdG9yYWdlLmNvbXBhbnlJZCk7XG4gICAgc3RvcmFnZS5zZXRBdHRyaWJ1dGUoXCJmb2xkZXJcIiwgZGF0YS5zdG9yYWdlLmZvbGRlcik7XG4gICAgc3RvcmFnZS5zZXRBdHRyaWJ1dGUoXCJlbnZcIiwgY29uZmlnLlNUT1JBR0VfRU5WKTtcblxuICAgIHN0b3JhZ2UuZ28oKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgXCJpbml0XCI6IGluaXRcbiAgfTtcbn07XG5cbnZhciBSaXNlVmlzaW9uID0gUmlzZVZpc2lvbiB8fCB7fTtcblJpc2VWaXNpb24uSW1hZ2UgPSBSaXNlVmlzaW9uLkltYWdlIHx8IHt9O1xuXG5SaXNlVmlzaW9uLkltYWdlLk5vblN0b3JhZ2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgcmlzZUNhY2hlID0gUmlzZVZpc2lvbi5Db21tb24uUmlzZUNhY2hlO1xuXG4gIHZhciBfcmVmcmVzaER1cmF0aW9uID0gMzAwMDAwLCAgLy8gNSBtaW51dGVzXG4gICAgX3JlZnJlc2hJbnRlcnZhbElkID0gbnVsbDtcblxuICB2YXIgX2lzTG9hZGluZyA9IHRydWU7XG5cbiAgdmFyIF91cmwgPSBcIlwiO1xuXG4gIGZ1bmN0aW9uIF9nZXRGaWxlKG9taXRDYWNoZUJ1c3Rlcikge1xuICAgIHZhciBwYXJhbXM7XG5cbiAgICByaXNlQ2FjaGUuZ2V0RmlsZShfdXJsLCBmdW5jdGlvbiAocmVzcG9uc2UsIGVycm9yKSB7XG4gICAgICBpZiAoIWVycm9yKSB7XG5cbiAgICAgICAgaWYgKF9pc0xvYWRpbmcpIHtcbiAgICAgICAgICBfaXNMb2FkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICBSaXNlVmlzaW9uLkltYWdlLm9uRmlsZUluaXQocmVzcG9uc2UudXJsKTtcblxuICAgICAgICAgIC8vIHN0YXJ0IHRoZSByZWZyZXNoIGludGVydmFsXG4gICAgICAgICAgX3N0YXJ0UmVmcmVzaEludGVydmFsKCk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBSaXNlVmlzaW9uLkltYWdlLm9uRmlsZVJlZnJlc2gocmVzcG9uc2UudXJsKTtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIC8vIGVycm9yIG9jY3VycmVkXG4gICAgICAgIHBhcmFtcyA9IHtcbiAgICAgICAgICBcImV2ZW50XCI6IFwiZXJyb3JcIixcbiAgICAgICAgICBcImV2ZW50X2RldGFpbHNcIjogXCJub24tc3RvcmFnZSBlcnJvclwiLFxuICAgICAgICAgIFwiZXJyb3JfZGV0YWlsc1wiOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgIFwiZmlsZV91cmxcIjogcmVzcG9uc2UudXJsXG4gICAgICAgIH07XG5cbiAgICAgICAgUmlzZVZpc2lvbi5JbWFnZS5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuXG4gICAgICAgIC8vIFNob3cgYSBkaWZmZXJlbnQgbWVzc2FnZSBpZiB0aGVyZSBpcyBhIDQwNCBjb21pbmcgZnJvbSByaXNlIGNhY2hlXG4gICAgICAgIHZhciBzdGF0dXNDb2RlID0gZXJyb3IubWVzc2FnZS5zdWJzdHJpbmcoZXJyb3IubWVzc2FnZS5pbmRleE9mKFwiOlwiKSsyKTtcblxuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gXCJUaGVyZSB3YXMgYSBwcm9ibGVtIHJldHJpZXZpbmcgdGhlIGZpbGUgZnJvbSBSaXNlIENhY2hlLlwiO1xuICAgICAgICBpZihzdGF0dXNDb2RlID09PSBcIjQwNFwiKXtcbiAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIlRoZSBpbWFnZSBkb2VzIG5vdCBleGlzdCBvciBjYW5ub3QgYmUgYWNjZXNzZWQuXCI7XG4gICAgICAgIH1cbiAgICAgICAgUmlzZVZpc2lvbi5JbWFnZS5zaG93RXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9LCBvbWl0Q2FjaGVCdXN0ZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gX3N0YXJ0UmVmcmVzaEludGVydmFsKCkge1xuICAgIGlmIChfcmVmcmVzaEludGVydmFsSWQgPT09IG51bGwpIHtcbiAgICAgIF9yZWZyZXNoSW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX2dldEZpbGUoZmFsc2UpO1xuICAgICAgfSwgX3JlZnJlc2hEdXJhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogIFB1YmxpYyBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIC8vIEhhbmRsZSBwcmUtbWVyZ2UgdXNlIG9mIFwidXJsXCIgc2V0dGluZyBwcm9wZXJ0eVxuICAgIF91cmwgPSAoZGF0YS51cmwgJiYgZGF0YS51cmwgIT09IFwiXCIpID8gZGF0YS51cmwgOiBkYXRhLnNlbGVjdG9yLnVybDtcblxuICAgIF9nZXRGaWxlKHRydWUpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBcImluaXRcIjogaW5pdFxuICB9O1xufTtcblxudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5Db21tb24gPSBSaXNlVmlzaW9uLkNvbW1vbiB8fCB7fTtcblxuUmlzZVZpc2lvbi5Db21tb24uTWVzc2FnZSA9IGZ1bmN0aW9uIChtYWluQ29udGFpbmVyLCBtZXNzYWdlQ29udGFpbmVyKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBfYWN0aXZlID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgdHJ5IHtcbiAgICAgIG1lc3NhZ2VDb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gbWFpbkNvbnRhaW5lci5zdHlsZS5oZWlnaHQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS53YXJuKFwiQ2FuJ3QgaW5pdGlhbGl6ZSBNZXNzYWdlIC0gXCIsIGUubWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogIFB1YmxpYyBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBoaWRlKCkge1xuICAgIGlmIChfYWN0aXZlKSB7XG4gICAgICAvLyBjbGVhciBjb250ZW50IG9mIG1lc3NhZ2UgY29udGFpbmVyXG4gICAgICB3aGlsZSAobWVzc2FnZUNvbnRhaW5lci5maXJzdENoaWxkKSB7XG4gICAgICAgIG1lc3NhZ2VDb250YWluZXIucmVtb3ZlQ2hpbGQobWVzc2FnZUNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgIH1cblxuICAgICAgLy8gaGlkZSBtZXNzYWdlIGNvbnRhaW5lclxuICAgICAgbWVzc2FnZUNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cbiAgICAgIC8vIHNob3cgbWFpbiBjb250YWluZXJcbiAgICAgIG1haW5Db250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuXG4gICAgICBfYWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2hvdyhtZXNzYWdlKSB7XG4gICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgICAgcDtcblxuICAgIGlmICghX2FjdGl2ZSkge1xuICAgICAgLy8gaGlkZSBtYWluIGNvbnRhaW5lclxuICAgICAgbWFpbkNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcblxuICAgICAgbWVzc2FnZUNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gICAgICAvLyBjcmVhdGUgbWVzc2FnZSBlbGVtZW50XG4gICAgICBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICBwLmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgICBwLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwibWVzc2FnZVwiKTtcblxuICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQocCk7XG4gICAgICBtZXNzYWdlQ29udGFpbmVyLmFwcGVuZENoaWxkKGZyYWdtZW50KTtcblxuICAgICAgX2FjdGl2ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG1lc3NhZ2UgYWxyZWFkeSBiZWluZyBzaG93biwgdXBkYXRlIG1lc3NhZ2UgdGV4dFxuICAgICAgcCA9IG1lc3NhZ2VDb250YWluZXIucXVlcnlTZWxlY3RvcihcIi5tZXNzYWdlXCIpO1xuICAgICAgcC5pbm5lckhUTUwgPSBtZXNzYWdlO1xuICAgIH1cbiAgfVxuXG4gIF9pbml0KCk7XG5cbiAgcmV0dXJuIHtcbiAgICBcImhpZGVcIjogaGlkZSxcbiAgICBcInNob3dcIjogc2hvd1xuICB9O1xufTtcblxuLyogZ2xvYmFsIFJpc2VWaXNpb24sIGdhZGdldHMgKi9cbihmdW5jdGlvbiAod2luZG93LCBkb2N1bWVudCwgZ2FkZ2V0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgaWQgPSBuZXcgZ2FkZ2V0cy5QcmVmcygpLmdldFN0cmluZyhcImlkXCIpO1xuXG4gIHdpbmRvdy5vbmNvbnRleHRtZW51ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBkb2N1bWVudC5ib2R5Lm9ubW91c2Vkb3duID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNvbmZpZ3VyZShuYW1lcywgdmFsdWVzKSB7XG4gICAgdmFyIGFkZGl0aW9uYWxQYXJhbXMsIG1vZGU7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShuYW1lcykgJiYgbmFtZXMubGVuZ3RoID4gMCAmJiBuYW1lc1swXSA9PT0gXCJhZGRpdGlvbmFsUGFyYW1zXCIpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlcykgJiYgdmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYWRkaXRpb25hbFBhcmFtcyA9IEpTT04ucGFyc2UodmFsdWVzWzBdKTtcblxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoYWRkaXRpb25hbFBhcmFtcy5zdG9yYWdlKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAvLyBzdG9yYWdlIGZpbGUgb3IgZm9sZGVyIHNlbGVjdGVkXG4gICAgICAgICAgaWYgKCFhZGRpdGlvbmFsUGFyYW1zLnN0b3JhZ2UuZmlsZU5hbWUpIHtcbiAgICAgICAgICAgIC8vIGZvbGRlciB3YXMgc2VsZWN0ZWRcbiAgICAgICAgICAgIG1vZGUgPSBcImZvbGRlclwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBmaWxlIHdhcyBzZWxlY3RlZFxuICAgICAgICAgICAgbW9kZSA9IFwiZmlsZVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBub24tc3RvcmFnZSBmaWxlIHdhcyBzZWxlY3RlZFxuICAgICAgICAgIG1vZGUgPSBcImZpbGVcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIFJpc2VWaXNpb24uSW1hZ2Uuc2V0QWRkaXRpb25hbFBhcmFtcyhhZGRpdGlvbmFsUGFyYW1zLCBtb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICBSaXNlVmlzaW9uLkltYWdlLnBhdXNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwbGF5KCkge1xuICAgIFJpc2VWaXNpb24uSW1hZ2UucGxheSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBSaXNlVmlzaW9uLkltYWdlLnN0b3AoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvbHltZXJSZWFkeSgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIldlYkNvbXBvbmVudHNSZWFkeVwiLCBwb2x5bWVyUmVhZHkpO1xuXG4gICAgaWYgKGlkICYmIGlkICE9PSBcIlwiKSB7XG4gICAgICBnYWRnZXRzLnJwYy5yZWdpc3RlcihcInJzY21kX3BsYXlfXCIgKyBpZCwgcGxheSk7XG4gICAgICBnYWRnZXRzLnJwYy5yZWdpc3RlcihcInJzY21kX3BhdXNlX1wiICsgaWQsIHBhdXNlKTtcbiAgICAgIGdhZGdldHMucnBjLnJlZ2lzdGVyKFwicnNjbWRfc3RvcF9cIiArIGlkLCBzdG9wKTtcbiAgICAgIGdhZGdldHMucnBjLnJlZ2lzdGVyKFwicnNwYXJhbV9zZXRfXCIgKyBpZCwgY29uZmlndXJlKTtcbiAgICAgIGdhZGdldHMucnBjLmNhbGwoXCJcIiwgXCJyc3BhcmFtX2dldFwiLCBudWxsLCBpZCwgW1wiYWRkaXRpb25hbFBhcmFtc1wiXSk7XG4gICAgfVxuICB9XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJXZWJDb21wb25lbnRzUmVhZHlcIiwgcG9seW1lclJlYWR5KTtcblxufSkod2luZG93LCBkb2N1bWVudCwgZ2FkZ2V0cyk7XG5cbi8qIGpzaGludCBpZ25vcmU6c3RhcnQgKi9cbnZhciBfZ2FxID0gX2dhcSB8fCBbXTtcblxuX2dhcS5wdXNoKFsnX3NldEFjY291bnQnLCAnVUEtNTcwOTIxNTktMyddKTtcbl9nYXEucHVzaChbJ190cmFja1BhZ2V2aWV3J10pO1xuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBnYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOyBnYS50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7IGdhLmFzeW5jID0gdHJ1ZTtcbiAgZ2Euc3JjID0gKCdodHRwczonID09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sID8gJ2h0dHBzOi8vc3NsJyA6ICdodHRwOi8vd3d3JykgKyAnLmdvb2dsZS1hbmFseXRpY3MuY29tL2dhLmpzJztcbiAgdmFyIHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07IHMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZ2EsIHMpO1xufSkoKTtcbi8qIGpzaGludCBpZ25vcmU6ZW5kICovXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
