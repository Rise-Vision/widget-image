var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,t){var i=null;e.event?(i=e,i.file_url&&(i.file_format=n(i.file_url)),i.company_id=l,i.display_id=a,c&&(i.version=c),t(i)):t(i)}function t(){var e=new Date,t=e.getUTCFullYear(),n=e.getUTCMonth()+1,i=e.getUTCDate();return 10>n&&(n="0"+n),10>i&&(i="0"+i),t+n+i}function n(e){var t,n=/[?#&]/;return e&&"string"==typeof e?(t=e.substr(e.lastIndexOf(".")+1),n.test(t)&&(t=t.substr(0,-1!==t.indexOf("?")?t.indexOf("?"):t.length),t=t.substr(0,-1!==t.indexOf("#")?t.indexOf("#"):t.length),t=t.substr(0,-1!==t.indexOf("&")?t.indexOf("&"):t.length)),t.toLowerCase()):null}function i(e){var n={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:t(),rows:[{insertId:""}]},i=JSON.parse(JSON.stringify(n));return i.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),i.rows[0].json=JSON.parse(JSON.stringify(e)),i.rows[0].json.ts=(new Date).toISOString(),i}function o(t,n){e(n,function(e){null!==e&&RiseVision.Common.Logger.log(t,e)})}function r(e,t){l=e,a=t}function s(e){c=e}var a="",l="",c=null;return{getInsertData:i,getFileFormat:n,logEvent:o,setIds:r,setVersion:s}}(),RiseVision.Common.Logger=function(e){"use strict";function t(e){var t=new XMLHttpRequest;return new Date-c<358e4?e({}):(t.open("POST",o,!0),t.onloadend=function(){var n=JSON.parse(t.response);e({token:n.access_token,refreshedAt:new Date})},t.send(),void 0)}function n(e){return s&&l===e}function i(i,o){function u(t){var n,s,a=new XMLHttpRequest;s=r.replace("TABLE_ID",i),c=t.refreshedAt||c,d=t.token||d,n=e.getInsertData(o),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+d),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!i||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&n(o.event)))return s=!0,l=o.event,setTimeout(function(){s=!1},a),t(u)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",c=0,d="";return{log:i}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var t=new XMLHttpRequest,n=this;e&&"function"==typeof e&&(a?t.open("GET",o,!0):t.open("GET",o+"ping?callback=_",!0),t.onreadystatechange=function(){try{if(4===t.readyState)if(r=!0,200===t.status)s=!0,e(!0,t.responseText);else{if(404===t.status)return a=!0,n.ping(e);console.debug("Rise Cache is not running"),s=!1,e(!1,null)}}catch(i){console.debug("Caught exception: ",i.description)}},t.send())}function t(e,t,n){function i(){var t,i,r;s?t=n?o+"?url="+encodeURIComponent(e):o+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):n?t=e:(i=e.split("?"),r=1===i.length?"?":"&",t=e+r+"cb="+(new Date).getTime()),a("HEAD",t)}function a(e,n){var i=new XMLHttpRequest,o={xhr:i,url:n};s?(i.open(e,n,!0),i.addEventListener("loadend",function(){var r=i.status||0;r>=200&&300>r?t(o):"HEAD"===e?a("GET",n):t(o,new Error("The request failed with status code: "+r))}),i.send()):t(o)}if(e&&t&&"function"==typeof t)return r?i():this.ping(i)}function n(e){return e&&"function"==typeof e?r?(e(s),void 0):this.ping(function(){e(s)}):void 0}function i(e){return e&&"function"==typeof e?r?(e(a),void 0):this.ping(function(){e(a)}):void 0}var o="//localhost:9494/",r=!1,s=!1,a=!1;return{getFile:t,isRiseCacheRunning:n,isV2Running:i,ping:e}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,t){var n="font-family: "+decodeURIComponent(t.font.family).replace(/'/g,"")+"; ",i="color: "+(t.color?t.color:t.forecolor)+"; ",o="font-size: "+(-1===t.size.indexOf("px")?t.size+"px; ":t.size+"; "),r="font-weight: "+(t.bold?"bold":"normal")+"; ",s="font-style: "+(t.italic?"italic":"normal")+"; ",a="text-decoration: "+(t.underline?"underline":"none")+"; ",l="background-color: "+(t.highlightColor?t.highlightColor:t.backcolor)+";";return"."+e+" {"+n+i+o+r+s+a+l+"}"}function t(e){for(var t=document.createElement("style"),n=0,i=e.length;i>n;n++)t.appendChild(document.createTextNode(e[n]));document.head.appendChild(t)}function n(n,r){function s(){r&&"function"==typeof r&&r()}function a(){s()}var l=null,c=[],d=[],u=[];if(!n||0===n.length)return s(),void 0;n.forEach(function(n){n.class&&n.fontStyle&&t([e(n.class,n.fontStyle)])});for(var g=0;g<n.length;g++)n[g].fontStyle&&n[g].fontStyle.font.type&&"google"===n[g].fontStyle.font.type&&(l=n[g].fontStyle.font.family.split(",")[0],l=l.replace(/'/g,""),c.push(l));for(g=0;g<n.length;g++)n[g].fontStyle&&n[g].fontStyle.font.type&&"custom"===n[g].fontStyle.font.type&&(d.push(decodeURIComponent(n[g].fontStyle.font.family).replace(/'/g,"")),u.push(n[g].fontStyle.font.url.replace(/'/g,"\\'")));if(0===c.length&&0===d.length)s();else{for(var f=0;f<d.length;f+=1)i(d[f],u[f]);c.length>0?o(c,a):s()}}function i(e,t,n){var i=null,o="font-family: "+e+"; src: url('"+t+"');";n=n||document,i=n.styleSheets[0],null!==i&&i.addRule("@font-face",o)}function o(e,t){WebFont.load({google:{families:e},active:function(){t&&"function"==typeof t&&t()},inactive:function(){t&&"function"==typeof t&&t()},timeout:2e3})}function r(e){for(var t=e.length,n=[],i=0;t>i;i++)n[i]=new Image,n[i].src=e[i]}function s(e){for(var t,n=window.location.search.substring(1),i=n.split("&"),o=0;o<i.length;o++)if(t=i[o].split("="),t[0]==e)return decodeURIComponent(t[1]);return""}function a(e){var t="";switch(e){case 404:t="The file does not exist or cannot be accessed.";break;case 507:t="There is not enough disk space to save the file on Rise Cache.";break;default:t="There was a problem retrieving the file from Rise Cache."}return t}function l(e){var t=document.createElement("div");return t.innerHTML=e,t.textContent}function c(e,t){var n=new XMLHttpRequest;if(e&&t&&"function"==typeof t){n.open("HEAD",e+"?cb="+(new Date).getTime(),!1);try{n.send(),t(n.status>=200&&n.status<304)}catch(i){t(!1)}}}function d(){var e=25,t=navigator.userAgent.match(/Chrome\/(\S+)/),n=t?t[1]:0;return n&&(n=parseInt(n.substring(0,n.indexOf("."))),e>=n)?!0:!1}return{getQueryParameter:s,getFontCssStyle:e,addCSSRules:t,loadFonts:n,loadCustomFont:i,loadGoogleFonts:o,preloadImages:r,getRiseCacheErrorMessage:a,unescapeHTML:l,hasInternetConnection:c,isLegacy:d}}(),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={STORAGE_ENV:"prod"},RiseVision=RiseVision||{};RiseVision.Image={},RiseVision.Image=function(e){"use strict";function t(){e.rpc.call("","rsevent_ready",null,V.getString("id"),!0,!0,!0,!0,!0)}function n(){e.rpc.call("","rsevent_done",null,V.getString("id")),null!==A&&d(A,!0),d({event:"done",file_url:r()},!1)}function i(){clearTimeout(F),F=null}function o(){i(),F=setTimeout(function(){n()},5e3)}function r(){var e=-1;if(O&&O.length>0){if("file"===b)return O[0];if("folder"===b&&L&&L.isReady()&&(e=L.getCurrentSlide(),-1!==e))return O[e]}return null}function s(){var e,n=document.getElementById("container"),i=document.createDocumentFragment(),o=document.createElement("div");w=new RiseVision.Common.Message(document.getElementById("container"),document.getElementById("messageContainer")),w.show("Please wait while your image is downloaded."),C.background&&Object.keys(C.background).length>0&&(document.body.style.background=C.background.color),"file"===b?(o=a(),i.appendChild(o),n.appendChild(i),M=new Image,e=0!==Object.keys(C.storage).length,e?(k="storage file",S=new RiseVision.Image.StorageFile(C),S.init()):(k="custom",T=new RiseVision.Image.NonStorage(C),T.init())):"folder"===b&&(o.className="tp-banner-container",i.appendChild(o),n.appendChild(i),k="storage folder",S=new RiseVision.Image.StorageFolder(C),S.init()),t()}function a(){var e=document.createElement("div");return e.setAttribute("id","image"),e.className=C.position,e.className=C.scaleToFit?e.className+" scale-to-fit":e.className,e}function l(e){M.onload=function(){var t=document.querySelector("#container #image");t.style.backgroundImage="url('"+e+"')"},M.onerror=function(){d({event:"error",event_details:"image load error",file_url:e},!0)},M.src=e.replace("\\'","'")}function c(){return x}function d(e,t){t&&(A=e),RiseVision.Common.LoggerUtils.logEvent(y(),e)}function u(e){"file"===b?(O[0]=e,D=!1,w.hide(),l(O[0])):"folder"===b&&(O=e,L=new RiseVision.Image.Slider(C),L.init(e))}function g(e){"file"===b?(O[0]=e,l(O[0])):"folder"===b&&(O=e,L.refresh(O)),N=!1,x=!1,D=!1,A=null}function f(e){D=!0,w.show(e),G||o()}function m(e,t){C=_.clone(e),b=t,C.width=V.getInt("rsW"),C.height=V.getInt("rsH"),document.getElementById("container").style.height=V.getInt("rsH")+"px",s()}function p(){w.hide(),G||L.play()}function v(){n()}function h(){var e=document.querySelectorAll("#container #image");if(G=!0,i(),"folder"===b&&L&&L.isReady())L.pause();else if("file"===b&&e.length>0)for(var t=0;t<e.length;t+=1)e[t].style.visibility="hidden"}function R(){var e=document.querySelectorAll("#container #image");if(G=!1,q||(d({event:"configuration",event_details:k},!1),q=!0),d({event:"play",file_url:r()},!1),N)return o(),void 0;if(D)return"file"===b&&S&&S.retry(),void 0;if("folder"===b&&L&&L.isReady())L.play();else if("file"===b&&e.length>0)for(var t=0;t<e.length;t+=1)e[t].style.visibility="visible"}function y(){return"image_events"}function E(e,t){N=!0,x="undefined"!=typeof t,w.show(e),"folder"===b&&L&&L.isReady()&&L.destroy(),G||o()}function I(){h()}var b,V=new e.Prefs,w=null,C=null,S=null,T=null,L=null,O=[],A=null,k=null,F=null,N=!1,x=!1,q=!1,D=!1,G=!0,M=null;return{hasStorageError:c,logEvent:d,onFileInit:u,onFileRefresh:g,onFileUnavailable:f,onSliderComplete:v,onSliderReady:p,pause:h,play:R,setAdditionalParams:m,getTableName:y,showError:E,stop:I}}(gadgets);var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.Slider=function(e){"use strict";function t(){var t=document.querySelector(".tp-banner ul"),n=document.createDocumentFragment(),i=[],o=null,r=null,s="";f=p.length,p.forEach(function(t){switch(o=document.createElement("li"),r=document.createElement("img"),o.setAttribute("data-transition","fade"),o.setAttribute("data-masterspeed",500),o.setAttribute("data-delay",1e3*e.duration),r.src="",r.setAttribute("data-lazyload",t.url),e.position){case"top-left":s="left top";break;case"top-center":s="center top";break;case"top-right":s="right top";break;case"middle-left":s="left center";break;case"middle-center":s="center center";break;case"middle-right":s="right center";break;case"bottom-left":s="left bottom";break;case"bottom-center":s="center bottom";break;case"bottom-right":s="right bottom";break;default:s="left top"}r.setAttribute("data-bgposition",s),e.scaleToFit?r.setAttribute("data-bgfit","contain"):r.setAttribute("data-bgfit","normal"),o.appendChild(r),i.push(o)}),i.forEach(function(e){n.appendChild(e)}),t.appendChild(n)}function n(e){V?u():y&&(y=!1,u(),RiseVision.Image.onSliderComplete(),E&&(m&&(i(),l(v)),E=!1)),e.slideIndex===f&&(y=!0)}function i(){$("body").off("touchend"),m.off("revolution.slide.onloaded"),m.off("revolution.slide.onchange"),m.revkill(),m=null}function o(){V=!0,clearTimeout(R),R=setTimeout(function(){m.revnext(),m.revresume(),V=!1,b=!0},1e3*e.pause),r()}function r(){e.autoHide&&(clearTimeout(h),h=setTimeout(function(){$(".tp-leftarrow, .tp-rightarrow").addClass("hidearrows")},w))}function s(){m&&(y=!1,u(),i())}function a(){return m&&p&&p.length>0?m.revcurrentslide():-1}function l(i){var s=document.querySelector(".tp-banner-container"),a=document.createDocumentFragment(),l=document.createElement("div"),c=document.createElement("ul");l.setAttribute("class","tp-banner"),l.appendChild(c),a.appendChild(l),s.appendChild(a),p=_.clone(i),t(),I=!0,m=$(".tp-banner").revolution({hideThumbs:0,hideTimerBar:"on",navigationType:"none",onHoverStop:"off",startwidth:e.width,startheight:e.height}),m.on("revolution.slide.onloaded",function(){u(),I=!1,RiseVision.Image.onSliderReady()}),m.on("revolution.slide.onchange",function(e,t){n(t)}),$("body").on("touchend",".tp-banner",function(){o(),$(".tp-leftarrow, .tp-rightarrow").removeClass("hidearrows")}),$("body").on("touchend",".tp-leftarrow, .tp-rightarrow",function(){o()}),r()}function c(){return!I}function d(){m&&(e.hasOwnProperty("resume")&&!e.resume&&m.revshowslide(0),b||(m.revresume(),b=!0))}function u(){m&&b&&(m.revpause(),b=!1)}function g(e){RiseVision.Common.Utilities.preloadImages(e),v=_.clone(e),E=!0}var f=0,m=null,p=null,v=null,h=null,R=null,y=!1,E=!1,I=!0,b=!1,V=!1,w=3e3;return{getCurrentSlide:a,destroy:s,init:l,isReady:c,play:d,pause:u,refresh:g}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.StorageFile=function(e){"use strict";function t(){var t=document.querySelector("rise-storage");t.addEventListener("rise-storage-response",function(e){var t;e.detail&&e.detail.url&&(t=e.detail.url.replace("'","\\'"),i?(i=!1,RiseVision.Image.onFileInit(t)):e.detail.hasOwnProperty("changed")&&(e.detail.changed?RiseVision.Image.onFileRefresh(t):RiseVision.Image.hasStorageError()&&RiseVision.Image.onFileRefresh(e.detail.url)))}),t.addEventListener("rise-storage-api-error",function(e){var t={event:"error",event_details:"storage api error",error_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.")}),t.addEventListener("rise-storage-no-file",function(e){var t={event:"error",event_details:"storage file not found",file_url:e.detail},n=document.getElementById("image");n.style.background="",RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected image does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-file-throttled",function(e){var t={event:"error",event_details:"storage file throttled",file_url:e.detail};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected image is temporarily unavailable.")}),t.addEventListener("rise-storage-subscription-expired",function(){var e={event:"error",event_details:"storage subscription expired"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("Rise Storage subscription is not active.")}),t.addEventListener("rise-storage-error",function(e){var t=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,n={event:"error",event_details:"rise storage error",error_details:"The request failed with status code: "+e.detail.error.currentTarget.status,file_url:t};RiseVision.Image.logEvent(n,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var t=e.detail&&e.detail.request&&e.detail.request.url?e.detail.request.url:null,n={event:"error",event_details:"rise cache error",error_details:e.detail.error.message,file_url:t};RiseVision.Image.logEvent(n,!0);var i=0;e.detail.error.message&&(i=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var o=RiseVision.Common.Utilities.getRiseCacheErrorMessage(i);RiseVision.Image.showError(o)}),t.addEventListener("rise-cache-not-running",function(e){var t={event:"error",event_details:"rise cache not running",error_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Image.logEvent(t,!0)}),t.addEventListener("rise-cache-file-unavailable",function(){RiseVision.Image.onFileUnavailable("File is downloading")}),t.setAttribute("folder",e.storage.folder),t.setAttribute("fileName",e.storage.fileName),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("env",config.STORAGE_ENV),t.go()}function n(){var e=document.querySelector("rise-storage");e&&e.go()}var i=!0;return{init:t,retry:n}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.StorageFolder=function(e){"use strict";function t(e){var t;e.detail&&(e.detail.added&&r.push({name:e.detail.name,url:e.detail.url}),e.detail.changed&&(t=_.find(r,function(t){return t.name===e.detail.name}),t.url=e.detail.url),e.detail.deleted&&(r=_.reject(r,function(t){return t.name===e.detail.name}))),r=_.sortBy(r,function(e){return e.name.toLowerCase()})}function n(e){return t(e),e.detail.added&&o?(r.length>1?(o=!1,clearTimeout(s),RiseVision.Image.onFileInit(r)):s=setTimeout(function(){o=!1,RiseVision.Image.onFileInit(r)},5e3),void 0):((!e.detail.hasOwnProperty("changed")||e.detail.changed||RiseVision.Image.hasStorageError())&&RiseVision.Image.onFileRefresh(r),void 0)}function i(){var t=document.querySelector("rise-storage");t.addEventListener("rise-storage-response",n),t.addEventListener("rise-storage-api-error",function(e){var t={event:"error",event_details:"storage api error",error_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.")}),t.addEventListener("rise-storage-empty-folder",function(){var e={event:"error",event_details:"storage folder empty"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("The selected folder does not contain any images.")}),t.addEventListener("rise-storage-no-folder",function(e){var t={event:"error",event_details:"storage folder doesn't exist",error_details:e.detail};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("The selected folder does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-folder-invalid",function(){var e={event:"error",event_details:"storage folder format(s) invalid"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("The selected folder does not contain any supported image formats.")}),t.addEventListener("rise-storage-subscription-expired",function(){var e={event:"error",event_details:"storage subscription expired"};RiseVision.Image.logEvent(e,!0),RiseVision.Image.showError("Rise Storage subscription is not active.")}),t.addEventListener("rise-storage-error",function(e){var t={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Image.logEvent(t,!0),RiseVision.Image.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var t={event:"rise cache error",event_details:e.detail.error.message};RiseVision.Image.logEvent(t,!0);var n=0;e.detail.error.message&&(n=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var i=RiseVision.Common.Utilities.getRiseCacheErrorMessage(n);RiseVision.Image.showError(i)}),t.addEventListener("rise-cache-not-running",function(e){var t={event:"error",event_details:"rise cache not running",error_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Image.logEvent(t,!0)}),t.setAttribute("fileType","image"),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("folder",e.storage.folder),t.setAttribute("env",config.STORAGE_ENV),t.go()}var o=!0,r=[],s=null;return{init:i}};var RiseVision=RiseVision||{};RiseVision.Image=RiseVision.Image||{},RiseVision.Image.NonStorage=function(e){"use strict";function t(e){var t;o.getFile(l,function(e,i){if(i){t={event:"error",event_details:"non-storage error",error_details:i.message,file_url:e.url},RiseVision.Image.logEvent(t,!0);var o=0;i.message&&(o=+i.message.substring(i.message.indexOf(":")+2));var r=RiseVision.Common.Utilities.getRiseCacheErrorMessage(o);RiseVision.Image.showError(r)}else a?(a=!1,RiseVision.Image.onFileInit(e.url),n()):RiseVision.Image.onFileRefresh(e.url)},e)}function n(){null===s&&(s=setInterval(function(){t(!0)},r))}function i(){l=e.url&&""!==e.url?e.url:e.selector.url,t(!0)}var o=RiseVision.Common.RiseCache,r=3e5,s=null,a=!0,l="";return{init:i}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,t){"use strict";function n(){try{t.style.height=e.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function i(){if(r){for(;t.firstChild;)t.removeChild(t.firstChild);t.style.display="none",e.style.display="block",r=!1}}function o(n){var i,o=document.createDocumentFragment();r?(i=t.querySelector(".message"),i.innerHTML=n):(e.style.display="none",t.style.display="block",i=document.createElement("p"),i.innerHTML=n,i.setAttribute("class","message"),o.appendChild(i),t.appendChild(o),r=!0)}var r=!1;return n(),{hide:i,show:o}},function(e,t,n){"use strict";function i(e,t){var n,i,o="",r="";Array.isArray(e)&&e.length>0&&Array.isArray(t)&&t.length>0&&("companyId"===e[0]&&(o=t[0]),"displayId"===e[1]&&(r=t[1]?t[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(o,r),"additionalParams"===e[2]&&(n=JSON.parse(t[2]),i=0!==Object.keys(n.storage).length?n.storage.fileName?"file":"folder":"file",RiseVision.Image.setAdditionalParams(n,i)))}function o(){RiseVision.Image.pause()}function r(){RiseVision.Image.play()}function s(){RiseVision.Image.stop()}function a(){e.removeEventListener("WebComponentsReady",a),l&&""!==l&&(n.rpc.register("rscmd_play_"+l,r),n.rpc.register("rscmd_pause_"+l,o),n.rpc.register("rscmd_stop_"+l,s),n.rpc.register("rsparam_set_"+l,i),n.rpc.call("","rsparam_get",null,l,["companyId","displayId","additionalParams"]))}var l=(new n.Prefs).getString("id");e.oncontextmenu=function(){return!1},t.body.onmousedown=function(){return!1},e.addEventListener("WebComponentsReady",a),RiseVision.Common.RiseCache.isV2Running(function(e){var n=t.createDocumentFragment(),i=t.createElement("link"),o="components/"+(e?"rise-storage-v2":"rise-storage")+"/rise-storage.html",r=t.createElement("rise-storage");i.setAttribute("rel","import"),i.setAttribute("href",o),t.getElementsByTagName("head")[0].appendChild(i),r.setAttribute("refresh",5),n.appendChild(r),t.body.appendChild(n);var s=t.createElement("script");s.src="components/webcomponentsjs/webcomponents-lite.min.js",t.getElementsByTagName("head")[0].appendChild(s)})}(window,document,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-3"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}();
//# sourceMappingURL=data:application/json;base64,
